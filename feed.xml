<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://samukweku.github.io/data-wrangling-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://samukweku.github.io/data-wrangling-blog/" rel="alternate" type="text/html" /><updated>2022-11-04T05:34:11-05:00</updated><id>https://samukweku.github.io/data-wrangling-blog/feed.xml</id><title type="html">Samuel Oranyeli</title><subtitle>Data Wrangling Blog.</subtitle><entry><title type="html">Filtering Rows in Datatable</title><link href="https://samukweku.github.io/data-wrangling-blog/python/datatable/filter/row%20selection/2022/11/04/Filtering-Rows-in-Python-Datatable.html" rel="alternate" type="text/html" title="Filtering Rows in Datatable" /><published>2022-11-04T00:00:00-05:00</published><updated>2022-11-04T00:00:00-05:00</updated><id>https://samukweku.github.io/data-wrangling-blog/python/datatable/filter/row%20selection/2022/11/04/Filtering-Rows-in-Python-Datatable</id><content type="html" xml:base="https://samukweku.github.io/data-wrangling-blog/python/datatable/filter/row%20selection/2022/11/04/Filtering-Rows-in-Python-Datatable.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-11-04-Filtering Rows in Python Datatable.ipynb
-->

<div class="container" id="notebook-container">
        
    
    
<div class="cell border-box-sizing code_cell rendered">

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>This article highlights various ways of filtering rows in python <a href="https://datatable.readthedocs.io/en/latest/">datatable</a>. The examples used here are based off the excellent <a href="https://suzan.rbind.io/2018/02/dplyr-tutorial-3/">article</a> by <a href="https://twitter.com/SuzanBaert">Susan Baert</a>.</p>
<p>The data file can be accessed <a href="https://github.com/samukweku/data_files/raw/master/msleep.txt">here</a></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Basic-Row-Filters"><strong>Basic Row Filters</strong><a class="anchor-link" href="#Basic-Row-Filters"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">datatable</span> <span class="kn">import</span> <span class="n">dt</span><span class="p">,</span> <span class="n">f</span>
<span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">and_</span><span class="p">,</span> <span class="n">or_</span><span class="p">,</span> <span class="n">xor</span><span class="p">,</span> <span class="n">eq</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea ">
<style type="text/css">
.datatable table.frame { margin-bottom: 0; }
.datatable table.frame thead { border-bottom: none; }
.datatable table.frame tr.coltypes td {  color: #FFFFFF;  line-height: 6px;  padding: 0 0.5em;}
.datatable .bool    { background: #DDDD99; }
.datatable .object  { background: #565656; }
.datatable .int     { background: #5D9E5D; }
.datatable .float   { background: #4040CC; }
.datatable .str     { background: #CC4040; }
.datatable .time    { background: #40CC40; }
.datatable .row_index {  background: var(--jp-border-color3);  border-right: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  font-size: 9px;}
.datatable .frame tbody td { text-align: left; }
.datatable .frame tr.coltypes .row_index {  background: var(--jp-border-color0);}
.datatable th:nth-child(2) { padding-left: 12px; }
.datatable .hellipsis {  color: var(--jp-cell-editor-border-color);}
.datatable .vellipsis {  background: var(--jp-layout-color0);  color: var(--jp-cell-editor-border-color);}
.datatable .na {  color: var(--jp-cell-editor-border-color);  font-size: 80%;}
.datatable .sp {  opacity: 0.25;}
.datatable .footer { font-size: 9px; }
.datatable .frame_dimensions {  background: var(--jp-border-color3);  border-top: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  display: inline-block;  opacity: 0.6;  padding: 1px 10px 1px 5px;}
</style>

</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">file_path</span> <span class="o">=</span> <span class="s2">&quot;https://github.com/samukweku/data_files/raw/master/msleep.txt&quot;</span>

<span class="n">DT</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">fread</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>

<span class="n">DT</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>conservation</th><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th><th>awake</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>lc</td><td>12.1</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>11.9</td><td><span class="na">NA</span></td><td>50</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td><span class="na">NA</span></td><td>17</td><td>1.8</td><td><span class="na">NA</span></td><td>7</td><td>0.0155</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>nt</td><td>14.4</td><td>2.4</td><td><span class="na">NA</span></td><td>9.6</td><td><span class="na">NA</span></td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>lc</td><td>14.9</td><td>2.3</td><td>0.133333</td><td>9.1</td><td>0.00029</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>domesticated</td><td>4</td><td>0.7</td><td>0.666667</td><td>20</td><td>0.423</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 11 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Filtering-Rows-Based-on-a-Numeric-Variable">Filtering Rows Based on a Numeric Variable<a class="anchor-link" href="#Filtering-Rows-Based-on-a-Numeric-Variable"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can filter numeric variables based on their values. A number of commonly used operators include: &gt;, &gt;=, &lt;, &lt;=, == and !=.</p>
<p>Note that in datatable, filtration occurs in the <code>i</code> section:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[</span><span class="n">f</span><span class="o">.</span><span class="n">sleep_total</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">,</span>  <span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;sleep_total&quot;</span><span class="p">]]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>sleep_total</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Big brown bat</td><td>19.7</td></tr>
    <tr><td class="row_index">1</td><td>Thick-tailed opposum</td><td>19.4</td></tr>
    <tr><td class="row_index">2</td><td>Little brown bat</td><td>19.9</td></tr>
    <tr><td class="row_index">3</td><td>Giant armadillo</td><td>18.1</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">4 rows &times; 2 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>To select a range of values, you can use two logical requirements; in the example below, only rows where <code>sleep_total</code> is greater than or equal to 16, and less than or equal to 18 are selected:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[(</span><span class="n">f</span><span class="o">.</span><span class="n">sleep_total</span> <span class="o">&gt;=</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">sleep_total</span> <span class="o">&lt;=</span> <span class="mi">18</span><span class="p">),</span>  <span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;sleep_total&quot;</span><span class="p">]]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>sleep_total</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Owl monkey</td><td>17</td></tr>
    <tr><td class="row_index">1</td><td>Long-nosed armadillo</td><td>17.4</td></tr>
    <tr><td class="row_index">2</td><td>North American Opossum</td><td>18</td></tr>
    <tr><td class="row_index">3</td><td>Arctic ground squirrel</td><td>16.6</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">4 rows &times; 2 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Note in the code above, that each condition is wrapped in parentheses; this is to ensure that the correct output is obtained.</p>
<p>In <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwi-ybqouovvAhWRzjgGHcYtB1sQFjAAegQIAxAD&amp;url=https%3A%2F%2Fpandas.pydata.org%2Fpandas-docs%2Fstable%2Freference%2Fapi%2Fpandas.Series.between.html&amp;usg=AOvVaw2JuKj72awwkzd_18ykvwPx">Pandas</a>/<a href="https://dplyr.tidyverse.org/reference/between.html">dplyr</a>/<a href="https://rdatatable.gitlab.io/data.table/reference/between.html">rdatatable</a>, there is a <code>between</code> function that makes selection such as the above easier; at the moment, there is no equivalent function in <a href="https://datatable.readthedocs.io/en/latest/api/index-api.html">datatable</a>; you can create a temporary <code>between</code> function:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">between</span><span class="p">(</span><span class="n">column</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
    <span class="n">l</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="n">column</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">left</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="n">column</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">right</span>
    <span class="k">return</span> <span class="n">l</span> <span class="o">&amp;</span> <span class="n">r</span>

<span class="n">DT</span><span class="p">[</span><span class="n">between</span><span class="p">(</span><span class="s1">&#39;sleep_total&#39;</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">18</span><span class="p">),</span>  <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span><span class="p">]]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>sleep_total</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Owl monkey</td><td>17</td></tr>
    <tr><td class="row_index">1</td><td>Long-nosed armadillo</td><td>17.4</td></tr>
    <tr><td class="row_index">2</td><td>North American Opossum</td><td>18</td></tr>
    <tr><td class="row_index">3</td><td>Arctic ground squirrel</td><td>16.6</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">4 rows &times; 2 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>There are scenarios where you may want to select rows where the value is nearly a given value. You may also want to specify a tolerance value to indicate how far the values can be.</p>
<p>This can be replicated with the <a href="https://datatable.readthedocs.io/en/latest/api/math/isclose.html">isclose</a> function in the <a href="https://datatable.readthedocs.io/en/latest/api/math.html">datatable.math</a> submodule.</p>
<p>Let's assume that the tolerance should be within one standard deviation of 17:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">datatable.math</span> <span class="kn">import</span> <span class="n">isclose</span>

<span class="c1"># calculate tolerance</span>
<span class="n">tolerance</span> <span class="o">=</span> <span class="n">DT</span><span class="p">[</span><span class="s1">&#39;sleep_total&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sd1</span><span class="p">()</span>

<span class="n">DT</span><span class="p">[</span><span class="n">isclose</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">sleep_total</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="n">atol</span> <span class="o">=</span> <span class="n">tolerance</span><span class="p">),</span>  <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span><span class="p">]]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>sleep_total</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Owl monkey</td><td>17</td></tr>
    <tr><td class="row_index">1</td><td>Mountain beaver</td><td>14.4</td></tr>
    <tr><td class="row_index">2</td><td>Greater short-tailed shrew</td><td>14.9</td></tr>
    <tr><td class="row_index">3</td><td>Three-toed sloth</td><td>14.4</td></tr>
    <tr><td class="row_index">4</td><td>Long-nosed armadillo</td><td>17.4</td></tr>
    <tr><td class="row_index">5</td><td>North American Opossum</td><td>18</td></tr>
    <tr><td class="row_index">6</td><td>Big brown bat</td><td>19.7</td></tr>
    <tr><td class="row_index">7</td><td>Western american chipmunk</td><td>14.9</td></tr>
    <tr><td class="row_index">8</td><td>Thick-tailed opposum</td><td>19.4</td></tr>
    <tr><td class="row_index">9</td><td>Mongolian gerbil</td><td>14.2</td></tr>
    <tr><td class="row_index">10</td><td>Golden hamster</td><td>14.3</td></tr>
    <tr><td class="row_index">11</td><td>Vole</td><td>12.8</td></tr>
    <tr><td class="row_index">12</td><td>Little brown bat</td><td>19.9</td></tr>
    <tr><td class="row_index">13</td><td>Round-tailed muskrat</td><td>14.6</td></tr>
    <tr><td class="row_index">14</td><td>Northern grasshopper mouse</td><td>14.5</td></tr>
    <tr><td class="row_index">15</td><td>Tiger</td><td>15.8</td></tr>
    <tr><td class="row_index">16</td><td>Lion</td><td>13.5</td></tr>
    <tr><td class="row_index">17</td><td>Phalanger</td><td>13.7</td></tr>
    <tr><td class="row_index">18</td><td>Giant armadillo</td><td>18.1</td></tr>
    <tr><td class="row_index">19</td><td>Laboratory rat</td><td>13</td></tr>
    <tr><td class="row_index">20</td><td>Arctic ground squirrel</td><td>16.6</td></tr>
    <tr><td class="row_index">21</td><td>Thirteen-lined ground squirrel</td><td>13.8</td></tr>
    <tr><td class="row_index">22</td><td>Golden-mantled ground squirrel</td><td>15.9</td></tr>
    <tr><td class="row_index">23</td><td>Musk shrew</td><td>12.8</td></tr>
    <tr><td class="row_index">24</td><td>Eastern american chipmunk</td><td>15.8</td></tr>
    <tr><td class="row_index">25</td><td>Tenrec</td><td>15.6</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">26 rows &times; 2 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Filtering-based-on-String-Matches">Filtering based on String Matches<a class="anchor-link" href="#Filtering-based-on-String-Matches"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can select on string matches as well; in the example below, the <code>==</code> comparison operator is used to select a specific group of animals:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[</span><span class="n">f</span><span class="o">.</span><span class="n">order</span> <span class="o">==</span> <span class="s2">&quot;Didelphimorphia&quot;</span><span class="p">,</span>  <span class="p">[</span><span class="s2">&quot;order&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;sleep_total&quot;</span><span class="p">]]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>order</th><th>name</th><th>sleep_total</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Didelphimorphia</td><td>North American Opossum</td><td>18</td></tr>
    <tr><td class="row_index">1</td><td>Didelphimorphia</td><td>Thick-tailed opposum</td><td>19.4</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">2 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Other operators can be used also:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[</span><span class="n">f</span><span class="o">.</span><span class="n">order</span> <span class="o">!=</span> <span class="s1">&#39;Rodentia&#39;</span><span class="p">,</span>  <span class="p">[</span><span class="s1">&#39;order&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span><span class="p">]]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>order</th><th>name</th><th>sleep_total</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Carnivora</td><td>Cheetah</td><td>12.1</td></tr>
    <tr><td class="row_index">1</td><td>Primates</td><td>Owl monkey</td><td>17</td></tr>
    <tr><td class="row_index">2</td><td>Soricomorpha</td><td>Greater short-tailed shrew</td><td>14.9</td></tr>
    <tr><td class="row_index">3</td><td>Artiodactyla</td><td>Cow</td><td>4</td></tr>
    <tr><td class="row_index">4</td><td>Pilosa</td><td>Three-toed sloth</td><td>14.4</td></tr>
    <tr><td class="row_index">5</td><td>Carnivora</td><td>Northern fur seal</td><td>8.7</td></tr>
    <tr><td class="row_index">6</td><td>Carnivora</td><td>Dog</td><td>10.1</td></tr>
    <tr><td class="row_index">7</td><td>Artiodactyla</td><td>Roe deer</td><td>3</td></tr>
    <tr><td class="row_index">8</td><td>Artiodactyla</td><td>Goat</td><td>5.3</td></tr>
    <tr><td class="row_index">9</td><td>Primates</td><td>Grivet</td><td>10</td></tr>
    <tr><td class="row_index">10</td><td>Soricomorpha</td><td>Star-nosed mole</td><td>10.3</td></tr>
    <tr><td class="row_index">11</td><td>Soricomorpha</td><td>Lesser short-tailed shrew</td><td>9.1</td></tr>
    <tr><td class="row_index">12</td><td>Cingulata</td><td>Long-nosed armadillo</td><td>17.4</td></tr>
    <tr><td class="row_index">13</td><td>Hyracoidea</td><td>Tree hyrax</td><td>5.3</td></tr>
    <tr><td class="row_index">14</td><td>Didelphimorphia</td><td>North American Opossum</td><td>18</td></tr>
    <tr><td class="row_index">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td></tr>
    <tr><td class="row_index">56</td><td>Scandentia</td><td>Tree shrew</td><td>8.9</td></tr>
    <tr><td class="row_index">57</td><td>Cetacea</td><td>Bottle-nosed dolphin</td><td>5.2</td></tr>
    <tr><td class="row_index">58</td><td>Carnivora</td><td>Genet</td><td>6.3</td></tr>
    <tr><td class="row_index">59</td><td>Carnivora</td><td>Arctic fox</td><td>12.5</td></tr>
    <tr><td class="row_index">60</td><td>Carnivora</td><td>Red fox</td><td>9.8</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">61 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[</span><span class="n">f</span><span class="o">.</span><span class="n">name</span> <span class="o">&gt;</span> <span class="s1">&#39;V&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;order&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span><span class="p">]]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>order</th><th>name</th><th>sleep_total</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Rodentia</td><td>Vesper mouse</td><td>7</td></tr>
    <tr><td class="row_index">1</td><td>Rodentia</td><td>Western american chipmunk</td><td>14.9</td></tr>
    <tr><td class="row_index">2</td><td>Rodentia</td><td>Vole</td><td>12.8</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">3 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In the examples above, only one animal is used; to select more animals, you could pass a list of conditions, with the <code>|</code> (or) symbol:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">order</span> <span class="o">==</span> <span class="s2">&quot;Didelphimorphia&quot;</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">order</span> <span class="o">==</span> <span class="s2">&quot;Diprotodontia&quot;</span><span class="p">)</span>

<span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;order&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span><span class="p">]</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>order</th><th>name</th><th>sleep_total</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Didelphimorphia</td><td>North American Opossum</td><td>18</td></tr>
    <tr><td class="row_index">1</td><td>Didelphimorphia</td><td>Thick-tailed opposum</td><td>19.4</td></tr>
    <tr><td class="row_index">2</td><td>Diprotodontia</td><td>Phalanger</td><td>13.7</td></tr>
    <tr><td class="row_index">3</td><td>Diprotodontia</td><td>Potoroo</td><td>11.1</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">4 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>However, this can become unwieldy, as the number of animals increase. At the moment, there is no equivalent of python's <a href="https://docs.python.org/3/reference/expressions.html#membership-test-operations">in</a> operator in <a href="https://datatable.readthedocs.io/en/latest/api/index-api.html">datatable</a>; let's create a temporary <a href="https://stackoverflow.com/a/61509482/7175713">function</a> to help with this:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">reduce</span>

<span class="k">def</span> <span class="nf">isin</span><span class="p">(</span><span class="n">column</span><span class="p">,</span> <span class="n">sequence_of_labels</span><span class="p">):</span>
    <span class="n">func</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">f</span><span class="p">[</span><span class="n">column</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span>
    <span class="k">return</span> <span class="n">reduce</span><span class="p">(</span><span class="n">or_</span><span class="p">,</span> <span class="nb">map</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">sequence_of_labels</span><span class="p">))</span>


<span class="n">labels</span> <span class="o">=</span>  <span class="p">(</span><span class="s2">&quot;Didelphimorphia&quot;</span><span class="p">,</span> <span class="s2">&quot;Diprotodontia&quot;</span><span class="p">)</span>

<span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;order&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;sleep_total&quot;</span><span class="p">]</span>

<span class="n">DT</span><span class="p">[</span><span class="n">isin</span><span class="p">(</span><span class="s1">&#39;order&#39;</span><span class="p">,</span> <span class="n">labels</span><span class="p">),</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>order</th><th>name</th><th>sleep_total</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Didelphimorphia</td><td>North American Opossum</td><td>18</td></tr>
    <tr><td class="row_index">1</td><td>Didelphimorphia</td><td>Thick-tailed opposum</td><td>19.4</td></tr>
    <tr><td class="row_index">2</td><td>Diprotodontia</td><td>Phalanger</td><td>13.7</td></tr>
    <tr><td class="row_index">3</td><td>Diprotodontia</td><td>Potoroo</td><td>11.1</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">4 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can also deselect certain groups using the <code>isin</code> function above, and combine it with the <code>~</code> symbol:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">labels</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;Rodentia&quot;</span><span class="p">,</span> <span class="s2">&quot;Carnivora&quot;</span><span class="p">,</span> <span class="s2">&quot;Primates&quot;</span><span class="p">)</span>

<span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;order&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span><span class="p">]</span>

<span class="n">DT</span><span class="p">[</span><span class="o">~</span><span class="n">isin</span><span class="p">(</span><span class="s1">&#39;order&#39;</span><span class="p">,</span> <span class="n">labels</span><span class="p">),</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>order</th><th>name</th><th>sleep_total</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Soricomorpha</td><td>Greater short-tailed shrew</td><td>14.9</td></tr>
    <tr><td class="row_index">1</td><td>Artiodactyla</td><td>Cow</td><td>4</td></tr>
    <tr><td class="row_index">2</td><td>Pilosa</td><td>Three-toed sloth</td><td>14.4</td></tr>
    <tr><td class="row_index">3</td><td>Artiodactyla</td><td>Roe deer</td><td>3</td></tr>
    <tr><td class="row_index">4</td><td>Artiodactyla</td><td>Goat</td><td>5.3</td></tr>
    <tr><td class="row_index">5</td><td>Soricomorpha</td><td>Star-nosed mole</td><td>10.3</td></tr>
    <tr><td class="row_index">6</td><td>Soricomorpha</td><td>Lesser short-tailed shrew</td><td>9.1</td></tr>
    <tr><td class="row_index">7</td><td>Cingulata</td><td>Long-nosed armadillo</td><td>17.4</td></tr>
    <tr><td class="row_index">8</td><td>Hyracoidea</td><td>Tree hyrax</td><td>5.3</td></tr>
    <tr><td class="row_index">9</td><td>Didelphimorphia</td><td>North American Opossum</td><td>18</td></tr>
    <tr><td class="row_index">10</td><td>Proboscidea</td><td>Asian elephant</td><td>3.9</td></tr>
    <tr><td class="row_index">11</td><td>Chiroptera</td><td>Big brown bat</td><td>19.7</td></tr>
    <tr><td class="row_index">12</td><td>Perissodactyla</td><td>Horse</td><td>2.9</td></tr>
    <tr><td class="row_index">13</td><td>Perissodactyla</td><td>Donkey</td><td>3.1</td></tr>
    <tr><td class="row_index">14</td><td>Erinaceomorpha</td><td>European hedgehog</td><td>10.1</td></tr>
    <tr><td class="row_index">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td></tr>
    <tr><td class="row_index">32</td><td>Monotremata</td><td>Short-nosed echidna</td><td>8.6</td></tr>
    <tr><td class="row_index">33</td><td>Perissodactyla</td><td>Brazilian tapir</td><td>4.4</td></tr>
    <tr><td class="row_index">34</td><td>Afrosoricida</td><td>Tenrec</td><td>15.6</td></tr>
    <tr><td class="row_index">35</td><td>Scandentia</td><td>Tree shrew</td><td>8.9</td></tr>
    <tr><td class="row_index">36</td><td>Cetacea</td><td>Bottle-nosed dolphin</td><td>5.2</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">37 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Filtering-Rows-Based-on-Regex">Filtering Rows Based on Regex<a class="anchor-link" href="#Filtering-Rows-Based-on-Regex"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>There are scenarios where you need to filter string columns based on partial matches; a regular expression comes in handy here.</p>
<p>At the moment, there are very few string functions in <a href="https://datatable.readthedocs.io/en/latest/api/index-api.html">datatable</a>; However, we can make do with the <code>re_match</code> function, which is similar to Python's <a href="https://docs.python.org/3/library/re.html#re.Pattern.match">re.match</a> to get by.</p>
<p>Let's filter for rows where <code>mouse</code> can be found in the column <code>name</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span><span class="p">]</span>

<span class="c1"># returns a boolean column </span>
<span class="n">row</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s1">&#39;.*mouse.*&#39;</span><span class="p">)</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>sleep_total</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>North American Opossum</td><td>18</td></tr>
    <tr><td class="row_index">1</td><td>Thick-tailed opposum</td><td>19.4</td></tr>
    <tr><td class="row_index">2</td><td>Phalanger</td><td>13.7</td></tr>
    <tr><td class="row_index">3</td><td>Potoroo</td><td>11.1</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">4 rows &times; 2 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Filtering-Rows-based-on-Multiple-Conditions">Filtering Rows based on Multiple Conditions<a class="anchor-link" href="#Filtering-Rows-based-on-Multiple-Conditions"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Select rows with a <code>bodywt</code> above 100 and either have a <code>sleep_total</code> above 15, or are not part of the <code>Carnivora</code> <code>order</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">bodywt</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="n">f</span><span class="o">.</span><span class="n">sleep_total</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">order</span> <span class="o">!=</span> <span class="s2">&quot;Carnivora&quot;</span><span class="p">))</span>

<span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;order&quot;</span><span class="p">,</span> <span class="nb">slice</span><span class="p">(</span><span class="s2">&quot;sleep_total&quot;</span><span class="p">,</span> <span class="s2">&quot;bodywt&quot;</span><span class="p">)]</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>order</th><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th><th>awake</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cow</td><td>Artiodactyla</td><td>4</td><td>0.7</td><td>0.666667</td><td>20</td><td>0.423</td><td>600</td></tr>
    <tr><td class="row_index">1</td><td>Asian elephant</td><td>Proboscidea</td><td>3.9</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>20.1</td><td>4.603</td><td>2547</td></tr>
    <tr><td class="row_index">2</td><td>Horse</td><td>Perissodactyla</td><td>2.9</td><td>0.6</td><td>1</td><td>21.1</td><td>0.655</td><td>521</td></tr>
    <tr><td class="row_index">3</td><td>Donkey</td><td>Perissodactyla</td><td>3.1</td><td>0.4</td><td><span class="na">NA</span></td><td>20.9</td><td>0.419</td><td>187</td></tr>
    <tr><td class="row_index">4</td><td>Giraffe</td><td>Artiodactyla</td><td>1.9</td><td>0.4</td><td><span class="na">NA</span></td><td>22.1</td><td><span class="na">NA</span></td><td>899.995</td></tr>
    <tr><td class="row_index">5</td><td>Pilot whale</td><td>Cetacea</td><td>2.7</td><td>0.1</td><td><span class="na">NA</span></td><td>21.35</td><td><span class="na">NA</span></td><td>800</td></tr>
    <tr><td class="row_index">6</td><td>African elephant</td><td>Proboscidea</td><td>3.3</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>20.7</td><td>5.712</td><td>6654</td></tr>
    <tr><td class="row_index">7</td><td>Tiger</td><td>Carnivora</td><td>15.8</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>8.2</td><td><span class="na">NA</span></td><td>162.564</td></tr>
    <tr><td class="row_index">8</td><td>Brazilian tapir</td><td>Perissodactyla</td><td>4.4</td><td>1</td><td>0.9</td><td>19.6</td><td>0.169</td><td>207.501</td></tr>
    <tr><td class="row_index">9</td><td>Bottle-nosed dolphin</td><td>Cetacea</td><td>5.2</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>18.8</td><td><span class="na">NA</span></td><td>173.33</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">10 rows &times; 8 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Return rows where <code>bodywt</code> is either greater than 100 or <code>brainwt</code> greater than 1, but not both:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">xor</span><span class="p">((</span><span class="n">f</span><span class="o">.</span><span class="n">bodywt</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">),</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">brainwt</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">))</span>

<span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nb">slice</span><span class="p">(</span><span class="s2">&quot;bodywt&quot;</span><span class="p">,</span> <span class="s2">&quot;brainwt&quot;</span><span class="p">)]</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>bodywt</th><th>brainwt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cow</td><td>600</td><td>0.423</td></tr>
    <tr><td class="row_index">1</td><td>Horse</td><td>521</td><td>0.655</td></tr>
    <tr><td class="row_index">2</td><td>Donkey</td><td>187</td><td>0.419</td></tr>
    <tr><td class="row_index">3</td><td>Giraffe</td><td>899.995</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">4</td><td>Pilot whale</td><td>800</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">5</td><td>Human</td><td>62</td><td>1.32</td></tr>
    <tr><td class="row_index">6</td><td>Tiger</td><td>162.564</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">7</td><td>Lion</td><td>161.499</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">8</td><td>Brazilian tapir</td><td>207.501</td><td>0.169</td></tr>
    <tr><td class="row_index">9</td><td>Bottle-nosed dolphin</td><td>173.33</td><td><span class="na">NA</span></td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">10 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Select all rows where <code>brainwt</code> is larger than 1, but <code>bodywt</code> does not exceed 100:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">bodywt</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">brainwt</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;sleep_total&quot;</span><span class="p">,</span> <span class="s2">&quot;brainwt&quot;</span><span class="p">,</span> <span class="s2">&quot;bodywt&quot;</span><span class="p">]</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>sleep_total</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Human</td><td>8</td><td>1.32</td><td>62</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">1 row &times; 4 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Filtering-out-Empty-Rows">Filtering out Empty Rows<a class="anchor-link" href="#Filtering-out-Empty-Rows"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>There are two options for filtering out empty rows - comparing with <code>None</code>, or using the <code>isna</code> function:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">conservation</span> <span class="o">!=</span> <span class="kc">None</span> 

<span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nb">slice</span><span class="p">(</span><span class="s2">&quot;conservation&quot;</span><span class="p">,</span> <span class="s2">&quot;sleep_cycle&quot;</span><span class="p">)]</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>conservation</th><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>lc</td><td>12.1</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">1</td><td>Mountain beaver</td><td>nt</td><td>14.4</td><td>2.4</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Greater short-tailed shrew</td><td>lc</td><td>14.9</td><td>2.3</td><td>0.133333</td></tr>
    <tr><td class="row_index">3</td><td>Cow</td><td>domesticated</td><td>4</td><td>0.7</td><td>0.666667</td></tr>
    <tr><td class="row_index">4</td><td>Northern fur seal</td><td>vu</td><td>8.7</td><td>1.4</td><td>0.383333</td></tr>
    <tr><td class="row_index">5</td><td>Dog</td><td>domesticated</td><td>10.1</td><td>2.9</td><td>0.333333</td></tr>
    <tr><td class="row_index">6</td><td>Roe deer</td><td>lc</td><td>3</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">7</td><td>Goat</td><td>lc</td><td>5.3</td><td>0.6</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">8</td><td>Guinea pig</td><td>domesticated</td><td>9.4</td><td>0.8</td><td>0.216667</td></tr>
    <tr><td class="row_index">9</td><td>Grivet</td><td>lc</td><td>10</td><td>0.7</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">10</td><td>Chinchilla</td><td>domesticated</td><td>12.5</td><td>1.5</td><td>0.116667</td></tr>
    <tr><td class="row_index">11</td><td>Star-nosed mole</td><td>lc</td><td>10.3</td><td>2.2</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">12</td><td>Lesser short-tailed shrew</td><td>lc</td><td>9.1</td><td>1.4</td><td>0.15</td></tr>
    <tr><td class="row_index">13</td><td>Long-nosed armadillo</td><td>lc</td><td>17.4</td><td>3.1</td><td>0.383333</td></tr>
    <tr><td class="row_index">14</td><td>Tree hyrax</td><td>lc</td><td>5.3</td><td>0.5</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td></tr>
    <tr><td class="row_index">49</td><td>Arctic ground squirrel</td><td>lc</td><td>16.6</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">50</td><td>Thirteen-lined ground squirrel</td><td>lc</td><td>13.8</td><td>3.4</td><td>0.216667</td></tr>
    <tr><td class="row_index">51</td><td>Golden-mantled ground squirrel</td><td>lc</td><td>15.9</td><td>3</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">52</td><td>Pig</td><td>domesticated</td><td>9.1</td><td>2.4</td><td>0.5</td></tr>
    <tr><td class="row_index">53</td><td>Brazilian tapir</td><td>vu</td><td>4.4</td><td>1</td><td>0.9</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">54 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="o">~</span><span class="n">dt</span><span class="o">.</span><span class="n">isna</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">conservation</span><span class="p">)</span> 

<span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nb">slice</span><span class="p">(</span><span class="s2">&quot;conservation&quot;</span><span class="p">,</span> <span class="s2">&quot;sleep_cycle&quot;</span><span class="p">)]</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>conservation</th><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>lc</td><td>12.1</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">1</td><td>Mountain beaver</td><td>nt</td><td>14.4</td><td>2.4</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Greater short-tailed shrew</td><td>lc</td><td>14.9</td><td>2.3</td><td>0.133333</td></tr>
    <tr><td class="row_index">3</td><td>Cow</td><td>domesticated</td><td>4</td><td>0.7</td><td>0.666667</td></tr>
    <tr><td class="row_index">4</td><td>Northern fur seal</td><td>vu</td><td>8.7</td><td>1.4</td><td>0.383333</td></tr>
    <tr><td class="row_index">5</td><td>Dog</td><td>domesticated</td><td>10.1</td><td>2.9</td><td>0.333333</td></tr>
    <tr><td class="row_index">6</td><td>Roe deer</td><td>lc</td><td>3</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">7</td><td>Goat</td><td>lc</td><td>5.3</td><td>0.6</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">8</td><td>Guinea pig</td><td>domesticated</td><td>9.4</td><td>0.8</td><td>0.216667</td></tr>
    <tr><td class="row_index">9</td><td>Grivet</td><td>lc</td><td>10</td><td>0.7</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">10</td><td>Chinchilla</td><td>domesticated</td><td>12.5</td><td>1.5</td><td>0.116667</td></tr>
    <tr><td class="row_index">11</td><td>Star-nosed mole</td><td>lc</td><td>10.3</td><td>2.2</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">12</td><td>Lesser short-tailed shrew</td><td>lc</td><td>9.1</td><td>1.4</td><td>0.15</td></tr>
    <tr><td class="row_index">13</td><td>Long-nosed armadillo</td><td>lc</td><td>17.4</td><td>3.1</td><td>0.383333</td></tr>
    <tr><td class="row_index">14</td><td>Tree hyrax</td><td>lc</td><td>5.3</td><td>0.5</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td></tr>
    <tr><td class="row_index">49</td><td>Arctic ground squirrel</td><td>lc</td><td>16.6</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">50</td><td>Thirteen-lined ground squirrel</td><td>lc</td><td>13.8</td><td>3.4</td><td>0.216667</td></tr>
    <tr><td class="row_index">51</td><td>Golden-mantled ground squirrel</td><td>lc</td><td>15.9</td><td>3</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">52</td><td>Pig</td><td>domesticated</td><td>9.1</td><td>2.4</td><td>0.5</td></tr>
    <tr><td class="row_index">53</td><td>Brazilian tapir</td><td>vu</td><td>4.4</td><td>1</td><td>0.9</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">54 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Filtering-across-Multiple-Columns">Filtering across Multiple Columns<a class="anchor-link" href="#Filtering-across-Multiple-Columns"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Filter-across-all-Columns">Filter across all Columns<a class="anchor-link" href="#Filter-across-all-Columns"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>It is possible to filter for rows based on values across columns.</p>
<p>One thing to note, and be careful about, is that in <a href="https://datatable.readthedocs.io/en/latest/start/quick-start.html">datatable</a>, within the same bracket, operations in the <code>i</code> section, occur before any operation within the <code>j</code> section; as such, depending on the context, and to ensure the right output, it is better to select the columns first, then chain the row filtration via another bracket. The examples below should make this clearer.</p>
<p>Let's filter for rows across the selected columns, keeping only rows where any column has the pattern <code>Ca</code> inside:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">:</span><span class="s1">&#39;order&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">vore</span><span class="p">)</span>
<span class="n">rows</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="s2">&quot;.*Ca.*&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">rowany</span><span class="p">()</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>order</th><th>sleep_total</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>Carnivora</td><td>12.1</td></tr>
    <tr><td class="row_index">1</td><td>Northern fur seal</td><td>Callorhinus</td><td>Carnivora</td><td>8.7</td></tr>
    <tr><td class="row_index">2</td><td>Vesper mouse</td><td>Calomys</td><td>Rodentia</td><td>7</td></tr>
    <tr><td class="row_index">3</td><td>Dog</td><td>Canis</td><td>Carnivora</td><td>10.1</td></tr>
    <tr><td class="row_index">4</td><td>Roe deer</td><td>Capreolus</td><td>Artiodactyla</td><td>3</td></tr>
    <tr><td class="row_index">5</td><td>Goat</td><td>Capri</td><td>Artiodactyla</td><td>5.3</td></tr>
    <tr><td class="row_index">6</td><td>Guinea pig</td><td>Cavis</td><td>Rodentia</td><td>9.4</td></tr>
    <tr><td class="row_index">7</td><td>Domestic cat</td><td>Felis</td><td>Carnivora</td><td>12.5</td></tr>
    <tr><td class="row_index">8</td><td>Gray seal</td><td>Haliochoerus</td><td>Carnivora</td><td>6.2</td></tr>
    <tr><td class="row_index">9</td><td>Tiger</td><td>Panthera</td><td>Carnivora</td><td>15.8</td></tr>
    <tr><td class="row_index">10</td><td>Jaguar</td><td>Panthera</td><td>Carnivora</td><td>10.4</td></tr>
    <tr><td class="row_index">11</td><td>Lion</td><td>Panthera</td><td>Carnivora</td><td>13.5</td></tr>
    <tr><td class="row_index">12</td><td>Caspian seal</td><td>Phoca</td><td>Carnivora</td><td>3.5</td></tr>
    <tr><td class="row_index">13</td><td>Genet</td><td>Genetta</td><td>Carnivora</td><td>6.3</td></tr>
    <tr><td class="row_index">14</td><td>Arctic fox</td><td>Vulpes</td><td>Carnivora</td><td>12.5</td></tr>
    <tr><td class="row_index">15</td><td>Red fox</td><td>Vulpes</td><td>Carnivora</td><td>9.8</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">16 rows &times; 4 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's look at another example, to filter for rows, across selected columns, where any column has a value less than 0.1:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span><span class="p">:</span><span class="s1">&#39;bodywt&#39;</span><span class="p">]</span>

<span class="n">rows</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mf">0.1</span><span class="p">)</span><span class="o">.</span><span class="n">rowany</span><span class="p">()</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th><th>awake</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Owl monkey</td><td>17</td><td>1.8</td><td><span class="na">NA</span></td><td>7</td><td>0.0155</td><td>0.48</td></tr>
    <tr><td class="row_index">1</td><td>Greater short-tailed shrew</td><td>14.9</td><td>2.3</td><td>0.133333</td><td>9.1</td><td>0.00029</td><td>0.019</td></tr>
    <tr><td class="row_index">2</td><td>Vesper mouse</td><td>7</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>17</td><td><span class="na">NA</span></td><td>0.045</td></tr>
    <tr><td class="row_index">3</td><td>Dog</td><td>10.1</td><td>2.9</td><td>0.333333</td><td>13.9</td><td>0.07</td><td>14</td></tr>
    <tr><td class="row_index">4</td><td>Roe deer</td><td>3</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>21</td><td>0.0982</td><td>14.8</td></tr>
    <tr><td class="row_index">5</td><td>Guinea pig</td><td>9.4</td><td>0.8</td><td>0.216667</td><td>14.6</td><td>0.0055</td><td>0.728</td></tr>
    <tr><td class="row_index">6</td><td>Chinchilla</td><td>12.5</td><td>1.5</td><td>0.116667</td><td>11.5</td><td>0.0064</td><td>0.42</td></tr>
    <tr><td class="row_index">7</td><td>Star-nosed mole</td><td>10.3</td><td>2.2</td><td><span class="na">NA</span></td><td>13.7</td><td>0.001</td><td>0.06</td></tr>
    <tr><td class="row_index">8</td><td>African giant pouched rat</td><td>8.3</td><td>2</td><td><span class="na">NA</span></td><td>15.7</td><td>0.0066</td><td>1</td></tr>
    <tr><td class="row_index">9</td><td>Lesser short-tailed shrew</td><td>9.1</td><td>1.4</td><td>0.15</td><td>14.9</td><td>0.00014</td><td>0.005</td></tr>
    <tr><td class="row_index">10</td><td>Long-nosed armadillo</td><td>17.4</td><td>3.1</td><td>0.383333</td><td>6.6</td><td>0.0108</td><td>3.5</td></tr>
    <tr><td class="row_index">11</td><td>Tree hyrax</td><td>5.3</td><td>0.5</td><td><span class="na">NA</span></td><td>18.7</td><td>0.0123</td><td>2.95</td></tr>
    <tr><td class="row_index">12</td><td>North American Opossum</td><td>18</td><td>4.9</td><td>0.333333</td><td>6</td><td>0.0063</td><td>1.7</td></tr>
    <tr><td class="row_index">13</td><td>Big brown bat</td><td>19.7</td><td>3.9</td><td>0.116667</td><td>4.3</td><td>0.0003</td><td>0.023</td></tr>
    <tr><td class="row_index">14</td><td>European hedgehog</td><td>10.1</td><td>3.5</td><td>0.283333</td><td>13.9</td><td>0.0035</td><td>0.77</td></tr>
    <tr><td class="row_index">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td></tr>
    <tr><td class="row_index">42</td><td>Tenrec</td><td>15.6</td><td>2.3</td><td><span class="na">NA</span></td><td>8.4</td><td>0.0026</td><td>0.9</td></tr>
    <tr><td class="row_index">43</td><td>Tree shrew</td><td>8.9</td><td>2.6</td><td>0.233333</td><td>15.1</td><td>0.0025</td><td>0.104</td></tr>
    <tr><td class="row_index">44</td><td>Genet</td><td>6.3</td><td>1.3</td><td><span class="na">NA</span></td><td>17.7</td><td>0.0175</td><td>2</td></tr>
    <tr><td class="row_index">45</td><td>Arctic fox</td><td>12.5</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>11.5</td><td>0.0445</td><td>3.38</td></tr>
    <tr><td class="row_index">46</td><td>Red fox</td><td>9.8</td><td>2.4</td><td>0.35</td><td>14.2</td><td>0.0504</td><td>4.23</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">47 rows &times; 7 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The above example only requires that at least one column has a value less than 0.1. What if the goal is to return only rows where all the columns have values above 1?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span> <span class="p">:</span> <span class="s1">&#39;bodywt&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">awake</span><span class="p">)</span>

<span class="n">rows</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">rowall</span><span class="p">()</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Human</td><td>8</td><td>1.9</td><td>1.5</td><td>1.32</td><td>62</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">1 row &times; 6 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Note the change from <a href="https://datatable.readthedocs.io/en/latest/api/dt/rowany.html">rowany</a> to <a href="https://datatable.readthedocs.io/en/latest/api/dt/rowall.html">rowall</a>; <a href="https://datatable.readthedocs.io/en/latest/api/dt/rowany.html">rowany</a> will return <code>True</code> for rows where <code>ANY</code> column matches the condition, whereas <a href="https://datatable.readthedocs.io/en/latest/api/dt/rowall.html">rowall</a> will only return <code>True</code> for rows where <code>ALL</code> columns match the condition.</p>
<p>All the examples so far combine <code>i</code> and <code>j</code> within a single bracket; so why all the noise about context and selecting columns first before rows? The next section should shed more light.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can also limit the filtration to columns that match a particular type; the examples above show how that can be done. This can be handy in certain situations where the target is not limited to one data type.</p>
<p>Consider the example below, where only rows that have nulls should be returned. Nulls can be both in numeric and string columns:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="s1">&#39;name&#39;</span> <span class="p">:</span> <span class="s1">&#39;order&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span> <span class="p">:</span> <span class="s1">&#39;sleep_rem&#39;</span><span class="p">]</span>

<span class="n">rows</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="p">[:]</span> <span class="o">==</span> <span class="kc">None</span><span class="p">)</span><span class="o">.</span><span class="n">rowany</span><span class="p">()</span>

<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns</span><span class="p">][</span><span class="n">rows</span><span class="p">,</span> <span class="p">:]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>sleep_total</th><th>sleep_rem</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>12.1</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">1</td><td>Vesper mouse</td><td>Calomys</td><td><span class="na">NA</span></td><td>Rodentia</td><td>7</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Roe deer</td><td>Capreolus</td><td>herbi</td><td>Artiodactyla</td><td>3</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">3</td><td>Asian elephant</td><td>Elephas</td><td>herbi</td><td>Proboscidea</td><td>3.9</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">4</td><td>Western american chipmunk</td><td>Eutamias</td><td>herbi</td><td>Rodentia</td><td>14.9</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">5</td><td>African elephant</td><td>Loxodonta</td><td>herbi</td><td>Proboscidea</td><td>3.3</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">6</td><td>Vole</td><td>Microtus</td><td>herbi</td><td>Rodentia</td><td>12.8</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">7</td><td>Round-tailed muskrat</td><td>Neofiber</td><td>herbi</td><td>Rodentia</td><td>14.6</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">8</td><td>Slow loris</td><td>Nyctibeus</td><td>carni</td><td>Primates</td><td>11</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">9</td><td>Northern grasshopper mouse</td><td>Onychomys</td><td>carni</td><td>Rodentia</td><td>14.5</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">10</td><td>Tiger</td><td>Panthera</td><td>carni</td><td>Carnivora</td><td>15.8</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">11</td><td>Jaguar</td><td>Panthera</td><td>carni</td><td>Carnivora</td><td>10.4</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">12</td><td>Lion</td><td>Panthera</td><td>carni</td><td>Carnivora</td><td>13.5</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">13</td><td>Desert hedgehog</td><td>Paraechinus</td><td><span class="na">NA</span></td><td>Erinaceomorpha</td><td>10.3</td><td>2.7</td></tr>
    <tr><td class="row_index">14</td><td>Potto</td><td>Perodicticus</td><td>omni</td><td>Primates</td><td>11</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">15</td><td>Deer mouse</td><td>Peromyscus</td><td><span class="na">NA</span></td><td>Rodentia</td><td>11.5</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">16</td><td>Phalanger</td><td>Phalanger</td><td><span class="na">NA</span></td><td>Diprotodontia</td><td>13.7</td><td>1.8</td></tr>
    <tr><td class="row_index">17</td><td>Common porpoise</td><td>Phocoena</td><td>carni</td><td>Cetacea</td><td>5.6</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">18</td><td>Rock hyrax</td><td>Procavia</td><td><span class="na">NA</span></td><td>Hyracoidea</td><td>5.4</td><td>0.5</td></tr>
    <tr><td class="row_index">19</td><td>African striped mouse</td><td>Rhabdomys</td><td>omni</td><td>Rodentia</td><td>8.7</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">20</td><td>Mole rat</td><td>Spalax</td><td><span class="na">NA</span></td><td>Rodentia</td><td>10.6</td><td>2.4</td></tr>
    <tr><td class="row_index">21</td><td>Arctic ground squirrel</td><td>Spermophilus</td><td>herbi</td><td>Rodentia</td><td>16.6</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">22</td><td>Musk shrew</td><td>Suncus</td><td><span class="na">NA</span></td><td>Soricomorpha</td><td>12.8</td><td>2</td></tr>
    <tr><td class="row_index">23</td><td>Short-nosed echidna</td><td>Tachyglossus</td><td>insecti</td><td>Monotremata</td><td>8.6</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">24</td><td>Eastern american chipmunk</td><td>Tamias</td><td>herbi</td><td>Rodentia</td><td>15.8</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">25</td><td>Bottle-nosed dolphin</td><td>Tursiops</td><td>carni</td><td>Cetacea</td><td>5.2</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">26</td><td>Arctic fox</td><td>Vulpes</td><td>carni</td><td>Carnivora</td><td>12.5</td><td><span class="na">NA</span></td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">27 rows &times; 6 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>However, we are only interested in rows where the string columns are null; simply modifying the selected columns in <code>rows</code> should resolve this:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">==</span> <span class="kc">None</span><span class="p">)</span><span class="o">.</span><span class="n">rowany</span><span class="p">()</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>sleep_total</th><th>sleep_rem</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td>17</td><td>1.8</td></tr>
    <tr><td class="row_index">1</td><td>Three-toed sloth</td><td>Bradypus</td><td>herbi</td><td>Pilosa</td><td>14.4</td><td>2.2</td></tr>
    <tr><td class="row_index">2</td><td>Vesper mouse</td><td>Calomys</td><td><span class="na">NA</span></td><td>Rodentia</td><td>7</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">3</td><td>African giant pouched rat</td><td>Cricetomys</td><td>omni</td><td>Rodentia</td><td>8.3</td><td>2</td></tr>
    <tr><td class="row_index">4</td><td>Western american chipmunk</td><td>Eutamias</td><td>herbi</td><td>Rodentia</td><td>14.9</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">5</td><td>Galago</td><td>Galago</td><td>omni</td><td>Primates</td><td>9.8</td><td>1.1</td></tr>
    <tr><td class="row_index">6</td><td>Human</td><td>Homo</td><td>omni</td><td>Primates</td><td>8</td><td>1.9</td></tr>
    <tr><td class="row_index">7</td><td>Macaque</td><td>Macaca</td><td>omni</td><td>Primates</td><td>10.1</td><td>1.2</td></tr>
    <tr><td class="row_index">8</td><td>Vole</td><td>Microtus</td><td>herbi</td><td>Rodentia</td><td>12.8</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">9</td><td>Little brown bat</td><td>Myotis</td><td>insecti</td><td>Chiroptera</td><td>19.9</td><td>2</td></tr>
    <tr><td class="row_index">10</td><td>Slow loris</td><td>Nyctibeus</td><td>carni</td><td>Primates</td><td>11</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">11</td><td>Chimpanzee</td><td>Pan</td><td>omni</td><td>Primates</td><td>9.7</td><td>1.4</td></tr>
    <tr><td class="row_index">12</td><td>Baboon</td><td>Papio</td><td>omni</td><td>Primates</td><td>9.4</td><td>1</td></tr>
    <tr><td class="row_index">13</td><td>Desert hedgehog</td><td>Paraechinus</td><td><span class="na">NA</span></td><td>Erinaceomorpha</td><td>10.3</td><td>2.7</td></tr>
    <tr><td class="row_index">14</td><td>Deer mouse</td><td>Peromyscus</td><td><span class="na">NA</span></td><td>Rodentia</td><td>11.5</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td><td class="hellipsis">&#x22EE;</td></tr>
    <tr><td class="row_index">26</td><td>Tree shrew</td><td>Tupaia</td><td>omni</td><td>Scandentia</td><td>8.9</td><td>2.6</td></tr>
    <tr><td class="row_index">27</td><td>Bottle-nosed dolphin</td><td>Tursiops</td><td>carni</td><td>Cetacea</td><td>5.2</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">28</td><td>Genet</td><td>Genetta</td><td>carni</td><td>Carnivora</td><td>6.3</td><td>1.3</td></tr>
    <tr><td class="row_index">29</td><td>Arctic fox</td><td>Vulpes</td><td>carni</td><td>Carnivora</td><td>12.5</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">30</td><td>Red fox</td><td>Vulpes</td><td>carni</td><td>Carnivora</td><td>9.8</td><td>2.4</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">31 rows &times; 6 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>That doesn't seem right. There are no missing values in rows 0 and 1, same for rows 26 and 30. What's going on?</p>
<p>As mentioned earlier, operations in <code>i</code> occur before <code>j</code>; in the code above, ALL the string columns in the frame were filtered, and not restricted to the selected columns. The right way about it is to select the columns first, then chain the row filtration:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="n">columns</span><span class="p">][</span><span class="n">rows</span><span class="p">,</span> <span class="p">:]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>sleep_total</th><th>sleep_rem</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Vesper mouse</td><td>Calomys</td><td><span class="na">NA</span></td><td>Rodentia</td><td>7</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">1</td><td>Desert hedgehog</td><td>Paraechinus</td><td><span class="na">NA</span></td><td>Erinaceomorpha</td><td>10.3</td><td>2.7</td></tr>
    <tr><td class="row_index">2</td><td>Deer mouse</td><td>Peromyscus</td><td><span class="na">NA</span></td><td>Rodentia</td><td>11.5</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">3</td><td>Phalanger</td><td>Phalanger</td><td><span class="na">NA</span></td><td>Diprotodontia</td><td>13.7</td><td>1.8</td></tr>
    <tr><td class="row_index">4</td><td>Rock hyrax</td><td>Procavia</td><td><span class="na">NA</span></td><td>Hyracoidea</td><td>5.4</td><td>0.5</td></tr>
    <tr><td class="row_index">5</td><td>Mole rat</td><td>Spalax</td><td><span class="na">NA</span></td><td>Rodentia</td><td>10.6</td><td>2.4</td></tr>
    <tr><td class="row_index">6</td><td>Musk shrew</td><td>Suncus</td><td><span class="na">NA</span></td><td>Soricomorpha</td><td>12.8</td><td>2</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">7 rows &times; 6 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Again, the filtration process depend on the context, and should be adapted accordingly.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Filter-at">Filter at<a class="anchor-link" href="#Filter-at"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>It is also possible to filter rows based on specific columns:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span> <span class="p">:</span> <span class="s1">&#39;sleep_rem&#39;</span><span class="p">,</span> <span class="s1">&#39;brainwt&#39;</span> <span class="p">:</span> <span class="s1">&#39;bodywt&#39;</span><span class="p">]</span>

<span class="n">rows</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="s1">&#39;sleep_total&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_rem&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">rowall</span><span class="p">()</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>sleep_total</th><th>sleep_rem</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Thick-tailed opposum</td><td>19.4</td><td>6.6</td><td><span class="na">NA</span></td><td>0.37</td></tr>
    <tr><td class="row_index">1</td><td>Giant armadillo</td><td>18.1</td><td>6.1</td><td>0.081</td><td>60</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">2 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Note in the example above, the <code>rows</code> and <code>columns</code> are within the same bracket, because the columns are explicitly specified; only values from those columns will be used for the filtration.</p>
<p>Another example below that uses a different select option:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span> <span class="p">:</span> <span class="s1">&#39;sleep_rem&#39;</span><span class="p">,</span> <span class="s1">&#39;brainwt&#39;</span> <span class="p">:</span> <span class="s1">&#39;bodywt&#39;</span><span class="p">]</span>

<span class="n">rows</span> <span class="o">=</span> <span class="p">[</span><span class="n">name</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">DT</span><span class="p">[:,</span> <span class="n">columns</span><span class="p">]</span><span class="o">.</span><span class="n">names</span> <span class="k">if</span> <span class="s1">&#39;sleep&#39;</span> <span class="ow">in</span> <span class="n">name</span><span class="p">]</span>

<span class="n">rows</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">rows</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">rowall</span><span class="p">()</span>

<span class="n">DT</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>sleep_total</th><th>sleep_rem</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Thick-tailed opposum</td><td>19.4</td><td>6.6</td><td><span class="na">NA</span></td><td>0.37</td></tr>
    <tr><td class="row_index">1</td><td>Giant armadillo</td><td>18.1</td><td>6.1</td><td>0.081</td><td>60</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">2 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Resources:</p>
<ul>
<li><a href="https://datatable.readthedocs.io/en/latest/">datatable docs</a></li>
<li>Based on datatable version <code>1.1</code></li>
</ul>

</div>
</div>
</div>
</div>]]></content><author><name>Samuel Oranyeli</name></author><category term="python" /><category term="datatable" /><category term="filter" /><category term="row selection" /><summary type="html"><![CDATA[Explore various ways of filtering in python Datatable.]]></summary></entry><entry><title type="html">Fast and Efficient Inequality Joins in Pandas</title><link href="https://samukweku.github.io/data-wrangling-blog/python/pandas/non-equi%20join/inequality%20join/conditional%20join/equi-join/2022/09/30/Fast-and-Efficient-Inequality-Joins-in-Pandas.html" rel="alternate" type="text/html" title="Fast and Efficient Inequality Joins in Pandas" /><published>2022-09-30T00:00:00-05:00</published><updated>2022-09-30T00:00:00-05:00</updated><id>https://samukweku.github.io/data-wrangling-blog/python/pandas/non-equi%20join/inequality%20join/conditional%20join/equi-join/2022/09/30/Fast-and-Efficient-Inequality-Joins-in-Pandas</id><content type="html" xml:base="https://samukweku.github.io/data-wrangling-blog/python/pandas/non-equi%20join/inequality%20join/conditional%20join/equi-join/2022/09/30/Fast-and-Efficient-Inequality-Joins-in-Pandas.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-09-30-Fast and Efficient Inequality Joins in Pandas.ipynb
-->

<div class="container" id="notebook-container">
        
    
    
<div class="cell border-box-sizing code_cell rendered">

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Introduction"><strong>Introduction</strong><a class="anchor-link" href="#Introduction"> </a></h2><p>Pandas supports <em>equi-join</em>, where the keys involved in the join are considered to be <em>equal</em>. This is implemented via the <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html">merge</a> and <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join">join</a> functions. There are scenarios however, where the keys involved might not be equal; some other logical condition is involved in the join. This is known as a <em>non-equi join</em> or an <em>inequality join</em>.</p>
<p>Let's look at some examples, culled from <a href="https://github.com/pandas-dev/pandas/issues/34543#issue-629846136">here</a>, that illustrate equi and non-equi joins:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;left&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="s1">&#39;col_a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="p">]})</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;right&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="s1">&#39;col_b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;Z&quot;</span><span class="p">,</span> <span class="s2">&quot;X&quot;</span><span class="p">,</span> <span class="s2">&quot;Y&quot;</span><span class="p">]})</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df1</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>left</th>
      <th>col_a</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>A</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>B</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>C</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df2</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>right</th>
      <th>col_b</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>Z</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>X</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Y</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Join based on the conditional <code>df1.left == df2.right</code> - this is an equi join, because the join operator is an <em>equality</em> operator, where df1.left is <em>equal to</em> df2.right:</p>
<table>
<thead><tr>
<th>left</th>
<th style="text-align:center">col_a</th>
<th style="text-align:center">right</th>
<th style="text-align:right">col_b</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td style="text-align:center">B</td>
<td style="text-align:center">2</td>
<td style="text-align:right">X</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">C</td>
<td style="text-align:center">3</td>
<td style="text-align:right">Y</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Join based on the conditional <code>df1.left != df2.right</code> - this is an example of a non-equi join; it should return rows where df1.left <em>is not equal to</em> df2.right:</p>
<table>
<thead><tr>
<th>left</th>
<th style="text-align:center">col_a</th>
<th style="text-align:center">right</th>
<th style="text-align:right">col_b</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:center">A</td>
<td style="text-align:center">2</td>
<td style="text-align:right">X</td>
</tr>
<tr>
<td>1</td>
<td style="text-align:center">A</td>
<td style="text-align:center">3</td>
<td style="text-align:right">Y</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center">B</td>
<td style="text-align:center">3</td>
<td style="text-align:right">Y</td>
</tr>
<tr>
<td>1</td>
<td style="text-align:center">A</td>
<td style="text-align:center">0</td>
<td style="text-align:right">Z</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center">B</td>
<td style="text-align:center">0</td>
<td style="text-align:right">Z</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">C</td>
<td style="text-align:center">0</td>
<td style="text-align:right">Z</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">C</td>
<td style="text-align:center">2</td>
<td style="text-align:right">X</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Join based on the conditional <code>df1.left &gt; df2.right</code> - this is another example of a non-equi join; it should return rows where df1.left <em>is greater than</em> df2.right:</p>
<table>
<thead><tr>
<th>left</th>
<th style="text-align:center">col_a</th>
<th style="text-align:center">right</th>
<th style="text-align:right">col_b</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:center">A</td>
<td style="text-align:center">0</td>
<td style="text-align:right">Z</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center">B</td>
<td style="text-align:center">0</td>
<td style="text-align:right">Z</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">C</td>
<td style="text-align:center">0</td>
<td style="text-align:right">Z</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">C</td>
<td style="text-align:center">2</td>
<td style="text-align:right">X</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>non-equi joins are supported in SQL, and offer elegant solutions for specific uses cases. A good example is provided <a href="https://github.com/pandas-dev/pandas/issues/34543#issue-629846136">here</a> -</p>
<p>Consider a dataframe <code>df_process</code> that contains <code>process_id</code>, <code>process_start_date</code> and <code>process_end_date</code> columns for some business process, and a second dataframe <code>df_events</code> that contains an <code>event_id</code> and an <code>event_date</code> column for particular events. If you want to find all events that occur during some business process, you can easily obtain these by applying the conditional join statement:</p>
<p><code>df_event.event_date &gt;= df_process.process_start_date &amp; df_event.event_date &lt;= df_process.process_end_date</code></p>
<p>The above scenario is an example of a range join, where the join is <em>between a range of values</em>. Currently in Pandas, to solve non-equi joins, a cartesian join is employed, where every row from the left dataframe is joined to every row from the right dataframe, before it is filtered with the non-equi joins:</p>
<div class="highlight"><pre><span></span><span class="p">(</span><span class="n">df_event</span>
<span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">df_process</span><span class="p">,</span> <span class="n">how</span> <span class="o">=</span> <span class="s1">&#39;cross&#39;</span><span class="p">)</span>
<span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;process_start_date &lt;= event_date &lt;= process_end_date&#39;</span><span class="p">)</span>
<span class="p">)</span>
</pre></div>
<p>This is not an efficient way to deal with inequality joins, in terms of memory and speed, especially for large data. This is where the <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.conditional_join.conditional_join">conditional_join</a> function from <a href="https://pyjanitor-devs.github.io/pyjanitor/">pyjanitor</a> comes into play. It provides an efficient way to deal with non-equi joins, and does so in a more memory efficient way than cartesian joins, while still being performant. Under the hood it uses binary search, and in some special cases, such as range joins, it uses special algorithms to improve performance.</p>
<p>We will be using the <a href="https://github.com/pyjanitor-devs/pyjanitor.git">dev</a> version in this article.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Strictly-Non-equi-Joins"><strong>Strictly Non-equi Joins</strong><a class="anchor-link" href="#Strictly-Non-equi-Joins"> </a></h2><p>Let's load the <a href="https://pyjanitor-devs.github.io/pyjanitor/">pyjanitor</a> library:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># install the dev version</span>
<span class="c1"># to access the latest developments</span>
<span class="c1"># pip install git+https://github.com/pyjanitor-devs/pyjanitor.git</span>
<span class="kn">import</span> <span class="nn">janitor</span> <span class="k">as</span> <span class="nn">jn</span>
<span class="kn">import</span> <span class="nn">sys</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot; pandas version :&quot;</span><span class="p">,</span> <span class="n">pd</span><span class="o">.</span><span class="n">__version__</span><span class="p">,</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> 
      <span class="s2">&quot;janitor version :&quot;</span><span class="p">,</span> <span class="n">jn</span><span class="o">.</span><span class="n">__version__</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span>
      <span class="s2">&quot;python version :&quot;</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre> pandas version : 1.4.4 
 janitor version : 0.23.1 
 python version : 3.9.12 | packaged by conda-forge | (main, Mar 24 2022, 23:23:20) 
[Clang 12.0.1 ]
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's walk through some of the parameters in <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.conditional_join.conditional_join">conditional_join</a>:</p>
<ul>
<li>df : Left DataFrame.</li>
<li>right: Named Series or DataFrame to join to <code>df</code>.</li>
<li>conditions : Variable argument of tuple(s) of the form <code>(left_on, right_on, op)</code>- 
  <code>left_on</code> is the column from <code>df</code>, <code>right_on</code> is the column from <code>right</code>, 
  while <code>op</code> is the join operator. For multiple conditions, the and(&amp;) operator
  is used to combine the results of the individual conditions.</li>
<li>how: indicates the type of join to be performed. Can be one of <code>left</code>, <code>right</code>, or <code>inner</code>.</li>
<li>use_numba: Whether to use <code>numba</code>, for possible performance increase. Applicable only to strictly non-equi joins.</li>
<li>df_columns: Select columns from <code>df</code>.</li>
<li>right_columns: Select columns from <code>right</code>.</li>
</ul>
<p>Let's apply the <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.conditional_join.conditional_join">conditional_join</a> function to solve the non-equi joins earlier:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df1</span><span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span><span class="n">df2</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="s1">&#39;right&#39;</span><span class="p">,</span> <span class="s1">&#39;!=&#39;</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>left</th>
      <th>col_a</th>
      <th>right</th>
      <th>col_b</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>A</td>
      <td>2</td>
      <td>X</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>A</td>
      <td>3</td>
      <td>Y</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>B</td>
      <td>3</td>
      <td>Y</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>A</td>
      <td>0</td>
      <td>Z</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2</td>
      <td>B</td>
      <td>0</td>
      <td>Z</td>
    </tr>
    <tr>
      <th>5</th>
      <td>3</td>
      <td>C</td>
      <td>0</td>
      <td>Z</td>
    </tr>
    <tr>
      <th>6</th>
      <td>3</td>
      <td>C</td>
      <td>2</td>
      <td>X</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df1</span><span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span><span class="n">df2</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="s1">&#39;right&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;&#39;</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>left</th>
      <th>col_a</th>
      <th>right</th>
      <th>col_b</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>A</td>
      <td>0</td>
      <td>Z</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>B</td>
      <td>0</td>
      <td>Z</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>C</td>
      <td>0</td>
      <td>Z</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3</td>
      <td>C</td>
      <td>2</td>
      <td>X</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For multiple non-equi conditions, the results of the individual conditions are combined with the and(&amp;) operator. Let's look at a range join, to see this in action - the example is adapted from <a href="http://da.qcri.org/ntang/pubs/vldbj2016.pdf">here</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">east</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">id</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">103</span><span class="p">),</span> 
            <span class="n">dur</span> <span class="o">=</span> <span class="p">[</span><span class="mi">140</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">90</span><span class="p">],</span> 
            <span class="n">rev</span> <span class="o">=</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> 
            <span class="n">cores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>

<span class="n">west</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">t_id</span> <span class="o">=</span> <span class="p">[</span><span class="mi">404</span><span class="p">,</span><span class="mi">498</span><span class="p">,</span> <span class="mi">676</span><span class="p">,</span> <span class="mi">742</span><span class="p">],</span> 
            <span class="n">time</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">140</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">90</span><span class="p">],</span> 
            <span class="n">cost</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> 
            <span class="n">cores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>

<span class="n">east</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">east</span><span class="p">)</span>
<span class="n">west</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">west</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">east</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>dur</th>
      <th>rev</th>
      <th>cores</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>100</td>
      <td>140</td>
      <td>9</td>
      <td>2</td>
    </tr>
    <tr>
      <th>1</th>
      <td>101</td>
      <td>100</td>
      <td>12</td>
      <td>8</td>
    </tr>
    <tr>
      <th>2</th>
      <td>102</td>
      <td>90</td>
      <td>5</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">west</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>t_id</th>
      <th>time</th>
      <th>cost</th>
      <th>cores</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>404</td>
      <td>100</td>
      <td>6</td>
      <td>4</td>
    </tr>
    <tr>
      <th>1</th>
      <td>498</td>
      <td>140</td>
      <td>11</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>676</td>
      <td>80</td>
      <td>10</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>742</td>
      <td>90</td>
      <td>5</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Task : Look for any customer from the West Coast who rented a virtual machine for more hours than any customer from the East Coast, but who paid less. Basically, get rows where <code>east.dur &lt; west.time</code> and <code>east.rev &gt; west.cost</code>.</p>
<p>This is a range join, and is solved easily and efficiently with <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.conditional_join.conditional_join">conditional_join</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="p">(</span><span class="n">east</span>
<span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
    <span class="n">west</span><span class="p">,</span> 
    <span class="p">(</span><span class="s1">&#39;dur&#39;</span><span class="p">,</span> <span class="s1">&#39;time&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;&#39;</span><span class="p">),</span> 
    <span class="p">(</span><span class="s1">&#39;rev&#39;</span><span class="p">,</span> <span class="s1">&#39;cost&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;&#39;</span><span class="p">),</span> 
    <span class="n">df_columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;dur&#39;</span><span class="p">,</span> <span class="s1">&#39;rev&#39;</span><span class="p">],</span>
    <span class="n">right_columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;t_id&#39;</span><span class="p">,</span> <span class="s1">&#39;time&#39;</span><span class="p">,</span> <span class="s1">&#39;cost&#39;</span><span class="p">]</span>
    <span class="p">)</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>dur</th>
      <th>rev</th>
      <th>t_id</th>
      <th>time</th>
      <th>cost</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>101</td>
      <td>100</td>
      <td>12</td>
      <td>498</td>
      <td>140</td>
      <td>11</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For range joins, and when <code>use_numba = False</code>, <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.conditional_join.conditional_join">conditional_join</a> uses an algorithm based on this <a href="https://www.vertica.com/blog/what-is-a-range-join-and-why-is-it-so-fastba-p223413/">vertica blog post</a>.</p>
<p>You might get more performance with <code>use_numba = True</code>. The implementation is based on the algorithm in this <a href="https://www.scitepress.org/papers/2018/68268/68268.pdf">publication</a></p>
<p>Note that non-equi join is supported only for numeric and date types.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Equi-and-Non-equi-Joins"><strong>Equi and Non-equi Joins</strong><a class="anchor-link" href="#Equi-and-Non-equi-Joins"> </a></h2><p><a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.conditional_join.conditional_join">conditional_join</a> also supports a combination of equi and non-equi join conditions - under the hood it uses Pandas' internal merge function to get the matching pairs, before pruning the non-equi joins to get the final dataframe. Depending on the size of the dataframes, this might offer more performance than the classic merge and filter approach:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> 
                    <span class="s1">&#39;value_1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]})</span>
                    
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> 
                    <span class="s1">&#39;value_2A&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> 
                    <span class="s1">&#39;value_2B&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">]})</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df1</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>value_1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>7</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>5</th>
      <td>3</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df2</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>value_2A</th>
      <th>value_2B</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>3</td>
      <td>5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>7</td>
      <td>9</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>12</td>
      <td>15</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>5</th>
      <td>2</td>
      <td>2</td>
      <td>4</td>
    </tr>
    <tr>
      <th>6</th>
      <td>2</td>
      <td>3</td>
      <td>6</td>
    </tr>
    <tr>
      <th>7</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Classic Pandas' merge and filter approach:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="p">(</span><span class="n">df1</span>
<span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">df2</span><span class="p">,</span> <span class="n">on</span> <span class="o">=</span> <span class="s1">&#39;id&#39;</span><span class="p">)</span>
<span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;value_2A &lt;= value_1 &lt;= value_2B&#39;</span><span class="p">)</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>value_1</th>
      <th>value_2A</th>
      <th>value_2B</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>5</th>
      <td>1</td>
      <td>5</td>
      <td>3</td>
      <td>5</td>
    </tr>
    <tr>
      <th>10</th>
      <td>1</td>
      <td>7</td>
      <td>7</td>
      <td>9</td>
    </tr>
    <tr>
      <th>12</th>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>16</th>
      <td>2</td>
      <td>3</td>
      <td>2</td>
      <td>4</td>
    </tr>
    <tr>
      <th>17</th>
      <td>2</td>
      <td>3</td>
      <td>3</td>
      <td>6</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>With <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.conditional_join.conditional_join">conditional_join</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="p">(</span><span class="n">df1</span>
<span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
    <span class="n">df2</span><span class="p">,</span>
    <span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;==&#39;</span><span class="p">),</span>
    <span class="p">(</span><span class="s1">&#39;value_1&#39;</span><span class="p">,</span> <span class="s1">&#39;value_2A&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span>
    <span class="p">(</span><span class="s1">&#39;value_1&#39;</span><span class="p">,</span> <span class="s1">&#39;value_2B&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">)</span>
<span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th colspan="2" halign="left">left</th>
      <th colspan="3" halign="left">right</th>
    </tr>
    <tr>
      <th></th>
      <th>id</th>
      <th>value_1</th>
      <th>id</th>
      <th>value_2A</th>
      <th>value_2B</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>5</td>
      <td>1</td>
      <td>3</td>
      <td>5</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>7</td>
      <td>1</td>
      <td>7</td>
      <td>9</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>1</td>
      <td>2</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2</td>
      <td>3</td>
      <td>2</td>
      <td>2</td>
      <td>4</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2</td>
      <td>3</td>
      <td>2</td>
      <td>3</td>
      <td>6</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Note the above returned a MultiIndex column; if the columns from the left and right dataframes have something in common a MultiIndex column is returned. Of course, you can select/rename columns with <code>df_columns</code> and <code>right_columns</code> to get a single index column, if that is preferred.</p>
<p>Note that there is no numba implementation when an equi join condition is present.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Non-equi-joins-with-OR"><strong>Non-equi joins with OR</strong><a class="anchor-link" href="#Non-equi-joins-with-OR"> </a></h2><p>For multiple non-equi joins, an and(&amp;) operator is applied, to combine the results of the individual conditions. There are scenarios however, where the join might have an <em>OR</em> condition. In this case, the joins are executed individually, and the resulting dataframes can then be concatenated into one. Let's look at an example from <a href="https://www.nelsontang.com/blog/2021-11-25-pandas-conditional-merging">Nelson Tang's blog post</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">sales_volume_table</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="o">.</span><span class="n">from_dict</span><span class="p">([</span>
    <span class="p">{</span><span class="s1">&#39;date&#39;</span><span class="p">:</span><span class="s1">&#39;2021-11-15&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;brand&#39;</span><span class="p">:</span><span class="s1">&#39;Outdoor&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;date&#39;</span><span class="p">:</span><span class="s1">&#39;2021-11-20&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;brand&#39;</span><span class="p">:</span><span class="s1">&#39;Leisure&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;date&#39;</span><span class="p">:</span><span class="s1">&#39;2021-11-25&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;brand&#39;</span><span class="p">:</span><span class="s1">&#39;Athletic&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;date&#39;</span><span class="p">:</span><span class="s1">&#39;2021-11-26&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;brand&#39;</span><span class="p">:</span><span class="s1">&#39;Outdoor&#39;</span><span class="p">},</span>
<span class="p">])</span>

<span class="n">promos_table</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="o">.</span><span class="n">from_dict</span><span class="p">([</span>
    <span class="p">{</span><span class="s1">&#39;start_date&#39;</span><span class="p">:</span><span class="s1">&#39;2021-11-01&#39;</span><span class="p">,</span> <span class="s1">&#39;end_date&#39;</span><span class="p">:</span><span class="s1">&#39;2021-11-25&#39;</span><span class="p">,</span>
    <span class="s1">&#39;brand&#39;</span><span class="p">:</span><span class="s1">&#39;ANY&#39;</span><span class="p">,</span> <span class="s1">&#39;rebate_per_unit&#39;</span><span class="p">:</span><span class="mi">3</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;start_date&#39;</span><span class="p">:</span><span class="s1">&#39;2021-11-25&#39;</span><span class="p">,</span> <span class="s1">&#39;end_date&#39;</span><span class="p">:</span><span class="s1">&#39;2021-11-26&#39;</span><span class="p">,</span>
    <span class="s1">&#39;brand&#39;</span><span class="p">:</span><span class="s1">&#39;Outdoor&#39;</span><span class="p">,</span> <span class="s1">&#39;rebate_per_unit&#39;</span><span class="p">:</span><span class="mi">5</span><span class="p">},</span>
<span class="p">])</span>

<span class="n">sales_volume_table</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">sales_volume_table</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">])</span>
<span class="n">promos_table</span><span class="p">[</span><span class="s1">&#39;start_date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">promos_table</span><span class="p">[</span><span class="s1">&#39;start_date&#39;</span><span class="p">])</span>
<span class="n">promos_table</span><span class="p">[</span><span class="s1">&#39;end_date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">promos_table</span><span class="p">[</span><span class="s1">&#39;end_date&#39;</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">sales_volume_table</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>quantity</th>
      <th>brand</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2021-11-15</td>
      <td>1</td>
      <td>Outdoor</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2021-11-20</td>
      <td>2</td>
      <td>Leisure</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2021-11-25</td>
      <td>3</td>
      <td>Athletic</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2021-11-26</td>
      <td>2</td>
      <td>Outdoor</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">promos_table</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>start_date</th>
      <th>end_date</th>
      <th>brand</th>
      <th>rebate_per_unit</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2021-11-01</td>
      <td>2021-11-25</td>
      <td>ANY</td>
      <td>3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2021-11-25</td>
      <td>2021-11-26</td>
      <td>Outdoor</td>
      <td>5</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Problem statement, culled from the blog post:</p>
<ol>
<li><p>The date in the left table was between two dates (a start and end date) in the second table</p>
</li>
<li><p>...AND the values in two other columns matched each other, OR the column on the right table was equal to 'ANY' (aka a 'wildcard' value)</p>
</li>
</ol>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Translating this into SQL is <a href="https://www.nelsontang.com/blog/2021-11-25-pandas-conditional-merging">easy</a>:</p>
<div class="highlight"><pre><span></span><span class="k">SELECT</span> <span class="o">*</span>
<span class="k">FROM</span> <span class="n">sales_volume_table</span><span class="p">,</span> <span class="n">promos_table</span>
<span class="k">WHERE</span> <span class="p">(</span><span class="n">sales_volume_table</span><span class="p">.</span><span class="n">brand</span><span class="o">=</span><span class="n">promos_table</span><span class="p">.</span><span class="n">brand</span> <span class="k">or</span> <span class="n">promos_table</span><span class="p">.</span><span class="n">brand</span><span class="o">=</span><span class="s1">&#39;ANY&#39;</span><span class="p">)</span>
<span class="k">AND</span> <span class="p">(</span><span class="n">start_date</span> <span class="o">&lt;=</span> <span class="nb">date</span> <span class="k">AND</span> <span class="nb">date</span> <span class="o">&lt;=</span> <span class="n">end_date</span><span class="p">)</span>
</pre></div>
<p>Replicating this in Pandas is more involved but doable:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">top</span> <span class="o">=</span> <span class="p">(</span><span class="n">sales_volume_table</span>
       <span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
            <span class="n">promos_table</span><span class="p">,</span>
            <span class="p">(</span><span class="s1">&#39;brand&#39;</span><span class="p">,</span> <span class="s1">&#39;brand&#39;</span><span class="p">,</span> <span class="s1">&#39;==&#39;</span><span class="p">),</span>
            <span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;start_date&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span>
            <span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;end_date&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">)</span>
          <span class="p">)</span>
    <span class="p">)</span>

<span class="n">bottom</span> <span class="o">=</span> <span class="p">(</span><span class="n">sales_volume_table</span>
          <span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
               <span class="n">promos_table</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;brand == &quot;ANY&quot;&#39;</span><span class="p">),</span>
               <span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;start_date&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span>
               <span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;end_date&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">)</span>
               <span class="p">)</span>
     <span class="p">)</span>

<span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">top</span><span class="p">,</span> <span class="n">bottom</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th colspan="3" halign="left">left</th>
      <th colspan="4" halign="left">right</th>
    </tr>
    <tr>
      <th></th>
      <th>date</th>
      <th>quantity</th>
      <th>brand</th>
      <th>start_date</th>
      <th>end_date</th>
      <th>brand</th>
      <th>rebate_per_unit</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2021-11-26</td>
      <td>2</td>
      <td>Outdoor</td>
      <td>2021-11-25</td>
      <td>2021-11-26</td>
      <td>Outdoor</td>
      <td>5</td>
    </tr>
    <tr>
      <th>0</th>
      <td>2021-11-15</td>
      <td>1</td>
      <td>Outdoor</td>
      <td>2021-11-01</td>
      <td>2021-11-25</td>
      <td>ANY</td>
      <td>3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2021-11-20</td>
      <td>2</td>
      <td>Leisure</td>
      <td>2021-11-01</td>
      <td>2021-11-25</td>
      <td>ANY</td>
      <td>3</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2021-11-25</td>
      <td>3</td>
      <td>Athletic</td>
      <td>2021-11-01</td>
      <td>2021-11-25</td>
      <td>ANY</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Performance"><strong>Performance</strong><a class="anchor-link" href="#Performance"> </a></h2><p>Why bother with <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.conditional_join.conditional_join">conditional_join</a>? memory and speed efficiency. Let's see that in action, compared to a cartesian join (the data used below is adapted from <a href="https://stackoverflow.com/a/25655497/7175713">here</a>):</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">load_ext</span> memory_profiler
<span class="kn">from</span> <span class="nn">string</span> <span class="kn">import</span> <span class="n">ascii_lowercase</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">2_000</span><span class="p">;</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">10_000</span>

<span class="n">idx1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
<span class="n">idx2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>

<span class="n">d1</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">ascii_lowercase</span><span class="p">[:</span><span class="mi">5</span><span class="p">]),</span> <span class="n">size</span><span class="o">=</span><span class="n">n</span><span class="p">),</span>
          <span class="n">start</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">minimum</span><span class="p">(</span><span class="n">idx1</span><span class="p">,</span> <span class="n">idx2</span><span class="p">),</span>
          <span class="n">end</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">maximum</span><span class="p">(</span><span class="n">idx1</span><span class="p">,</span> <span class="n">idx2</span><span class="p">))</span>

<span class="n">d2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">ascii_lowercase</span><span class="p">[:</span><span class="mi">15</span><span class="p">]),</span> <span class="n">size</span><span class="o">=</span><span class="n">k</span><span class="p">),</span>
          <span class="n">pos1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">151</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">k</span><span class="p">))</span>

<span class="n">d1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">d1</span><span class="p">)</span>
<span class="n">d2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">d1</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>x</th>
      <th>start</th>
      <th>end</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>c</td>
      <td>37</td>
      <td>61</td>
    </tr>
    <tr>
      <th>1</th>
      <td>d</td>
      <td>12</td>
      <td>16</td>
    </tr>
    <tr>
      <th>2</th>
      <td>b</td>
      <td>72</td>
      <td>79</td>
    </tr>
    <tr>
      <th>3</th>
      <td>c</td>
      <td>9</td>
      <td>74</td>
    </tr>
    <tr>
      <th>4</th>
      <td>d</td>
      <td>75</td>
      <td>76</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">d2</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">len</span><span class="p">(</span><span class="n">d1</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>(2000, 10000)</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">A</span> <span class="o">=</span> <span class="p">(</span><span class="n">d1</span>
    <span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">d2</span><span class="p">,</span> <span class="n">how</span> <span class="o">=</span> <span class="s1">&#39;cross&#39;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s2">&quot;start &lt;= pos1 &lt;= end&quot;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">filter</span><span class="p">([</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">])</span>
    <span class="p">)</span>
<span class="n">A</span><span class="o">.</span><span class="n">shape</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>(2740898, 3)</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">A</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>start</th>
      <th>end</th>
      <th>pos1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4</th>
      <td>37</td>
      <td>61</td>
      <td>61</td>
    </tr>
    <tr>
      <th>53</th>
      <td>37</td>
      <td>61</td>
      <td>60</td>
    </tr>
    <tr>
      <th>74</th>
      <td>37</td>
      <td>61</td>
      <td>60</td>
    </tr>
    <tr>
      <th>104</th>
      <td>37</td>
      <td>61</td>
      <td>60</td>
    </tr>
    <tr>
      <th>105</th>
      <td>37</td>
      <td>61</td>
      <td>60</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">B</span> <span class="o">=</span> <span class="p">(</span><span class="n">d1</span>
    <span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
        <span class="n">d2</span><span class="p">,</span> 
        <span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">),</span> 
        <span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span> 
        <span class="n">df_columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">],</span>
        <span class="n">right_columns</span><span class="o">=</span><span class="s1">&#39;pos1&#39;</span><span class="p">,</span>
        <span class="n">use_numba</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
    <span class="p">)</span>
<span class="n">B</span><span class="o">.</span><span class="n">shape</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>(2740898, 3)</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">B</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>start</th>
      <th>end</th>
      <th>pos1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>37</td>
      <td>61</td>
      <td>60</td>
    </tr>
    <tr>
      <th>1</th>
      <td>37</td>
      <td>61</td>
      <td>60</td>
    </tr>
    <tr>
      <th>2</th>
      <td>37</td>
      <td>61</td>
      <td>60</td>
    </tr>
    <tr>
      <th>3</th>
      <td>37</td>
      <td>61</td>
      <td>60</td>
    </tr>
    <tr>
      <th>4</th>
      <td>37</td>
      <td>61</td>
      <td>60</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">C</span> <span class="o">=</span> <span class="p">(</span><span class="n">d1</span>
    <span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
        <span class="n">d2</span><span class="p">,</span> 
        <span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">),</span> 
        <span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span> 
        <span class="n">df_columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">],</span>
        <span class="n">right_columns</span><span class="o">=</span><span class="s1">&#39;pos1&#39;</span><span class="p">,</span>
        <span class="n">use_numba</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="p">)</span>
<span class="n">C</span><span class="o">.</span><span class="n">shape</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stderr output_text">
<pre>OMP: Info #276: omp_set_nested routine deprecated, please use omp_set_max_active_levels instead.
</pre>
</div>
</div>

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>(2740898, 3)</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Check that the outputs match:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">cols</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">]</span>
<span class="n">A</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">cols</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">B</span> <span class="o">=</span> <span class="n">B</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">cols</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">C</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">cols</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">A</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">B</span><span class="p">),</span> <span class="n">A</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">C</span><span class="p">),</span> <span class="n">B</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">C</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>(True, True, True)</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's compare the speed:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">timeit</span> d1.merge(d2, how = &#39;cross&#39;).query(&quot;start &lt;= pos1 &lt;= end&quot;)
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>3.09 s ± 15.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">timeit</span> d1.conditional_join(d2, (&#39;start&#39;, &#39;pos1&#39;, &#39;&lt;=&#39;), (&#39;end&#39;, &#39;pos1&#39;, &#39;&gt;=&#39;), use_numba=False)
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>108 ms ± 6.54 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">timeit</span> d1.conditional_join(d2, (&#39;start&#39;, &#39;pos1&#39;, &#39;&lt;=&#39;), (&#39;end&#39;, &#39;pos1&#39;, &#39;&gt;=&#39;), use_numba=True)
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>100 ms ± 1.84 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Compare memory usage:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">memit</span> d1.merge(d2, how = &#39;cross&#39;).query(&quot;start &lt;= pos1 &lt;= end&quot;)
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>peak memory: 2504.43 MiB, increment: 1829.38 MiB
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">memit</span> d1.conditional_join(d2, (&#39;start&#39;, &#39;pos1&#39;, &#39;&lt;=&#39;), (&#39;end&#39;, &#39;pos1&#39;, &#39;&gt;=&#39;), use_numba=False)
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>peak memory: 520.52 MiB, increment: -5.43 MiB
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">memit</span> d1.conditional_join(d2, (&#39;start&#39;, &#39;pos1&#39;, &#39;&lt;=&#39;), (&#39;end&#39;, &#39;pos1&#39;, &#39;&gt;=&#39;), use_numba=True)
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>peak memory: 518.07 MiB, increment: -2.45 MiB
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's run another performance test - the code below is a self join to find overlapping events in a 30,000 row DataFrame, and adapted from <a href="https://github.com/duckdb/duckdb/blob/master/benchmark/micro/join/iejoin_events.benchmark">DuckDB</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;https://github.com/samukweku/data-wrangling-blog/raw/master/_notebooks/Data_files/results.csv&#39;</span>
<span class="n">events</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">parse_dates</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">:]</span>
<span class="n">events</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>name</th>
      <th>audience</th>
      <th>start</th>
      <th>sponsor</th>
      <th>end</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>Event 1</td>
      <td>1178</td>
      <td>2022-11-19 10:00:00</td>
      <td>Sponsor 2</td>
      <td>2022-11-19 10:15:00</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>Event 2</td>
      <td>1446</td>
      <td>2015-09-27 15:00:00</td>
      <td>Sponsor 11</td>
      <td>2015-09-27 15:11:00</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Event 3</td>
      <td>2261</td>
      <td>2019-11-12 18:00:00</td>
      <td>Sponsor 10</td>
      <td>2019-11-12 18:53:00</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>Event 4</td>
      <td>1471</td>
      <td>2019-12-24 22:00:00</td>
      <td>Sponsor 6</td>
      <td>2019-12-24 22:11:00</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>Event 5</td>
      <td>2605</td>
      <td>2028-06-20 12:00:00</td>
      <td>Sponsor 8</td>
      <td>2028-06-20 12:31:00</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="p">(</span><span class="n">events</span>
<span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
    <span class="n">events</span><span class="p">,</span>
    <span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">),</span>
    <span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span>
    <span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;!=&#39;</span><span class="p">),</span>
    <span class="n">use_numba</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span>
    <span class="n">df_columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">],</span>
    <span class="n">right_columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">])</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th colspan="3" halign="left">left</th>
      <th colspan="3" halign="left">right</th>
    </tr>
    <tr>
      <th></th>
      <th>id</th>
      <th>start</th>
      <th>end</th>
      <th>id</th>
      <th>start</th>
      <th>end</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>10</td>
      <td>1993-11-27 12:00:00</td>
      <td>1993-11-27 12:37:00</td>
      <td>2345</td>
      <td>1993-11-27 10:00:00</td>
      <td>1993-11-27 12:00:00</td>
    </tr>
    <tr>
      <th>1</th>
      <td>15</td>
      <td>1993-04-04 16:00:00</td>
      <td>1993-04-04 18:00:00</td>
      <td>11178</td>
      <td>1993-04-04 17:00:00</td>
      <td>1993-04-04 17:22:00</td>
    </tr>
    <tr>
      <th>2</th>
      <td>17</td>
      <td>2030-10-25 07:00:00</td>
      <td>2030-10-25 07:27:00</td>
      <td>19605</td>
      <td>2030-10-25 06:00:00</td>
      <td>2030-10-25 08:00:00</td>
    </tr>
    <tr>
      <th>3</th>
      <td>26</td>
      <td>2005-10-04 17:00:00</td>
      <td>2005-10-04 17:18:00</td>
      <td>8218</td>
      <td>2005-10-04 17:00:00</td>
      <td>2005-10-04 17:27:00</td>
    </tr>
    <tr>
      <th>4</th>
      <td>35</td>
      <td>2024-05-02 15:00:00</td>
      <td>2024-05-02 15:35:00</td>
      <td>6916</td>
      <td>2024-05-02 15:00:00</td>
      <td>2024-05-02 15:36:00</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>3697</th>
      <td>29966</td>
      <td>2000-08-26 11:00:00</td>
      <td>2000-08-26 13:00:00</td>
      <td>29375</td>
      <td>2000-08-26 13:00:00</td>
      <td>2000-08-26 13:53:00</td>
    </tr>
    <tr>
      <th>3698</th>
      <td>29971</td>
      <td>2018-05-18 04:00:00</td>
      <td>2018-05-18 04:18:00</td>
      <td>24173</td>
      <td>2018-05-18 04:00:00</td>
      <td>2018-05-18 04:36:00</td>
    </tr>
    <tr>
      <th>3699</th>
      <td>29978</td>
      <td>1992-06-07 22:00:00</td>
      <td>1992-06-07 22:23:00</td>
      <td>981</td>
      <td>1992-06-07 22:00:00</td>
      <td>1992-06-07 22:30:00</td>
    </tr>
    <tr>
      <th>3700</th>
      <td>29984</td>
      <td>2025-06-05 03:00:00</td>
      <td>2025-06-05 03:17:00</td>
      <td>19051</td>
      <td>2025-06-05 01:00:00</td>
      <td>2025-06-05 03:00:00</td>
    </tr>
    <tr>
      <th>3701</th>
      <td>29995</td>
      <td>2016-09-04 14:00:00</td>
      <td>2016-09-04 14:32:00</td>
      <td>12296</td>
      <td>2016-09-04 14:00:00</td>
      <td>2016-09-04 14:50:00</td>
    </tr>
  </tbody>
</table>
<p>3702 rows × 6 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The cartesian join takes a very long time - too long for us to test here. The focus for this test will just be on <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.conditional_join.conditional_join">conditional_join</a> and show where performance with <a href="https://numba.readthedocs.io/en/stable/">numba</a> might be better.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%%time</span>it
<span class="p">(</span><span class="n">events</span>
<span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
    <span class="n">events</span><span class="p">,</span>
    <span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">),</span>
    <span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span>
    <span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;!=&#39;</span><span class="p">),</span>
    <span class="n">use_numba</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span>
    <span class="n">df_columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">],</span>
    <span class="n">right_columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">])</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>1.2 s ± 101 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%%time</span>it
<span class="p">(</span><span class="n">events</span>
<span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
    <span class="n">events</span><span class="p">,</span>
    <span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">),</span>
    <span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span>
    <span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;!=&#39;</span><span class="p">),</span>
    <span class="n">use_numba</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span>
    <span class="n">df_columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">],</span>
    <span class="n">right_columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">])</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>24.3 ms ± 1.15 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's look at performance when an equi join is present:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">string</span> <span class="kn">import</span> <span class="n">ascii_lowercase</span>
<span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">20_000</span><span class="p">;</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">100_000</span>

<span class="n">idx1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
<span class="n">idx2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>

<span class="n">d1</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">ascii_lowercase</span><span class="p">[:</span><span class="mi">5</span><span class="p">]),</span> <span class="n">size</span><span class="o">=</span><span class="n">n</span><span class="p">),</span>
          <span class="n">start</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">minimum</span><span class="p">(</span><span class="n">idx1</span><span class="p">,</span> <span class="n">idx2</span><span class="p">),</span>
          <span class="n">end</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">maximum</span><span class="p">(</span><span class="n">idx1</span><span class="p">,</span> <span class="n">idx2</span><span class="p">))</span>

<span class="n">d2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">ascii_lowercase</span><span class="p">[:</span><span class="mi">15</span><span class="p">]),</span> <span class="n">size</span><span class="o">=</span><span class="n">k</span><span class="p">),</span>
          <span class="n">pos1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">151</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">k</span><span class="p">))</span>

<span class="n">d1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">d1</span><span class="p">)</span>
<span class="n">d2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="n">d1</span>
       <span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">d2</span><span class="p">,</span> <span class="n">on</span> <span class="o">=</span> <span class="s1">&#39;x&#39;</span><span class="p">)</span>
       <span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;start &lt;= pos1 &lt;= end&#39;</span><span class="p">)</span>
       <span class="p">)</span>
<span class="n">out</span><span class="o">.</span><span class="n">shape</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>(17792800, 4)</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="n">d1</span>
       <span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
            <span class="n">d2</span><span class="p">,</span> 
            <span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">),</span> 
            <span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span> 
            <span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;==&#39;</span><span class="p">),</span> 
            <span class="n">use_numba</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
    <span class="p">)</span>
<span class="n">out</span><span class="o">.</span><span class="n">shape</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>(17792800, 5)</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>About 18 million rows are returned; let's see how fast each function runs:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%%time</span>it
<span class="p">(</span><span class="n">d1</span>
<span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">d2</span><span class="p">,</span> <span class="n">on</span> <span class="o">=</span> <span class="s1">&#39;x&#39;</span><span class="p">)</span>
<span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;start &lt;= pos1 &lt;= end&#39;</span><span class="p">)</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>21.2 s ± 226 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%%time</span>it
<span class="p">(</span><span class="n">d1</span>
<span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
    <span class="n">d2</span><span class="p">,</span> 
    <span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">),</span> 
    <span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span> 
    <span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;==&#39;</span><span class="p">),</span> 
    <span class="n">use_numba</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>8.09 s ± 357 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">memit</span> d1.merge(d2, on = &#39;x&#39;).query(&#39;start &lt;= pos1 &lt;= end&#39;)
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>peak memory: 6938.91 MiB, increment: 6489.89 MiB
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">memit</span> d1.conditional_join(d2, (&#39;start&#39;, &#39;pos1&#39;, &#39;&lt;=&#39;), (&#39;end&#39;, &#39;pos1&#39;, &#39;&gt;=&#39;), (&#39;x&#39;, &#39;x&#39;, &#39;==&#39;), use_numba=False)
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>peak memory: 6474.79 MiB, increment: 6233.82 MiB
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.conditional_join.conditional_join">conditional_join</a> is faster; this might not be the case all the time. Let's go nuts and see the performance when it is just on non-equi joins:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="p">(</span><span class="n">d1</span>
<span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
    <span class="n">d2</span><span class="p">,</span> 
    <span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">),</span> 
    <span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span> 
    <span class="n">use_numba</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="o">.</span><span class="n">shape</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>(267117635, 5)</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Over 267 million rows. OK, how long does it take to process this?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%%time</span>it
<span class="p">(</span><span class="n">d1</span>
<span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
    <span class="n">d2</span><span class="p">,</span> 
    <span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">),</span> 
    <span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span> 
    <span class="n">use_numba</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>32.2 s ± 1.66 s per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%%time</span>it
<span class="p">(</span><span class="n">d1</span>
<span class="o">.</span><span class="n">conditional_join</span><span class="p">(</span>
    <span class="n">d2</span><span class="p">,</span> 
    <span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;=&#39;</span><span class="p">),</span> 
    <span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;pos1&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">),</span> 
    <span class="n">use_numba</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>18 s ± 1.05 s per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">memit</span> d1.conditional_join(d2, (&#39;start&#39;, &#39;pos1&#39;, &#39;&lt;=&#39;), (&#39;end&#39;, &#39;pos1&#39;, &#39;&gt;=&#39;), use_numba=False)
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>peak memory: 6029.12 MiB, increment: 5832.51 MiB
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">memit</span> d1.conditional_join(d2, (&#39;start&#39;, &#39;pos1&#39;, &#39;&lt;=&#39;), (&#39;end&#39;, &#39;pos1&#39;, &#39;&gt;=&#39;), use_numba=True)
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>peak memory: 6007.36 MiB, increment: 5815.22 MiB
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>How long do you think it'll take if a cartesian join was used instead?</p>
<p>If you can modify the non-equi join logic so that an equi join is included in it, you are likely to see performance improvement. Also note that your mileage may vary with these speed tests.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Summary"><strong>Summary</strong><a class="anchor-link" href="#Summary"> </a></h2><p>This blog post shows how to efficiently join on non-equi conditions, using <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.conditional_join.conditional_join">conditional_join</a>. If you are comfortable with SQL, you could get more performance with <a href="https://duckdb.org">DuckDB</a>, which allows querying Pandas DataFrames efficiently with SQL, supports non-equi joins as well, and has a <a href="https://duckdb.org/2022/05/27/iejoin.html">performant implementation</a> for range joins.</p>

</div>
</div>
</div>
</div>]]></content><author><name>Samuel Oranyeli</name></author><category term="python" /><category term="Pandas" /><category term="non-equi join" /><category term="inequality join" /><category term="conditional join" /><category term="equi-join" /><summary type="html"><![CDATA[Compute inequality joins better than a cross join or a naive nested loop.]]></summary></entry><entry><title type="html">Dplyr’s across: Replicating within Pandas</title><link href="https://samukweku.github.io/data-wrangling-blog/python/pandas/column-wise%20operations/dplyr/across/2022/09/30/dplyr's-across-in-Pandas.html" rel="alternate" type="text/html" title="Dplyr’s across: Replicating within Pandas" /><published>2022-09-30T00:00:00-05:00</published><updated>2022-09-30T00:00:00-05:00</updated><id>https://samukweku.github.io/data-wrangling-blog/python/pandas/column-wise%20operations/dplyr/across/2022/09/30/dplyr's-%60across%60-in-Pandas</id><content type="html" xml:base="https://samukweku.github.io/data-wrangling-blog/python/pandas/column-wise%20operations/dplyr/across/2022/09/30/dplyr's-across-in-Pandas.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-09-30-dplyr's `across` in Pandas.ipynb
-->

<div class="container" id="notebook-container">
        
    
    
<div class="cell border-box-sizing code_cell rendered">

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><a href="https://dplyr.tidyverse.org/index.html">dplyr</a> has the <a href="https://dplyr.tidyverse.org/reference/across.html">across</a> function, which is meant to make column wise processing easy. Pandas has always supported column-wise operations, and in a relatively simple manner.</p>
<p>This article aims to replicate solutions in the dplyr <a href="https://dplyr.tidyverse.org/articles/colwise.html">column-wise operations</a> vignette with Pandas.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's load in the relevant libraries</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="nb">print</span><span class="p">(</span><span class="s2">&quot; pandas version :&quot;</span><span class="p">,</span> <span class="n">pd</span><span class="o">.</span><span class="n">__version__</span><span class="p">,</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> 
      <span class="s2">&quot;numpy version :&quot;</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">__version__</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> 
      <span class="s2">&quot;python version :&quot;</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre> pandas version : 1.4.4 
 numpy version : 1.22.4 
 python version : 3.9.12 | packaged by conda-forge | (main, Mar 24 2022, 23:23:20) 
[Clang 12.0.1 ]
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;https://raw.githubusercontent.com/tidyverse/dplyr/main/data-raw/starwars.csv&quot;</span>
<span class="n">starwars</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
<span class="n">starwars</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>name</th>
      <th>height</th>
      <th>mass</th>
      <th>hair_color</th>
      <th>skin_color</th>
      <th>eye_color</th>
      <th>birth_year</th>
      <th>sex</th>
      <th>gender</th>
      <th>homeworld</th>
      <th>species</th>
      <th>films</th>
      <th>vehicles</th>
      <th>starships</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Luke Skywalker</td>
      <td>172.0</td>
      <td>77.0</td>
      <td>blond</td>
      <td>fair</td>
      <td>blue</td>
      <td>19.0</td>
      <td>male</td>
      <td>masculine</td>
      <td>Tatooine</td>
      <td>Human</td>
      <td>The Empire Strikes Back, Revenge of the Sith, ...</td>
      <td>Snowspeeder, Imperial Speeder Bike</td>
      <td>X-wing, Imperial shuttle</td>
    </tr>
    <tr>
      <th>1</th>
      <td>C-3PO</td>
      <td>167.0</td>
      <td>75.0</td>
      <td>NaN</td>
      <td>gold</td>
      <td>yellow</td>
      <td>112.0</td>
      <td>none</td>
      <td>masculine</td>
      <td>Tatooine</td>
      <td>Droid</td>
      <td>The Empire Strikes Back, Attack of the Clones,...</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>R2-D2</td>
      <td>96.0</td>
      <td>32.0</td>
      <td>NaN</td>
      <td>white, blue</td>
      <td>red</td>
      <td>33.0</td>
      <td>none</td>
      <td>masculine</td>
      <td>Naboo</td>
      <td>Droid</td>
      <td>The Empire Strikes Back, Attack of the Clones,...</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Darth Vader</td>
      <td>202.0</td>
      <td>136.0</td>
      <td>none</td>
      <td>white</td>
      <td>yellow</td>
      <td>41.9</td>
      <td>male</td>
      <td>masculine</td>
      <td>Tatooine</td>
      <td>Human</td>
      <td>The Empire Strikes Back, Revenge of the Sith, ...</td>
      <td>NaN</td>
      <td>TIE Advanced x1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Leia Organa</td>
      <td>150.0</td>
      <td>49.0</td>
      <td>brown</td>
      <td>light</td>
      <td>brown</td>
      <td>19.0</td>
      <td>female</td>
      <td>feminine</td>
      <td>Alderaan</td>
      <td>Human</td>
      <td>The Empire Strikes Back, Revenge of the Sith, ...</td>
      <td>Imperial Speeder Bike</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># dplyr : </span>
<span class="c1"># starwars %&gt;% </span>
<span class="c1">#   summarise(across(where(is.character), n_distinct))</span>
<span class="p">(</span><span class="n">starwars</span>
<span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">)</span>
<span class="o">.</span><span class="n">nunique</span><span class="p">(</span><span class="n">dropna</span><span class="o">=</span><span class="kc">False</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>name          87
hair_color    13
skin_color    31
eye_color     15
sex            5
gender         3
homeworld     49
species       38
films         24
vehicles      11
starships     17
dtype: int64</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># dplyr :</span>
<span class="c1"># starwars %&gt;% </span>
<span class="c1">#   group_by(species) %&gt;% </span>
<span class="c1">#   filter(n() &gt; 1) %&gt;% </span>
<span class="c1">#   summarise(across(c(sex, gender, homeworld), n_distinct))</span>
<span class="p">(</span><span class="n">starwars</span>
<span class="o">.</span><span class="n">filter</span><span class="p">([</span><span class="s1">&#39;species&#39;</span><span class="p">,</span> <span class="s1">&#39;sex&#39;</span><span class="p">,</span> <span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;homeworld&#39;</span><span class="p">])</span>
<span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;species&#39;</span><span class="p">)</span>
<span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="k">lambda</span> <span class="n">df</span><span class="p">:</span> <span class="n">df</span><span class="o">.</span><span class="n">nunique</span><span class="p">(</span><span class="n">dropna</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">size</span><span class="p">()</span><span class="o">.</span><span class="n">gt</span><span class="p">(</span><span class="mi">1</span><span class="p">)])</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sex</th>
      <th>gender</th>
      <th>homeworld</th>
    </tr>
    <tr>
      <th>species</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Droid</th>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>Gungan</th>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Human</th>
      <td>2</td>
      <td>2</td>
      <td>16</td>
    </tr>
    <tr>
      <th>Kaminoan</th>
      <td>2</td>
      <td>2</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Mirialan</th>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Twi'lek</th>
      <td>2</td>
      <td>2</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Wookiee</th>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Zabrak</th>
      <td>1</td>
      <td>1</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The <a href="https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.GroupBy.pipe.html">pipe</a> function comes in handy here, and allows reuse of the grouped object multiple times</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># dplyr : </span>
<span class="c1"># starwars %&gt;% </span>
<span class="c1">#   group_by(homeworld) %&gt;% </span>
<span class="c1">#   filter(n() &gt; 1) %&gt;% </span>
<span class="c1">#   summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))</span>
<span class="p">(</span><span class="n">starwars</span>
<span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;homeworld&#39;</span><span class="p">)</span>
<span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span>
<span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;homeworld&#39;</span><span class="p">)</span>
<span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="k">lambda</span> <span class="n">df</span><span class="p">:</span> <span class="n">df</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">size</span><span class="p">()</span><span class="o">.</span><span class="n">gt</span><span class="p">(</span><span class="mi">1</span><span class="p">)])</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>height</th>
      <th>mass</th>
      <th>birth_year</th>
    </tr>
    <tr>
      <th>homeworld</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Alderaan</th>
      <td>176.333333</td>
      <td>64.000000</td>
      <td>43.000000</td>
    </tr>
    <tr>
      <th>Corellia</th>
      <td>175.000000</td>
      <td>78.500000</td>
      <td>25.000000</td>
    </tr>
    <tr>
      <th>Coruscant</th>
      <td>173.666667</td>
      <td>50.000000</td>
      <td>91.000000</td>
    </tr>
    <tr>
      <th>Kamino</th>
      <td>208.333333</td>
      <td>83.100000</td>
      <td>31.500000</td>
    </tr>
    <tr>
      <th>Kashyyyk</th>
      <td>231.000000</td>
      <td>124.000000</td>
      <td>200.000000</td>
    </tr>
    <tr>
      <th>Mirial</th>
      <td>168.000000</td>
      <td>53.100000</td>
      <td>49.000000</td>
    </tr>
    <tr>
      <th>Naboo</th>
      <td>175.454545</td>
      <td>64.166667</td>
      <td>55.000000</td>
    </tr>
    <tr>
      <th>Ryloth</th>
      <td>179.000000</td>
      <td>55.000000</td>
      <td>48.000000</td>
    </tr>
    <tr>
      <th>Tatooine</th>
      <td>169.800000</td>
      <td>85.375000</td>
      <td>54.644444</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># dplyr:</span>
<span class="c1"># starwars %&gt;% distinct(across(contains(&quot;color&quot;)))</span>
<span class="n">starwars</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">like</span><span class="o">=</span><span class="s1">&#39;color&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>hair_color</th>
      <th>skin_color</th>
      <th>eye_color</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>blond</td>
      <td>fair</td>
      <td>blue</td>
    </tr>
    <tr>
      <th>1</th>
      <td>NaN</td>
      <td>gold</td>
      <td>yellow</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NaN</td>
      <td>white, blue</td>
      <td>red</td>
    </tr>
    <tr>
      <th>3</th>
      <td>none</td>
      <td>white</td>
      <td>yellow</td>
    </tr>
    <tr>
      <th>4</th>
      <td>brown</td>
      <td>light</td>
      <td>brown</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>79</th>
      <td>none</td>
      <td>pale</td>
      <td>white</td>
    </tr>
    <tr>
      <th>81</th>
      <td>black</td>
      <td>dark</td>
      <td>dark</td>
    </tr>
    <tr>
      <th>82</th>
      <td>brown</td>
      <td>light</td>
      <td>hazel</td>
    </tr>
    <tr>
      <th>84</th>
      <td>none</td>
      <td>none</td>
      <td>black</td>
    </tr>
    <tr>
      <th>85</th>
      <td>unknown</td>
      <td>unknown</td>
      <td>unknown</td>
    </tr>
  </tbody>
</table>
<p>67 rows × 3 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># dplyr</span>
<span class="c1"># starwars %&gt;% count(across(contains(&quot;color&quot;)), sort = TRUE)</span>
<span class="n">starwars</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">like</span><span class="o">=</span><span class="s1">&#39;color&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">dropna</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>hair_color    skin_color  eye_color
brown         light       brown        6
              fair        blue         4
none          grey        black        4
black         dark        brown        3
blond         fair        blue         3
                                      ..
none          dark        brown        1
              green       black        1
auburn, grey  fair        blue         1
none          green       red          1
NaN           white, red  red          1
Length: 67, dtype: int64</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># starwars %&gt;% </span>
<span class="c1">#   filter(if_any(everything(), ~ !is.na(.x)))</span>
<span class="n">starwars</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">starwars</span><span class="o">.</span><span class="n">notna</span><span class="p">()</span><span class="o">.</span><span class="n">any</span><span class="p">(</span><span class="mi">1</span><span class="p">)]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>name</th>
      <th>height</th>
      <th>mass</th>
      <th>hair_color</th>
      <th>skin_color</th>
      <th>eye_color</th>
      <th>birth_year</th>
      <th>sex</th>
      <th>gender</th>
      <th>homeworld</th>
      <th>species</th>
      <th>films</th>
      <th>vehicles</th>
      <th>starships</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Luke Skywalker</td>
      <td>172.0</td>
      <td>77.0</td>
      <td>blond</td>
      <td>fair</td>
      <td>blue</td>
      <td>19.0</td>
      <td>male</td>
      <td>masculine</td>
      <td>Tatooine</td>
      <td>Human</td>
      <td>The Empire Strikes Back, Revenge of the Sith, ...</td>
      <td>Snowspeeder, Imperial Speeder Bike</td>
      <td>X-wing, Imperial shuttle</td>
    </tr>
    <tr>
      <th>1</th>
      <td>C-3PO</td>
      <td>167.0</td>
      <td>75.0</td>
      <td>NaN</td>
      <td>gold</td>
      <td>yellow</td>
      <td>112.0</td>
      <td>none</td>
      <td>masculine</td>
      <td>Tatooine</td>
      <td>Droid</td>
      <td>The Empire Strikes Back, Attack of the Clones,...</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>R2-D2</td>
      <td>96.0</td>
      <td>32.0</td>
      <td>NaN</td>
      <td>white, blue</td>
      <td>red</td>
      <td>33.0</td>
      <td>none</td>
      <td>masculine</td>
      <td>Naboo</td>
      <td>Droid</td>
      <td>The Empire Strikes Back, Attack of the Clones,...</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Darth Vader</td>
      <td>202.0</td>
      <td>136.0</td>
      <td>none</td>
      <td>white</td>
      <td>yellow</td>
      <td>41.9</td>
      <td>male</td>
      <td>masculine</td>
      <td>Tatooine</td>
      <td>Human</td>
      <td>The Empire Strikes Back, Revenge of the Sith, ...</td>
      <td>NaN</td>
      <td>TIE Advanced x1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Leia Organa</td>
      <td>150.0</td>
      <td>49.0</td>
      <td>brown</td>
      <td>light</td>
      <td>brown</td>
      <td>19.0</td>
      <td>female</td>
      <td>feminine</td>
      <td>Alderaan</td>
      <td>Human</td>
      <td>The Empire Strikes Back, Revenge of the Sith, ...</td>
      <td>Imperial Speeder Bike</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>82</th>
      <td>Rey</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>brown</td>
      <td>light</td>
      <td>hazel</td>
      <td>NaN</td>
      <td>female</td>
      <td>feminine</td>
      <td>NaN</td>
      <td>Human</td>
      <td>The Force Awakens</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>83</th>
      <td>Poe Dameron</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>brown</td>
      <td>light</td>
      <td>brown</td>
      <td>NaN</td>
      <td>male</td>
      <td>masculine</td>
      <td>NaN</td>
      <td>Human</td>
      <td>The Force Awakens</td>
      <td>NaN</td>
      <td>T-70 X-wing fighter</td>
    </tr>
    <tr>
      <th>84</th>
      <td>BB8</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>none</td>
      <td>none</td>
      <td>black</td>
      <td>NaN</td>
      <td>none</td>
      <td>masculine</td>
      <td>NaN</td>
      <td>Droid</td>
      <td>The Force Awakens</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>85</th>
      <td>Captain Phasma</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>unknown</td>
      <td>unknown</td>
      <td>unknown</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>The Force Awakens</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>86</th>
      <td>Padmé Amidala</td>
      <td>165.0</td>
      <td>45.0</td>
      <td>brown</td>
      <td>light</td>
      <td>brown</td>
      <td>46.0</td>
      <td>female</td>
      <td>feminine</td>
      <td>Naboo</td>
      <td>Human</td>
      <td>Attack of the Clones, The Phantom Menace, Reve...</td>
      <td>NaN</td>
      <td>H-type Nubian yacht, Naboo star skiff, Naboo f...</td>
    </tr>
  </tbody>
</table>
<p>87 rows × 14 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># starwars %&gt;% </span>
<span class="c1">#   filter(if_any(everything(), ~ !is.na(.x)))</span>
<span class="n">starwars</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">starwars</span><span class="o">.</span><span class="n">notna</span><span class="p">()</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="mi">1</span><span class="p">)]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>name</th>
      <th>height</th>
      <th>mass</th>
      <th>hair_color</th>
      <th>skin_color</th>
      <th>eye_color</th>
      <th>birth_year</th>
      <th>sex</th>
      <th>gender</th>
      <th>homeworld</th>
      <th>species</th>
      <th>films</th>
      <th>vehicles</th>
      <th>starships</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Luke Skywalker</td>
      <td>172.0</td>
      <td>77.0</td>
      <td>blond</td>
      <td>fair</td>
      <td>blue</td>
      <td>19.0</td>
      <td>male</td>
      <td>masculine</td>
      <td>Tatooine</td>
      <td>Human</td>
      <td>The Empire Strikes Back, Revenge of the Sith, ...</td>
      <td>Snowspeeder, Imperial Speeder Bike</td>
      <td>X-wing, Imperial shuttle</td>
    </tr>
    <tr>
      <th>9</th>
      <td>Obi-Wan Kenobi</td>
      <td>182.0</td>
      <td>77.0</td>
      <td>auburn, white</td>
      <td>fair</td>
      <td>blue-gray</td>
      <td>57.0</td>
      <td>male</td>
      <td>masculine</td>
      <td>Stewjon</td>
      <td>Human</td>
      <td>The Empire Strikes Back, Attack of the Clones,...</td>
      <td>Tribubble bongo</td>
      <td>Jedi starfighter, Trade Federation cruiser, Na...</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Anakin Skywalker</td>
      <td>188.0</td>
      <td>84.0</td>
      <td>blond</td>
      <td>fair</td>
      <td>blue</td>
      <td>41.9</td>
      <td>male</td>
      <td>masculine</td>
      <td>Tatooine</td>
      <td>Human</td>
      <td>Attack of the Clones, The Phantom Menace, Reve...</td>
      <td>Zephyr-G swoop bike, XJ-6 airspeeder</td>
      <td>Trade Federation cruiser, Jedi Interceptor, Na...</td>
    </tr>
    <tr>
      <th>12</th>
      <td>Chewbacca</td>
      <td>228.0</td>
      <td>112.0</td>
      <td>brown</td>
      <td>unknown</td>
      <td>blue</td>
      <td>200.0</td>
      <td>male</td>
      <td>masculine</td>
      <td>Kashyyyk</td>
      <td>Wookiee</td>
      <td>The Empire Strikes Back, Revenge of the Sith, ...</td>
      <td>AT-ST</td>
      <td>Millennium Falcon, Imperial shuttle</td>
    </tr>
    <tr>
      <th>16</th>
      <td>Wedge Antilles</td>
      <td>170.0</td>
      <td>77.0</td>
      <td>brown</td>
      <td>fair</td>
      <td>hazel</td>
      <td>21.0</td>
      <td>male</td>
      <td>masculine</td>
      <td>Corellia</td>
      <td>Human</td>
      <td>The Empire Strikes Back, Return of the Jedi, A...</td>
      <td>Snowspeeder</td>
      <td>X-wing</td>
    </tr>
    <tr>
      <th>41</th>
      <td>Darth Maul</td>
      <td>175.0</td>
      <td>80.0</td>
      <td>none</td>
      <td>red</td>
      <td>yellow</td>
      <td>54.0</td>
      <td>male</td>
      <td>masculine</td>
      <td>Dathomir</td>
      <td>Zabrak</td>
      <td>The Phantom Menace</td>
      <td>Sith speeder</td>
      <td>Scimitar</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Output for the above is different from the vignette's because Pandas treats none as NaN, and dplyr does not (at least in the vignette)</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's look at another solution, from <a href="https://stackoverflow.com/questions/63200530/python-pandas-equivalent-to-dplyr-1-0-0-summarizeacross">Stack Overflow</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;https://gist.githubusercontent.com/seankross/a412dfbd88b3db70b74b/raw/5f23f993cd87c283ce766e7ac6b329ee7cc2e1d1/mtcars.csv&quot;</span>
<span class="n">cars</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
<span class="n">cars</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>model</th>
      <th>mpg</th>
      <th>cyl</th>
      <th>disp</th>
      <th>hp</th>
      <th>drat</th>
      <th>wt</th>
      <th>qsec</th>
      <th>vs</th>
      <th>am</th>
      <th>gear</th>
      <th>carb</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Mazda RX4</td>
      <td>21.0</td>
      <td>6</td>
      <td>160.0</td>
      <td>110</td>
      <td>3.90</td>
      <td>2.620</td>
      <td>16.46</td>
      <td>0</td>
      <td>1</td>
      <td>4</td>
      <td>4</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Mazda RX4 Wag</td>
      <td>21.0</td>
      <td>6</td>
      <td>160.0</td>
      <td>110</td>
      <td>3.90</td>
      <td>2.875</td>
      <td>17.02</td>
      <td>0</td>
      <td>1</td>
      <td>4</td>
      <td>4</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Datsun 710</td>
      <td>22.8</td>
      <td>4</td>
      <td>108.0</td>
      <td>93</td>
      <td>3.85</td>
      <td>2.320</td>
      <td>18.61</td>
      <td>1</td>
      <td>1</td>
      <td>4</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Hornet 4 Drive</td>
      <td>21.4</td>
      <td>6</td>
      <td>258.0</td>
      <td>110</td>
      <td>3.08</td>
      <td>3.215</td>
      <td>19.44</td>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Hornet Sportabout</td>
      <td>18.7</td>
      <td>8</td>
      <td>360.0</td>
      <td>175</td>
      <td>3.15</td>
      <td>3.440</td>
      <td>17.02</td>
      <td>0</td>
      <td>0</td>
      <td>3</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># dplyr:</span>
<span class="c1"># dat &lt;- group_by(mtcars, cyl) </span>
<span class="c1"># summarize(dat, across(ends_with(&#39;p&#39;), sum), across(ends_with(&#39;t&#39;), mean))</span>
<span class="n">trim</span> <span class="o">=</span> <span class="n">cars</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;cyl&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">regex</span> <span class="o">=</span> <span class="s2">&quot;.+(p|t)$&quot;</span><span class="p">)</span>
<span class="n">dat</span> <span class="o">=</span> <span class="n">trim</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;cyl&#39;</span><span class="p">)</span>
<span class="n">dat</span> <span class="o">=</span> <span class="p">{</span><span class="n">key</span> <span class="p">:</span> <span class="n">dat</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span> 
       <span class="k">if</span> <span class="n">key</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;t&#39;</span><span class="p">)</span> 
       <span class="k">else</span> <span class="n">dat</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span> 
       <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">trim</span><span class="p">}</span>
<span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">dat</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>disp</th>
      <th>hp</th>
      <th>drat</th>
      <th>wt</th>
    </tr>
    <tr>
      <th>cyl</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4</th>
      <td>1156.5</td>
      <td>909</td>
      <td>4.070909</td>
      <td>2.285727</td>
    </tr>
    <tr>
      <th>6</th>
      <td>1283.2</td>
      <td>856</td>
      <td>3.585714</td>
      <td>3.117143</td>
    </tr>
    <tr>
      <th>8</th>
      <td>4943.4</td>
      <td>2929</td>
      <td>3.229286</td>
      <td>3.999214</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

</div>]]></content><author><name>Samuel Oranyeli</name></author><category term="python" /><category term="Pandas" /><category term="column-wise operations" /><category term="dplyr" /><category term="across" /><summary type="html"><![CDATA[Columnwise operations in Pandas - as simply as possible]]></summary></entry><entry><title type="html">Pivot_longer : Reshape Data in Pandas Efficiently and with Ease from Wide to Long</title><link href="https://samukweku.github.io/data-wrangling-blog/python/pandas/reshape/wide-to-long/pivot_longer/stack/2022/09/08/Pivot_longer-Reshape-Data-in-Pandas-with-Ease-From-Wide-to-Long.html" rel="alternate" type="text/html" title="Pivot_longer : Reshape Data in Pandas Efficiently and with Ease from Wide to Long" /><published>2022-09-08T00:00:00-05:00</published><updated>2022-09-08T00:00:00-05:00</updated><id>https://samukweku.github.io/data-wrangling-blog/python/pandas/reshape/wide-to-long/pivot_longer/stack/2022/09/08/Pivot_longer---Reshape-Data-in-Pandas-with-Ease-From-Wide-to-Long</id><content type="html" xml:base="https://samukweku.github.io/data-wrangling-blog/python/pandas/reshape/wide-to-long/pivot_longer/stack/2022/09/08/Pivot_longer-Reshape-Data-in-Pandas-with-Ease-From-Wide-to-Long.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-09-08-Pivot_longer - Reshape Data in Pandas with Ease From Wide to Long.ipynb
-->

<div class="container" id="notebook-container">
        
    
    
<div class="cell border-box-sizing code_cell rendered">

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Introduction"><strong>Introduction</strong><a class="anchor-link" href="#Introduction"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You've got data in a wide form (lots of columns), and you wish to transform it into a long form (fewer columns, more rows). In pandas, depending on the form of the data, this can be achieved with either <code>pd.stack</code>, <code>pd.melt</code>, <code>pd.wide_to_long</code>, and sometimes require a bit of data massaging before arriving at the final, desired form.</p>
<p>This article suggests a simple, efficient, opinionated way, that resolves most wide to long transformations, within a single function, using the <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.pivot.pivot_longer">pivot_longer</a> function from <a href="https://pyjanitor-devs.github.io/pyjanitor/">pyjanitor</a>.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's look at an example, based on real data - this is a subset of the <a href="https://github.com/tidyverse/tidyr/blob/main/data-raw/who.csv">who</a> data from R:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="nb">print</span><span class="p">(</span><span class="s2">&quot; pandas version :&quot;</span><span class="p">,</span> <span class="n">pd</span><span class="o">.</span><span class="n">__version__</span><span class="p">,</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> 
      <span class="s2">&quot;numpy version :&quot;</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">__version__</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> 
      <span class="s2">&quot;python version :&quot;</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre> pandas version : 1.4.4 
 numpy version : 1.22.4 
 python version : 3.9.12 | packaged by conda-forge | (main, Mar 24 2022, 23:23:20) 
[Clang 12.0.1 ]
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s1">&#39;new_sp_m5564&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="s1">&#39;newrel_f65&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">]})</span>
<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>new_sp_m5564</th>
      <th>newrel_f65</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Looking at the dataframe above, we have multiple variables crammed into the column names. Using the definitions as described <a href="https://tidyr.tidyverse.org/articles/pivot.html#many-variables-in-column-names">here</a>:</p>

<pre><code>    - new_/new prefix indicates these are counts of new cases
    - sp/rel/ep describe how the case was diagnosed
    - m/f gives the gender
    - 5564/65 supplies the age range

</code></pre>
<p>Our goal here is to separate the dataframe into individual columns of  <code>count</code>, <code>diagnosis</code>,<code>gender</code>, <code>age</code>. How do we pull this off, with the current tools in Pandas?</p>
<p><code>pd.wide_to_long</code> is not applicable here, as there is no unique separator. Our best option would be to use a regular expression to pull out the individual columns.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>With <code>pd.stack</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># split the columns using a regex, before stacking:</span>
<span class="n">DF</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span>
<span class="n">regex</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&quot;new_?(.+)_(.)(\d+)&quot;</span>
<span class="n">columns</span> <span class="o">=</span> <span class="n">DF</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="n">regex</span><span class="p">)</span>
<span class="n">new_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;diagnosis&#39;</span><span class="p">,</span> <span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">]</span>
<span class="n">columns</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">MultiIndex</span><span class="o">.</span><span class="n">from_frame</span><span class="p">(</span><span class="n">columns</span><span class="p">,</span> <span class="n">names</span> <span class="o">=</span> <span class="n">new_names</span><span class="p">)</span>
<span class="n">DF</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">columns</span>
<span class="n">DF</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">new_names</span><span class="p">)</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="s1">&#39;count&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>diagnosis</th>
      <th>gender</th>
      <th>age</th>
      <th>count</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>rel</td>
      <td>f</td>
      <td>65</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>sp</td>
      <td>m</td>
      <td>5564</td>
      <td>2.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>With <code>pd.melt</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DF</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">melt</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span>
<span class="n">out</span> <span class="o">=</span> <span class="n">DF</span><span class="o">.</span><span class="n">variable</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="n">regex</span><span class="p">)</span><span class="o">.</span><span class="n">set_axis</span><span class="p">(</span><span class="n">new_names</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">DF</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="s1">&#39;variable&#39;</span><span class="p">),</span> <span class="n">out</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>value</th>
      <th>diagnosis</th>
      <th>gender</th>
      <th>age</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>2</td>
      <td>sp</td>
      <td>m</td>
      <td>5564</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>3</td>
      <td>rel</td>
      <td>f</td>
      <td>65</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Note the extra steps we had to take to get to our final form. However, we know the pattern (a regex that matches the columns and the sub groups in the columns that we wish to extract), so why not take advantage of that? This is where <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.pivot.pivot_longer">pivot_longer</a> from <a href="https://pyjanitor-devs.github.io/pyjanitor/">pyjanitor</a> shines:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># pip install pyjanitor</span>
<span class="c1"># you can also install the dev version</span>
<span class="c1"># to access the latest developments</span>
<span class="c1"># pip install git+https://github.com/pyjanitor-devs/pyjanitor.git</span>
<span class="kn">import</span> <span class="nn">janitor</span>
<span class="n">df</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span> 
    <span class="n">names_to</span> <span class="o">=</span> <span class="n">new_names</span><span class="p">,</span> 
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="n">regex</span>
    <span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>diagnosis</th>
      <th>gender</th>
      <th>age</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>sp</td>
      <td>m</td>
      <td>5564</td>
      <td>2</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>rel</td>
      <td>f</td>
      <td>65</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Straight to the point. If there is a pattern, <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.pivot.pivot_longer">pivot_longer</a> will figure out what to do and deliver the results. It is a simple, efficient, reshaping abstraction.</p>
<p>Note that this post uses the dev version of <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.pivot.pivot_longer">pivot_longer</a>.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Basics"><strong>Basics</strong><a class="anchor-link" href="#Basics"> </a></h2><p>Let's walk through some of the parameters in <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.pivot.pivot_longer">pivot_longer</a>:</p>
<ul>
<li>index : These are the columns that will not be transformed to long form - the values are repeated as necessary.</li>
<li>column_names: These are the columns that will be transformed to long form.</li>
<li>names_to : These will be the new column names of the reshaped DataFrame.</li>
<li>values_to: These will contain the values collated from the original DataFrame.</li>
<li>names_sep: extract individual columns with a separator.</li>
<li>names_pattern: extract individual columns with a regular expression, or a list of regular expressions.</li>
<li>names_transform: efficiently convert the columns aggregated from the <code>column_names</code> from string to another dtype, as long as it is supported by <code>pd.astype</code></li>
</ul>
<p>Keep in mind that <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.pivot.pivot_longer">pivot_longer</a> works on patterns - deciphering what pattern to use is the key to its simplicity.</p>
<p>The rest of the article outlines the various patterns that <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.pivot.pivot_longer">pivot_longer</a> works with.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Pattern-1---Melt-all-Columns"><strong>Pattern 1 - Melt all Columns</strong><a class="anchor-link" href="#Pattern-1---Melt-all-Columns"> </a></h2><p>This is basic and is similar to what you get with <code>pd.melt</code>.</p>
<p>Let's use another realistic dataset - <a href="https://github.com/tidyverse/tidyr/blob/main/data-raw/relig_income.csv">relig_income</a> - the original example is from <a href="https://tidyr.tidyverse.org/articles/pivot.html#pew">here</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;https://raw.githubusercontent.com/tidyverse/tidyr/main/data-raw/relig_income.csv&quot;</span>
<span class="n">religion</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
<span class="n">religion</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>religion</th>
      <th>&lt;$10k</th>
      <th>$10-20k</th>
      <th>$20-30k</th>
      <th>$30-40k</th>
      <th>$40-50k</th>
      <th>$50-75k</th>
      <th>$75-100k</th>
      <th>$100-150k</th>
      <th>&gt;150k</th>
      <th>Don't know/refused</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Agnostic</td>
      <td>27</td>
      <td>34</td>
      <td>60</td>
      <td>81</td>
      <td>76</td>
      <td>137</td>
      <td>122</td>
      <td>109</td>
      <td>84</td>
      <td>96</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Atheist</td>
      <td>12</td>
      <td>27</td>
      <td>37</td>
      <td>52</td>
      <td>35</td>
      <td>70</td>
      <td>73</td>
      <td>59</td>
      <td>74</td>
      <td>76</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Buddhist</td>
      <td>27</td>
      <td>21</td>
      <td>30</td>
      <td>34</td>
      <td>33</td>
      <td>58</td>
      <td>62</td>
      <td>39</td>
      <td>53</td>
      <td>54</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Catholic</td>
      <td>418</td>
      <td>617</td>
      <td>732</td>
      <td>670</td>
      <td>638</td>
      <td>1116</td>
      <td>949</td>
      <td>792</td>
      <td>633</td>
      <td>1489</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Don’t know/refused</td>
      <td>15</td>
      <td>14</td>
      <td>15</td>
      <td>11</td>
      <td>10</td>
      <td>35</td>
      <td>21</td>
      <td>17</td>
      <td>18</td>
      <td>116</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">religion</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
          <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;religion&#39;</span><span class="p">,</span> 
          <span class="n">names_to</span> <span class="o">=</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> 
          <span class="n">values_to</span> <span class="o">=</span> <span class="s1">&#39;count&#39;</span>
          <span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>religion</th>
      <th>income</th>
      <th>count</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Agnostic</td>
      <td>&lt;$10k</td>
      <td>27</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Atheist</td>
      <td>&lt;$10k</td>
      <td>12</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Buddhist</td>
      <td>&lt;$10k</td>
      <td>27</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Catholic</td>
      <td>&lt;$10k</td>
      <td>418</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Don’t know/refused</td>
      <td>&lt;$10k</td>
      <td>15</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>175</th>
      <td>Orthodox</td>
      <td>Don't know/refused</td>
      <td>73</td>
    </tr>
    <tr>
      <th>176</th>
      <td>Other Christian</td>
      <td>Don't know/refused</td>
      <td>18</td>
    </tr>
    <tr>
      <th>177</th>
      <td>Other Faiths</td>
      <td>Don't know/refused</td>
      <td>71</td>
    </tr>
    <tr>
      <th>178</th>
      <td>Other World Religions</td>
      <td>Don't know/refused</td>
      <td>8</td>
    </tr>
    <tr>
      <th>179</th>
      <td>Unaffiliated</td>
      <td>Don't know/refused</td>
      <td>597</td>
    </tr>
  </tbody>
</table>
<p>180 rows × 3 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>If there are a lot of columns, we can dynamically select the <code>index</code>, or <code>column_names</code>, using the <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.select_columns.select_columns">janitor.select_columns</a> syntax. Let's apply it to another <a href="">dataset</a> related to billboard charts - original example is <a href="https://tidyr.tidyverse.org/articles/pivot.html#billboard">here</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;https://raw.githubusercontent.com/tidyverse/tidyr/main/data-raw/billboard.csv&#39;</span>
<span class="n">billboard</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
<span class="n">billboard</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>artist</th>
      <th>track</th>
      <th>time</th>
      <th>date.entered</th>
      <th>wk1</th>
      <th>wk2</th>
      <th>wk3</th>
      <th>wk4</th>
      <th>wk5</th>
      <th>...</th>
      <th>wk67</th>
      <th>wk68</th>
      <th>wk69</th>
      <th>wk70</th>
      <th>wk71</th>
      <th>wk72</th>
      <th>wk73</th>
      <th>wk74</th>
      <th>wk75</th>
      <th>wk76</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2000</td>
      <td>2 Pac</td>
      <td>Baby Don't Cry (Keep...</td>
      <td>4:22</td>
      <td>2000-02-26</td>
      <td>87</td>
      <td>82.0</td>
      <td>72.0</td>
      <td>77.0</td>
      <td>87.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2000</td>
      <td>2Ge+her</td>
      <td>The Hardest Part Of ...</td>
      <td>3:15</td>
      <td>2000-09-02</td>
      <td>91</td>
      <td>87.0</td>
      <td>92.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2000</td>
      <td>3 Doors Down</td>
      <td>Kryptonite</td>
      <td>3:53</td>
      <td>2000-04-08</td>
      <td>81</td>
      <td>70.0</td>
      <td>68.0</td>
      <td>67.0</td>
      <td>66.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2000</td>
      <td>3 Doors Down</td>
      <td>Loser</td>
      <td>4:24</td>
      <td>2000-10-21</td>
      <td>76</td>
      <td>76.0</td>
      <td>72.0</td>
      <td>69.0</td>
      <td>67.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2000</td>
      <td>504 Boyz</td>
      <td>Wobble Wobble</td>
      <td>3:35</td>
      <td>2000-04-15</td>
      <td>57</td>
      <td>34.0</td>
      <td>25.0</td>
      <td>17.0</td>
      <td>17.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 81 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The columns that will be flipped to long form are the columns that start with <code>wk</code> - these will be passed to the <code>column_names</code> parameter. That is a lot of columns. Let's see how <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.pivot.pivot_longer">pivot_longer</a> simplifies this:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">billboard</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span><span class="n">column_names</span> <span class="o">=</span> <span class="s1">&#39;wk*&#39;</span><span class="p">,</span> <span class="n">names_to</span> <span class="o">=</span> <span class="s1">&#39;week&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>artist</th>
      <th>track</th>
      <th>time</th>
      <th>date.entered</th>
      <th>week</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2000</td>
      <td>2 Pac</td>
      <td>Baby Don't Cry (Keep...</td>
      <td>4:22</td>
      <td>2000-02-26</td>
      <td>wk1</td>
      <td>87.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2000</td>
      <td>2Ge+her</td>
      <td>The Hardest Part Of ...</td>
      <td>3:15</td>
      <td>2000-09-02</td>
      <td>wk1</td>
      <td>91.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2000</td>
      <td>3 Doors Down</td>
      <td>Kryptonite</td>
      <td>3:53</td>
      <td>2000-04-08</td>
      <td>wk1</td>
      <td>81.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2000</td>
      <td>3 Doors Down</td>
      <td>Loser</td>
      <td>4:24</td>
      <td>2000-10-21</td>
      <td>wk1</td>
      <td>76.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2000</td>
      <td>504 Boyz</td>
      <td>Wobble Wobble</td>
      <td>3:35</td>
      <td>2000-04-15</td>
      <td>wk1</td>
      <td>57.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>24087</th>
      <td>2000</td>
      <td>Yankee Grey</td>
      <td>Another Nine Minutes</td>
      <td>3:10</td>
      <td>2000-04-29</td>
      <td>wk76</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>24088</th>
      <td>2000</td>
      <td>Yearwood, Trisha</td>
      <td>Real Live Woman</td>
      <td>3:55</td>
      <td>2000-04-01</td>
      <td>wk76</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>24089</th>
      <td>2000</td>
      <td>Ying Yang Twins</td>
      <td>Whistle While You Tw...</td>
      <td>4:19</td>
      <td>2000-03-18</td>
      <td>wk76</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>24090</th>
      <td>2000</td>
      <td>Zombie Nation</td>
      <td>Kernkraft 400</td>
      <td>3:30</td>
      <td>2000-09-02</td>
      <td>wk76</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>24091</th>
      <td>2000</td>
      <td>matchbox twenty</td>
      <td>Bent</td>
      <td>4:12</td>
      <td>2000-04-29</td>
      <td>wk76</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>24092 rows × 7 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>If we want to use the <code>index</code> parameter instead, that's easy as well:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">billboard</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span><span class="n">index</span> <span class="o">=</span> <span class="nb">slice</span><span class="p">(</span><span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="s1">&#39;date.entered&#39;</span><span class="p">),</span> <span class="n">names_to</span> <span class="o">=</span> <span class="s1">&#39;week&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>artist</th>
      <th>track</th>
      <th>time</th>
      <th>date.entered</th>
      <th>week</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2000</td>
      <td>2 Pac</td>
      <td>Baby Don't Cry (Keep...</td>
      <td>4:22</td>
      <td>2000-02-26</td>
      <td>wk1</td>
      <td>87.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2000</td>
      <td>2Ge+her</td>
      <td>The Hardest Part Of ...</td>
      <td>3:15</td>
      <td>2000-09-02</td>
      <td>wk1</td>
      <td>91.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2000</td>
      <td>3 Doors Down</td>
      <td>Kryptonite</td>
      <td>3:53</td>
      <td>2000-04-08</td>
      <td>wk1</td>
      <td>81.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2000</td>
      <td>3 Doors Down</td>
      <td>Loser</td>
      <td>4:24</td>
      <td>2000-10-21</td>
      <td>wk1</td>
      <td>76.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2000</td>
      <td>504 Boyz</td>
      <td>Wobble Wobble</td>
      <td>3:35</td>
      <td>2000-04-15</td>
      <td>wk1</td>
      <td>57.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>24087</th>
      <td>2000</td>
      <td>Yankee Grey</td>
      <td>Another Nine Minutes</td>
      <td>3:10</td>
      <td>2000-04-29</td>
      <td>wk76</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>24088</th>
      <td>2000</td>
      <td>Yearwood, Trisha</td>
      <td>Real Live Woman</td>
      <td>3:55</td>
      <td>2000-04-01</td>
      <td>wk76</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>24089</th>
      <td>2000</td>
      <td>Ying Yang Twins</td>
      <td>Whistle While You Tw...</td>
      <td>4:19</td>
      <td>2000-03-18</td>
      <td>wk76</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>24090</th>
      <td>2000</td>
      <td>Zombie Nation</td>
      <td>Kernkraft 400</td>
      <td>3:30</td>
      <td>2000-09-02</td>
      <td>wk76</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>24091</th>
      <td>2000</td>
      <td>matchbox twenty</td>
      <td>Bent</td>
      <td>4:12</td>
      <td>2000-04-29</td>
      <td>wk76</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>24092 rows × 7 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Pattern-2A---Melt-into-multiple-columns---new-column-names"><strong>Pattern 2A - Melt into multiple columns - new column names</strong><a class="anchor-link" href="#Pattern-2A---Melt-into-multiple-columns---new-column-names"> </a></h2><p>There are scenarios where multiple variables are crammed into the column names - we had a look at that already with the <code>who</code> <a href="##-Introduction-">example</a>.</p>
<p>Let's look at an example, adapted from <a href="https://rdatatable.gitlab.io/data.table/articles/datatable-reshape.html#a-enhanced-melt">data.table vignette</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">iris</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span><span class="s1">&#39;Sepal.Length&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">5.1</span><span class="p">,</span> <span class="mf">5.9</span><span class="p">],</span>
     <span class="s1">&#39;Sepal.Width&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">3.5</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span>
     <span class="s1">&#39;Petal.Length&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.4</span><span class="p">,</span> <span class="mf">5.1</span><span class="p">],</span>
     <span class="s1">&#39;Petal.Width&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.2</span><span class="p">,</span> <span class="mf">1.8</span><span class="p">],</span>
     <span class="s1">&#39;Species&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;setosa&#39;</span><span class="p">,</span> <span class="s1">&#39;virginica&#39;</span><span class="p">]}</span>
    <span class="p">)</span>

<span class="n">iris</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Sepal.Length</th>
      <th>Sepal.Width</th>
      <th>Petal.Length</th>
      <th>Petal.Width</th>
      <th>Species</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>5.1</td>
      <td>3.5</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>1</th>
      <td>5.9</td>
      <td>3.0</td>
      <td>5.1</td>
      <td>1.8</td>
      <td>virginica</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For the data above, we wish to consolidate the columns into <code>part</code> and <code>dimensions</code> - the <code>Sepal/Petal</code> prefixes go into the <code>part</code> column, while <code>Width/Length</code> go into the <code>dimension</code> column.</p>
<p>In this case, we can use either the <code>names_sep</code> or the <code>names_pattern</code> parameter - for this particular scenario, the <code>names_sep</code> option is a better fit:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">iris</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
        <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;Species&#39;</span><span class="p">,</span>
        <span class="n">names_to</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;part&#39;</span><span class="p">,</span> <span class="s1">&#39;dimension&#39;</span><span class="p">],</span>
        <span class="n">names_sep</span> <span class="o">=</span> <span class="s1">&#39;.&#39;</span>
        <span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Species</th>
      <th>part</th>
      <th>dimension</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>setosa</td>
      <td>Sepal</td>
      <td>Length</td>
      <td>5.1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>virginica</td>
      <td>Sepal</td>
      <td>Length</td>
      <td>5.9</td>
    </tr>
    <tr>
      <th>2</th>
      <td>setosa</td>
      <td>Sepal</td>
      <td>Width</td>
      <td>3.5</td>
    </tr>
    <tr>
      <th>3</th>
      <td>virginica</td>
      <td>Sepal</td>
      <td>Width</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>setosa</td>
      <td>Petal</td>
      <td>Length</td>
      <td>1.4</td>
    </tr>
    <tr>
      <th>5</th>
      <td>virginica</td>
      <td>Petal</td>
      <td>Length</td>
      <td>5.1</td>
    </tr>
    <tr>
      <th>6</th>
      <td>setosa</td>
      <td>Petal</td>
      <td>Width</td>
      <td>0.2</td>
    </tr>
    <tr>
      <th>7</th>
      <td>virginica</td>
      <td>Petal</td>
      <td>Width</td>
      <td>1.8</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Using names_pattern:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">iris</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
        <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;Species&#39;</span><span class="p">,</span>
        <span class="n">names_to</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;part&#39;</span><span class="p">,</span> <span class="s1">&#39;dimension&#39;</span><span class="p">],</span>
        <span class="n">names_pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="s1">&#39;(.+)\.(.+)&#39;</span>
        <span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Species</th>
      <th>part</th>
      <th>dimension</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>setosa</td>
      <td>Sepal</td>
      <td>Length</td>
      <td>5.1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>virginica</td>
      <td>Sepal</td>
      <td>Length</td>
      <td>5.9</td>
    </tr>
    <tr>
      <th>2</th>
      <td>setosa</td>
      <td>Sepal</td>
      <td>Width</td>
      <td>3.5</td>
    </tr>
    <tr>
      <th>3</th>
      <td>virginica</td>
      <td>Sepal</td>
      <td>Width</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>setosa</td>
      <td>Petal</td>
      <td>Length</td>
      <td>1.4</td>
    </tr>
    <tr>
      <th>5</th>
      <td>virginica</td>
      <td>Petal</td>
      <td>Length</td>
      <td>5.1</td>
    </tr>
    <tr>
      <th>6</th>
      <td>setosa</td>
      <td>Petal</td>
      <td>Width</td>
      <td>0.2</td>
    </tr>
    <tr>
      <th>7</th>
      <td>virginica</td>
      <td>Petal</td>
      <td>Width</td>
      <td>1.8</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Pattern-2B---Melt-into-multiple-columns---Use-variables-within-the-column-names-as-new-names"><strong>Pattern 2B - Melt into multiple columns - Use variables within the column names as new names</strong><a class="anchor-link" href="#Pattern-2B---Melt-into-multiple-columns---Use-variables-within-the-column-names-as-new-names"> </a></h2><p>Instead of new column names, what if we wanted to use existing variables within the column names?</p>
<p>Let's look at an example adapted from <a href="https://rdatatable.gitlab.io/data.table/articles/datatable-reshape.html#a-melting-data-tables-wide-to-long">data.table vignette</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
        <span class="p">{</span>
            <span class="s2">&quot;family&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
            <span class="s2">&quot;dob_child1&quot;</span><span class="p">:</span> <span class="p">[</span>
                <span class="s2">&quot;1998-11-26&quot;</span><span class="p">,</span>
                <span class="s2">&quot;1996-06-22&quot;</span><span class="p">,</span>
                <span class="s2">&quot;2002-07-11&quot;</span><span class="p">,</span>
                <span class="s2">&quot;2004-10-10&quot;</span><span class="p">,</span>
                <span class="s2">&quot;2000-12-05&quot;</span><span class="p">,</span>
            <span class="p">],</span>
            <span class="s2">&quot;dob_child2&quot;</span><span class="p">:</span> <span class="p">[</span>
                <span class="s2">&quot;2000-01-29&quot;</span><span class="p">,</span>
                <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span>
                <span class="s2">&quot;2004-04-05&quot;</span><span class="p">,</span>
                <span class="s2">&quot;2009-08-27&quot;</span><span class="p">,</span>
                <span class="s2">&quot;2005-02-28&quot;</span><span class="p">,</span>
            <span class="p">],</span>
            <span class="s2">&quot;gender_child1&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
            <span class="s2">&quot;gender_child2&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
        <span class="p">}</span>
    <span class="p">)</span>

<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>family</th>
      <th>dob_child1</th>
      <th>dob_child2</th>
      <th>gender_child1</th>
      <th>gender_child2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1998-11-26</td>
      <td>2000-01-29</td>
      <td>1</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1996-06-22</td>
      <td>NaN</td>
      <td>2</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>2002-07-11</td>
      <td>2004-04-05</td>
      <td>2</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>2004-10-10</td>
      <td>2009-08-27</td>
      <td>1</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>2000-12-05</td>
      <td>2005-02-28</td>
      <td>2</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For the data above, we wish to keep <code>dob</code> and <code>gender</code> as column names, while moving <code>child1</code> and <code>child2</code> to a new column. How does <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.pivot.pivot_longer">pivot_longer</a> reshape this?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;family&#39;</span><span class="p">,</span>
    <span class="n">names_to</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;.value&#39;</span><span class="p">,</span> <span class="s1">&#39;child&#39;</span><span class="p">),</span>
    <span class="n">names_sep</span> <span class="o">=</span> <span class="s1">&#39;_&#39;</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>family</th>
      <th>child</th>
      <th>dob</th>
      <th>gender</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>child1</td>
      <td>1998-11-26</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>child1</td>
      <td>1996-06-22</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>child1</td>
      <td>2002-07-11</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>child1</td>
      <td>2004-10-10</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>child1</td>
      <td>2000-12-05</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>1</td>
      <td>child2</td>
      <td>2000-01-29</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>2</td>
      <td>child2</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>7</th>
      <td>3</td>
      <td>child2</td>
      <td>2004-04-05</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>4</td>
      <td>child2</td>
      <td>2009-08-27</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>5</td>
      <td>child2</td>
      <td>2005-02-28</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For patterns such as this, where a part of the column name is to be retained as header in the new dataframe, the <code>.value</code> placeholder comes in handy. The <code>.value</code> placeholder tells <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.pivot.pivot_longer">pivot_longer</a> - <code>hey, this variable in the column name is to be retained as a header</code>. <a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.pivot.pivot_longer">pivot_longer</a> gets the message and acts accordingly.</p>
<p>Take column label <code>dob_child1</code> - the first part is <code>dob</code> and the second part is <code>child1</code>. This pairs with <code>(.value, child)</code>, meaning <code>dob</code> stays as header, and the rest gets lumped into the <code>child</code> column. The <code>names_sep</code> value - <code>_</code> - determines how the column is split into the new columns.</p>
<p>With <code>names_pattern</code> we can have more control on the output, selecting just the numbers in the <code>child</code> column:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;family&#39;</span><span class="p">,</span>
    <span class="n">names_to</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;.value&#39;</span><span class="p">,</span> <span class="s1">&#39;child&#39;</span><span class="p">),</span>
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&quot;(.+)_child(\d)&quot;</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>family</th>
      <th>child</th>
      <th>dob</th>
      <th>gender</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>1998-11-26</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1996-06-22</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>2002-07-11</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>2004-10-10</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>1</td>
      <td>2000-12-05</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>1</td>
      <td>2</td>
      <td>2000-01-29</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>2</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>7</th>
      <td>3</td>
      <td>2</td>
      <td>2004-04-05</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>4</td>
      <td>2</td>
      <td>2009-08-27</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>5</td>
      <td>2</td>
      <td>2005-02-28</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>We can also efficiently convert the data type of <code>child</code> to integer, using the <code>names_transform</code> option:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;family&#39;</span><span class="p">,</span>
    <span class="n">names_to</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;.value&#39;</span><span class="p">,</span> <span class="s1">&#39;child&#39;</span><span class="p">),</span>
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&quot;(.+)_child(\d)&quot;</span><span class="p">,</span>
    <span class="n">names_transform</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">int8</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>family</th>
      <th>child</th>
      <th>dob</th>
      <th>gender</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>1998-11-26</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1996-06-22</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>2002-07-11</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>2004-10-10</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>1</td>
      <td>2000-12-05</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>1</td>
      <td>2</td>
      <td>2000-01-29</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>2</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>7</th>
      <td>3</td>
      <td>2</td>
      <td>2004-04-05</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>4</td>
      <td>2</td>
      <td>2009-08-27</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>5</td>
      <td>2</td>
      <td>2005-02-28</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The flexibility of <code>.value</code> means you can place it anywhere - you are not limited by position - as long as the right argument is passed to the <code>names_sep</code> or <code>names_pattern</code> parameter, your output should be fine.</p>
<p>Let's apply this to the <code>iris</code> <a href="##-Pattern-2A---Melt-into-multiple-columns---new-column-names-">dataset</a> to test the flexibility of <code>.value</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">iris</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;Species&#39;</span><span class="p">,</span>
    <span class="n">names_to</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;part&#39;</span><span class="p">,</span> <span class="s1">&#39;.value&#39;</span><span class="p">),</span>
    <span class="n">names_sep</span> <span class="o">=</span> <span class="s1">&#39;.&#39;</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Species</th>
      <th>part</th>
      <th>Length</th>
      <th>Width</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>setosa</td>
      <td>Sepal</td>
      <td>5.1</td>
      <td>3.5</td>
    </tr>
    <tr>
      <th>1</th>
      <td>virginica</td>
      <td>Sepal</td>
      <td>5.9</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>setosa</td>
      <td>Petal</td>
      <td>1.4</td>
      <td>0.2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>virginica</td>
      <td>Petal</td>
      <td>5.1</td>
      <td>1.8</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can use multiple <code>.value</code> if required - let's apply this to a question from <a href="https://stackoverflow.com/questions/12466493/reshaping-multiple-sets-of-measurement-columns-wide-format-into-single-columns">Stack Overflow</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="p">{</span>
                    <span class="s2">&quot;ID&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
                    <span class="s2">&quot;DateRange1Start&quot;</span><span class="p">:</span> <span class="s2">&quot;1/1/90&quot;</span><span class="p">,</span>
                    <span class="s2">&quot;DateRange1End&quot;</span><span class="p">:</span> <span class="s2">&quot;3/1/90&quot;</span><span class="p">,</span>
                    <span class="s2">&quot;Value1&quot;</span><span class="p">:</span> <span class="mf">4.4</span><span class="p">,</span>
                    <span class="s2">&quot;DateRange2Start&quot;</span><span class="p">:</span> <span class="s2">&quot;4/5/91&quot;</span><span class="p">,</span>
                    <span class="s2">&quot;DateRange2End&quot;</span><span class="p">:</span> <span class="s2">&quot;6/7/91&quot;</span><span class="p">,</span>
                    <span class="s2">&quot;Value2&quot;</span><span class="p">:</span> <span class="mf">6.2</span><span class="p">,</span>
                    <span class="s2">&quot;DateRange3Start&quot;</span><span class="p">:</span> <span class="s2">&quot;5/5/95&quot;</span><span class="p">,</span>
                    <span class="s2">&quot;DateRange3End&quot;</span><span class="p">:</span> <span class="s2">&quot;6/6/96&quot;</span><span class="p">,</span>
                    <span class="s2">&quot;Value3&quot;</span><span class="p">:</span> <span class="mf">3.3</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">])</span>

<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ID</th>
      <th>DateRange1Start</th>
      <th>DateRange1End</th>
      <th>Value1</th>
      <th>DateRange2Start</th>
      <th>DateRange2End</th>
      <th>Value2</th>
      <th>DateRange3Start</th>
      <th>DateRange3End</th>
      <th>Value3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1/1/90</td>
      <td>3/1/90</td>
      <td>4.4</td>
      <td>4/5/91</td>
      <td>6/7/91</td>
      <td>6.2</td>
      <td>5/5/95</td>
      <td>6/6/96</td>
      <td>3.3</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;ID&#39;</span><span class="p">,</span> 
    <span class="n">names_to</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;.value&#39;</span><span class="p">,</span> <span class="s1">&#39;.value&#39;</span><span class="p">),</span>
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&quot;(.+)\d(.*)&quot;</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ID</th>
      <th>DateRangeStart</th>
      <th>DateRangeEnd</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1/1/90</td>
      <td>3/1/90</td>
      <td>4.4</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>4/5/91</td>
      <td>6/7/91</td>
      <td>6.2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>5/5/95</td>
      <td>6/6/96</td>
      <td>3.3</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Again, as long as the pattern can be identified, <code>pivot_longer</code> will take care of the rest.</p>
<p>One more example, adapted from <a href="https://stackoverflow.com/questions/64107566/how-to-pivot-longer-and-populate-with-fields-from-column-names-at-the-same-tim?noredirect=1#comment113369419_64107566">Stack Overflow</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&quot;Sony | TV | Model | value&quot;</span><span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="s2">&quot;A222&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="s2">&quot;A234&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="s2">&quot;A4345&quot;</span><span class="p">},</span>
        <span class="s2">&quot;Sony | TV | Quantity | value&quot;</span><span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
        <span class="s2">&quot;Sony | TV | Max-quant | value&quot;</span><span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">9</span><span class="p">},</span>
        <span class="s2">&quot;Panasonic | TV | Model | value&quot;</span><span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="s2">&quot;T232&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="s2">&quot;S3424&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="s2">&quot;X3421&quot;</span><span class="p">},</span>
        <span class="s2">&quot;Panasonic | TV | Quantity | value&quot;</span><span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
        <span class="s2">&quot;Panasonic | TV | Max-quant | value&quot;</span><span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">11</span><span class="p">},</span>
        <span class="s2">&quot;Sanyo | Radio | Model | value&quot;</span><span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="s2">&quot;S111&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="s2">&quot;S1s1&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="s2">&quot;S1s2&quot;</span><span class="p">},</span>
        <span class="s2">&quot;Sanyo | Radio | Quantity | value&quot;</span><span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
        <span class="s2">&quot;Sanyo | Radio | Max-quant | value&quot;</span><span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">10</span><span class="p">},</span>
    <span class="p">}</span>
<span class="p">)</span>

<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Sony | TV | Model | value</th>
      <th>Sony | TV | Quantity | value</th>
      <th>Sony | TV | Max-quant | value</th>
      <th>Panasonic | TV | Model | value</th>
      <th>Panasonic | TV | Quantity | value</th>
      <th>Panasonic | TV | Max-quant | value</th>
      <th>Sanyo | Radio | Model | value</th>
      <th>Sanyo | Radio | Quantity | value</th>
      <th>Sanyo | Radio | Max-quant | value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>A222</td>
      <td>5</td>
      <td>10</td>
      <td>T232</td>
      <td>1</td>
      <td>10</td>
      <td>S111</td>
      <td>4</td>
      <td>9</td>
    </tr>
    <tr>
      <th>1</th>
      <td>A234</td>
      <td>5</td>
      <td>9</td>
      <td>S3424</td>
      <td>5</td>
      <td>12</td>
      <td>S1s1</td>
      <td>2</td>
      <td>9</td>
    </tr>
    <tr>
      <th>2</th>
      <td>A4345</td>
      <td>4</td>
      <td>9</td>
      <td>X3421</td>
      <td>1</td>
      <td>11</td>
      <td>S1s2</td>
      <td>4</td>
      <td>10</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">names_to</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;Manufacturer&quot;</span><span class="p">,</span> <span class="s2">&quot;Device&quot;</span><span class="p">,</span> <span class="s2">&quot;.value&quot;</span><span class="p">),</span>
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&quot;(.+)\|(.+)\|(.+)\|.*&quot;</span><span class="p">,</span>
    <span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Manufacturer</th>
      <th>Device</th>
      <th>Model</th>
      <th>Quantity</th>
      <th>Max-quant</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Sony</td>
      <td>TV</td>
      <td>A222</td>
      <td>5</td>
      <td>10</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Sony</td>
      <td>TV</td>
      <td>A234</td>
      <td>5</td>
      <td>9</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Sony</td>
      <td>TV</td>
      <td>A4345</td>
      <td>4</td>
      <td>9</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Panasonic</td>
      <td>TV</td>
      <td>T232</td>
      <td>1</td>
      <td>10</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Panasonic</td>
      <td>TV</td>
      <td>S3424</td>
      <td>5</td>
      <td>12</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Panasonic</td>
      <td>TV</td>
      <td>X3421</td>
      <td>1</td>
      <td>11</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Sanyo</td>
      <td>Radio</td>
      <td>S111</td>
      <td>4</td>
      <td>9</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Sanyo</td>
      <td>Radio</td>
      <td>S1s1</td>
      <td>2</td>
      <td>9</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Sanyo</td>
      <td>Radio</td>
      <td>S1s2</td>
      <td>4</td>
      <td>10</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Pattern-3A---Group-similar-columns-together"><strong>Pattern 3A - Group similar columns together</strong><a class="anchor-link" href="#Pattern-3A---Group-similar-columns-together"> </a></h2><p>This is best explained with an example:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df_mean</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;x_1_mean&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">],</span>
                   <span class="s1">&#39;x_2_mean&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">20</span><span class="p">],</span>
                   <span class="s1">&#39;y_1_mean&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">30</span><span class="p">],</span>
                   <span class="s1">&#39;y_2_mean&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">40</span><span class="p">],</span>
                   <span class="s1">&#39;unit&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">50</span><span class="p">]})</span>

<span class="n">df_mean</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>x_1_mean</th>
      <th>x_2_mean</th>
      <th>y_1_mean</th>
      <th>y_2_mean</th>
      <th>unit</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>10</td>
      <td>20</td>
      <td>30</td>
      <td>40</td>
      <td>50</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For the dataframe above, we wish to lump similar columns together - specifically, we want to lump the <code>x*</code> columns into one, same goes for the <code>y*</code> columns.</p>
<p>For this pattern, we pass a list of names to <code>names_to</code>, while passing a list of regular expressions to <code>names_pattern</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df_mean</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;unit&#39;</span><span class="p">,</span> 
    <span class="n">names_to</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;x_mean&#39;</span><span class="p">,</span> <span class="s1">&#39;y_mean&#39;</span><span class="p">],</span>
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">]</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>unit</th>
      <th>x_mean</th>
      <th>y_mean</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>50</td>
      <td>10</td>
      <td>30</td>
    </tr>
    <tr>
      <th>1</th>
      <td>50</td>
      <td>20</td>
      <td>40</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Using a list of regular expressions for <code>names_pattern</code> implies that you want to group similar items under specified columns in <code>names_to</code>.</p>
<p>Basically, it is a pairing. the first <code>x_1_mean</code> pairs with the first <code>y*</code> mean which it encounters, which is <code>y_1_mean</code>, same goes for the next <code>x*</code>, which is <code>x_2_mean</code>, it pairs with <code>y_2_mean</code>, since that is the next available <code>y*</code>. The pairing is on a first come first serve basis.</p>
<p>Let's look at another <a href="https://github.com/PacktPublishing/Pandas-Cookbook/blob/master/data/movie_altered.csv">example</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook/master/data/movie_altered.csv&quot;</span>
<span class="n">movies</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
<span class="n">movies</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>title</th>
      <th>rating</th>
      <th>year</th>
      <th>duration</th>
      <th>director_1</th>
      <th>director_fb_likes_1</th>
      <th>actor_1</th>
      <th>actor_2</th>
      <th>actor_3</th>
      <th>actor_fb_likes_1</th>
      <th>actor_fb_likes_2</th>
      <th>actor_fb_likes_3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Avatar</td>
      <td>PG-13</td>
      <td>2009.0</td>
      <td>178.0</td>
      <td>James Cameron</td>
      <td>0.0</td>
      <td>CCH Pounder</td>
      <td>Joel David Moore</td>
      <td>Wes Studi</td>
      <td>1000.0</td>
      <td>936.0</td>
      <td>855.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Pirates of the Caribbean: At World's End</td>
      <td>PG-13</td>
      <td>2007.0</td>
      <td>169.0</td>
      <td>Gore Verbinski</td>
      <td>563.0</td>
      <td>Johnny Depp</td>
      <td>Orlando Bloom</td>
      <td>Jack Davenport</td>
      <td>40000.0</td>
      <td>5000.0</td>
      <td>1000.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Spectre</td>
      <td>PG-13</td>
      <td>2015.0</td>
      <td>148.0</td>
      <td>Sam Mendes</td>
      <td>0.0</td>
      <td>Christoph Waltz</td>
      <td>Rory Kinnear</td>
      <td>Stephanie Sigman</td>
      <td>11000.0</td>
      <td>393.0</td>
      <td>161.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>The Dark Knight Rises</td>
      <td>PG-13</td>
      <td>2012.0</td>
      <td>164.0</td>
      <td>Christopher Nolan</td>
      <td>22000.0</td>
      <td>Tom Hardy</td>
      <td>Christian Bale</td>
      <td>Joseph Gordon-Levitt</td>
      <td>27000.0</td>
      <td>23000.0</td>
      <td>23000.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Star Wars: Episode VII - The Force Awakens</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Doug Walker</td>
      <td>131.0</td>
      <td>Doug Walker</td>
      <td>Rob Walker</td>
      <td>NaN</td>
      <td>131.0</td>
      <td>12.0</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The goal for the dataframe above is to group the actors into another column, and the facebook likes into a separate column. The pattern here is obvious - we are grouping similar columns, so we pass a list of regular expressions to <code>names_pattern</code>, with an equal number of names to <code>names_to</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">movies</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="nb">slice</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;duration&#39;</span><span class="p">),</span>
    <span class="n">names_to</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;director&#39;</span><span class="p">,</span> <span class="s1">&#39;director_fb_likes&#39;</span><span class="p">,</span> <span class="s1">&#39;actor&#39;</span><span class="p">,</span> <span class="s1">&#39;actor_fb_likes&#39;</span><span class="p">],</span>
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;director_\d$&#39;</span><span class="p">,</span> <span class="s1">&#39;director_fb_likes&#39;</span><span class="p">,</span> <span class="s1">&#39;actor_\d$&#39;</span><span class="p">,</span> <span class="s1">&#39;actor.+&#39;</span><span class="p">]</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>title</th>
      <th>rating</th>
      <th>year</th>
      <th>duration</th>
      <th>director</th>
      <th>director_fb_likes</th>
      <th>actor</th>
      <th>actor_fb_likes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Avatar</td>
      <td>PG-13</td>
      <td>2009.0</td>
      <td>178.0</td>
      <td>James Cameron</td>
      <td>0.0</td>
      <td>CCH Pounder</td>
      <td>1000.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Pirates of the Caribbean: At World's End</td>
      <td>PG-13</td>
      <td>2007.0</td>
      <td>169.0</td>
      <td>Gore Verbinski</td>
      <td>563.0</td>
      <td>Johnny Depp</td>
      <td>40000.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Spectre</td>
      <td>PG-13</td>
      <td>2015.0</td>
      <td>148.0</td>
      <td>Sam Mendes</td>
      <td>0.0</td>
      <td>Christoph Waltz</td>
      <td>11000.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>The Dark Knight Rises</td>
      <td>PG-13</td>
      <td>2012.0</td>
      <td>164.0</td>
      <td>Christopher Nolan</td>
      <td>22000.0</td>
      <td>Tom Hardy</td>
      <td>27000.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Star Wars: Episode VII - The Force Awakens</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Doug Walker</td>
      <td>131.0</td>
      <td>Doug Walker</td>
      <td>131.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>14743</th>
      <td>Signed Sealed Delivered</td>
      <td>NaN</td>
      <td>2013.0</td>
      <td>87.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Crystal Lowe</td>
      <td>319.0</td>
    </tr>
    <tr>
      <th>14744</th>
      <td>The Following</td>
      <td>TV-14</td>
      <td>NaN</td>
      <td>43.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Sam Underwood</td>
      <td>319.0</td>
    </tr>
    <tr>
      <th>14745</th>
      <td>A Plague So Pleasant</td>
      <td>NaN</td>
      <td>2013.0</td>
      <td>76.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>David Chandler</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>14746</th>
      <td>Shanghai Calling</td>
      <td>PG-13</td>
      <td>2012.0</td>
      <td>100.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Eliza Coupe</td>
      <td>490.0</td>
    </tr>
    <tr>
      <th>14747</th>
      <td>My Date with Drew</td>
      <td>PG</td>
      <td>2004.0</td>
      <td>90.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Jon Gunn</td>
      <td>16.0</td>
    </tr>
  </tbody>
</table>
<p>14748 rows × 8 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Based on the same first come first serve approach, <code>director_1</code> is paired with <code>director_fb_likes_1</code>, <code>actor_1</code> is paired with <code>actor_fb_likes_1</code>; the pairing continues for the rest.</p>
<p>This could also have been solved using the <code>.value</code> approach:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="p">(</span><span class="n">movies</span>
<span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="nb">slice</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;duration&#39;</span><span class="p">),</span>
    <span class="n">names_to</span> <span class="o">=</span> <span class="s2">&quot;.value&quot;</span><span class="p">,</span>
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&quot;(.+)_\d&quot;</span><span class="p">)</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>title</th>
      <th>rating</th>
      <th>year</th>
      <th>duration</th>
      <th>director</th>
      <th>director_fb_likes</th>
      <th>actor</th>
      <th>actor_fb_likes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Avatar</td>
      <td>PG-13</td>
      <td>2009.0</td>
      <td>178.0</td>
      <td>James Cameron</td>
      <td>0.0</td>
      <td>CCH Pounder</td>
      <td>1000.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Pirates of the Caribbean: At World's End</td>
      <td>PG-13</td>
      <td>2007.0</td>
      <td>169.0</td>
      <td>Gore Verbinski</td>
      <td>563.0</td>
      <td>Johnny Depp</td>
      <td>40000.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Spectre</td>
      <td>PG-13</td>
      <td>2015.0</td>
      <td>148.0</td>
      <td>Sam Mendes</td>
      <td>0.0</td>
      <td>Christoph Waltz</td>
      <td>11000.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>The Dark Knight Rises</td>
      <td>PG-13</td>
      <td>2012.0</td>
      <td>164.0</td>
      <td>Christopher Nolan</td>
      <td>22000.0</td>
      <td>Tom Hardy</td>
      <td>27000.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Star Wars: Episode VII - The Force Awakens</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Doug Walker</td>
      <td>131.0</td>
      <td>Doug Walker</td>
      <td>131.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>14743</th>
      <td>Signed Sealed Delivered</td>
      <td>NaN</td>
      <td>2013.0</td>
      <td>87.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Crystal Lowe</td>
      <td>319.0</td>
    </tr>
    <tr>
      <th>14744</th>
      <td>The Following</td>
      <td>TV-14</td>
      <td>NaN</td>
      <td>43.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Sam Underwood</td>
      <td>319.0</td>
    </tr>
    <tr>
      <th>14745</th>
      <td>A Plague So Pleasant</td>
      <td>NaN</td>
      <td>2013.0</td>
      <td>76.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>David Chandler</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>14746</th>
      <td>Shanghai Calling</td>
      <td>PG-13</td>
      <td>2012.0</td>
      <td>100.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Eliza Coupe</td>
      <td>490.0</td>
    </tr>
    <tr>
      <th>14747</th>
      <td>My Date with Drew</td>
      <td>PG</td>
      <td>2004.0</td>
      <td>90.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Jon Gunn</td>
      <td>16.0</td>
    </tr>
  </tbody>
</table>
<p>14748 rows × 8 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Again, it is all about identifying the pattern, and using whichever option is more suitable/convenient. One more <a href="https://github.com/tidyverse/tidyr/issues/1378#issue-1300743144">example</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">NA</span>
<span class="n">treatments</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
  <span class="nb">id</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">),</span>
  <span class="n">A</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="n">NA</span><span class="p">),</span>
  <span class="n">A_date</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="n">NA</span><span class="p">),</span>
  <span class="n">B</span> <span class="o">=</span> <span class="p">(</span><span class="n">NA</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="n">NA</span><span class="p">),</span>
  <span class="n">B_date</span> <span class="o">=</span> <span class="p">(</span><span class="n">NA</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="n">NA</span><span class="p">),</span>
  <span class="n">other</span> <span class="o">=</span> <span class="p">(</span><span class="n">NA</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="p">,</span> <span class="s2">&quot;D&quot;</span><span class="p">),</span>
  <span class="n">other_date</span> <span class="o">=</span> <span class="p">(</span><span class="n">NA</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="p">)</span>
<span class="n">treatments</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">treatments</span><span class="p">)</span>
<span class="n">treatments</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>A</th>
      <th>A_date</th>
      <th>B</th>
      <th>B_date</th>
      <th>other</th>
      <th>other_date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>A</td>
      <td>1</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
      <td>B</td>
      <td>3</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>A</td>
      <td>2</td>
      <td>B</td>
      <td>2</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
      <td>C</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
      <td>D</td>
      <td>5</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The goal is to transform the dataframe into three columns, an <code>id</code> column, a <code>treatment</code> column, and a <code>date</code> column. Since we are grouping similar columns, we pass a list of regular expressions to <code>names_pattern</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">treatments</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span> 
    <span class="n">names_to</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;treatment&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">],</span>
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;A$|B$|other$&#39;</span><span class="p">,</span> <span class="s1">&#39;.+date$&#39;</span><span class="p">],</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>treatment</th>
      <th>date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>A</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>A</td>
      <td>2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>5</th>
      <td>1</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>6</th>
      <td>2</td>
      <td>B</td>
      <td>3</td>
    </tr>
    <tr>
      <th>7</th>
      <td>3</td>
      <td>B</td>
      <td>2</td>
    </tr>
    <tr>
      <th>8</th>
      <td>4</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>9</th>
      <td>5</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>10</th>
      <td>1</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>11</th>
      <td>2</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>12</th>
      <td>3</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>13</th>
      <td>4</td>
      <td>C</td>
      <td>1</td>
    </tr>
    <tr>
      <th>14</th>
      <td>5</td>
      <td>D</td>
      <td>5</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Another way is to access the dates before the treatments, by reversing the order of the regular expressions:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">treatments</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span> 
    <span class="n">names_to</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;treatment&#39;</span><span class="p">],</span>
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;.+date$&#39;</span><span class="p">,</span> <span class="s1">&#39;.+&#39;</span><span class="p">],</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>treatment</th>
      <th>date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>A</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>A</td>
      <td>2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>5</th>
      <td>1</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>6</th>
      <td>2</td>
      <td>B</td>
      <td>3</td>
    </tr>
    <tr>
      <th>7</th>
      <td>3</td>
      <td>B</td>
      <td>2</td>
    </tr>
    <tr>
      <th>8</th>
      <td>4</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>9</th>
      <td>5</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>10</th>
      <td>1</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>11</th>
      <td>2</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>12</th>
      <td>3</td>
      <td>&lt;NA&gt;</td>
      <td>&lt;NA&gt;</td>
    </tr>
    <tr>
      <th>13</th>
      <td>4</td>
      <td>C</td>
      <td>1</td>
    </tr>
    <tr>
      <th>14</th>
      <td>5</td>
      <td>D</td>
      <td>5</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Pattern-3B---Group-similar-columns-and-values-together"><strong>Pattern 3B - Group similar columns and values together</strong><a class="anchor-link" href="#Pattern-3B---Group-similar-columns-and-values-together"> </a></h2><p>This is best illustrated with an <a href="https://stackoverflow.com/q/51519101/7175713">example</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;City&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;Houston&#39;</span><span class="p">,</span> <span class="s1">&#39;Austin&#39;</span><span class="p">,</span> <span class="s1">&#39;Hoover&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;State&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;Texas&#39;</span><span class="p">,</span> <span class="s1">&#39;Texas&#39;</span><span class="p">,</span> <span class="s1">&#39;Alabama&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;Name&#39;</span><span class="p">:[</span><span class="s1">&#39;Aria&#39;</span><span class="p">,</span> <span class="s1">&#39;Penelope&#39;</span><span class="p">,</span> <span class="s1">&#39;Niko&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;Mango&#39;</span><span class="p">:[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">90</span><span class="p">],</span>
                   <span class="s1">&#39;Orange&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">14</span><span class="p">],</span> 
                   <span class="s1">&#39;Watermelon&#39;</span><span class="p">:[</span><span class="mi">40</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">43</span><span class="p">],</span>
                   <span class="s1">&#39;Gin&#39;</span><span class="p">:[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">34</span><span class="p">],</span>
                   <span class="s1">&#39;Vodka&#39;</span><span class="p">:[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">18</span><span class="p">]},</span>
                 <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;City&#39;</span><span class="p">,</span> <span class="s1">&#39;State&#39;</span><span class="p">,</span> <span class="s1">&#39;Name&#39;</span><span class="p">,</span> <span class="s1">&#39;Mango&#39;</span><span class="p">,</span> <span class="s1">&#39;Orange&#39;</span><span class="p">,</span> <span class="s1">&#39;Watermelon&#39;</span><span class="p">,</span> <span class="s1">&#39;Gin&#39;</span><span class="p">,</span> <span class="s1">&#39;Vodka&#39;</span><span class="p">])</span>


<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>City</th>
      <th>State</th>
      <th>Name</th>
      <th>Mango</th>
      <th>Orange</th>
      <th>Watermelon</th>
      <th>Gin</th>
      <th>Vodka</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Houston</td>
      <td>Texas</td>
      <td>Aria</td>
      <td>4</td>
      <td>10</td>
      <td>40</td>
      <td>16</td>
      <td>20</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Austin</td>
      <td>Texas</td>
      <td>Penelope</td>
      <td>10</td>
      <td>8</td>
      <td>99</td>
      <td>200</td>
      <td>33</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Hoover</td>
      <td>Alabama</td>
      <td>Niko</td>
      <td>90</td>
      <td>14</td>
      <td>43</td>
      <td>34</td>
      <td>18</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The goal in this case is to group similar columns <strong>and</strong> values together - group the drinks into one column, group the fruits into another column. When that is done, group the values for the drinks into one column, and the values for the fruits into another column. That's the pattern, and for this pattern we continue with the idea from <a href="##-Pattern-3A---Group-similar-columns-together-">earlier</a>, by passing a list of regular expressions to <code>names_pattern</code>, an equal number of names to <code>names_to</code>, <strong>and</strong> an equal number of names to <code>values_to</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;City&quot;</span><span class="p">,</span> <span class="s2">&quot;State&quot;</span><span class="p">],</span>
    <span class="n">column_names</span><span class="o">=</span><span class="nb">slice</span><span class="p">(</span><span class="s2">&quot;Mango&quot;</span><span class="p">,</span> <span class="s2">&quot;Vodka&quot;</span><span class="p">),</span>
    <span class="n">names_to</span><span class="o">=</span><span class="p">(</span><span class="s2">&quot;Fruit&quot;</span><span class="p">,</span> <span class="s2">&quot;Drink&quot;</span><span class="p">),</span>
    <span class="n">values_to</span><span class="o">=</span><span class="p">(</span><span class="s2">&quot;Pounds&quot;</span><span class="p">,</span> <span class="s2">&quot;Ounces&quot;</span><span class="p">),</span>
    <span class="n">names_pattern</span><span class="o">=</span><span class="p">[</span><span class="sa">r</span><span class="s2">&quot;M|O|W&quot;</span><span class="p">,</span> <span class="sa">r</span><span class="s2">&quot;G|V&quot;</span><span class="p">],</span>
   <span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>City</th>
      <th>State</th>
      <th>Fruit</th>
      <th>Pounds</th>
      <th>Drink</th>
      <th>Ounces</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Houston</td>
      <td>Texas</td>
      <td>Mango</td>
      <td>4</td>
      <td>Gin</td>
      <td>16.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Austin</td>
      <td>Texas</td>
      <td>Mango</td>
      <td>10</td>
      <td>Gin</td>
      <td>200.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Hoover</td>
      <td>Alabama</td>
      <td>Mango</td>
      <td>90</td>
      <td>Gin</td>
      <td>34.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Houston</td>
      <td>Texas</td>
      <td>Orange</td>
      <td>10</td>
      <td>Vodka</td>
      <td>20.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Austin</td>
      <td>Texas</td>
      <td>Orange</td>
      <td>8</td>
      <td>Vodka</td>
      <td>33.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Hoover</td>
      <td>Alabama</td>
      <td>Orange</td>
      <td>14</td>
      <td>Vodka</td>
      <td>18.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Houston</td>
      <td>Texas</td>
      <td>Watermelon</td>
      <td>40</td>
      <td>None</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Austin</td>
      <td>Texas</td>
      <td>Watermelon</td>
      <td>99</td>
      <td>None</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Hoover</td>
      <td>Alabama</td>
      <td>Watermelon</td>
      <td>43</td>
      <td>None</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Simple, straightforward, to the point, and efficient. Let's look at another <a href="https://stackoverflow.com/q/37422487/7175713">example</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;State&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;CA&#39;</span><span class="p">,</span> <span class="s1">&#39;CA&#39;</span><span class="p">,</span> <span class="s1">&#39;FL&#39;</span><span class="p">,</span> <span class="s1">&#39;FL&#39;</span><span class="p">],</span>
 <span class="s1">&#39;ItemN&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
 <span class="s1">&#39;x1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
 <span class="s1">&#39;x2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
 <span class="s1">&#39;x3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
 <span class="s1">&#39;y1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">16</span><span class="p">],</span>
 <span class="s1">&#39;y2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">14</span><span class="p">],</span>
 <span class="s1">&#39;y3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span>
 <span class="s1">&#39;z1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">],</span>
 <span class="s1">&#39;z2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
 <span class="s1">&#39;z3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]}</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>

<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>State</th>
      <th>ItemN</th>
      <th>x1</th>
      <th>x2</th>
      <th>x3</th>
      <th>y1</th>
      <th>y2</th>
      <th>y3</th>
      <th>z1</th>
      <th>z2</th>
      <th>z3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>CA</td>
      <td>1</td>
      <td>6</td>
      <td>4</td>
      <td>3</td>
      <td>7</td>
      <td>5</td>
      <td>3</td>
      <td>11</td>
      <td>5</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>CA</td>
      <td>2</td>
      <td>7</td>
      <td>3</td>
      <td>1</td>
      <td>15</td>
      <td>10</td>
      <td>5</td>
      <td>4</td>
      <td>2</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>FL</td>
      <td>3</td>
      <td>3</td>
      <td>2</td>
      <td>1</td>
      <td>5</td>
      <td>3</td>
      <td>2</td>
      <td>13</td>
      <td>7</td>
      <td>2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>FL</td>
      <td>4</td>
      <td>9</td>
      <td>4</td>
      <td>2</td>
      <td>16</td>
      <td>14</td>
      <td>12</td>
      <td>14</td>
      <td>5</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The goal is to group all the <code>x</code> columns into one, the <code>y</code> columns into one column, and group the associated values into individual columns as well. We are grouping similar columns <strong>and</strong> values - that's the pattern - again we pass a list of regular expressions to <code>names_pattern</code>, a list of names to <code>names_to</code>, and a list of names to <code>values_to</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;State&#39;</span><span class="p">,</span> <span class="s1">&#39;ItemN&#39;</span><span class="p">],</span> 
    <span class="n">names_to</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;z&#39;</span><span class="p">],</span> 
    <span class="n">values_to</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;xvalue&#39;</span><span class="p">,</span> <span class="s1">&#39;yvalue&#39;</span><span class="p">,</span> <span class="s1">&#39;zvalue&#39;</span><span class="p">],</span> 
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;z&#39;</span><span class="p">],</span> 
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>State</th>
      <th>ItemN</th>
      <th>x</th>
      <th>xvalue</th>
      <th>y</th>
      <th>yvalue</th>
      <th>z</th>
      <th>zvalue</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>CA</td>
      <td>1</td>
      <td>x1</td>
      <td>6</td>
      <td>y1</td>
      <td>7</td>
      <td>z1</td>
      <td>11</td>
    </tr>
    <tr>
      <th>1</th>
      <td>CA</td>
      <td>2</td>
      <td>x1</td>
      <td>7</td>
      <td>y1</td>
      <td>15</td>
      <td>z1</td>
      <td>4</td>
    </tr>
    <tr>
      <th>2</th>
      <td>FL</td>
      <td>3</td>
      <td>x1</td>
      <td>3</td>
      <td>y1</td>
      <td>5</td>
      <td>z1</td>
      <td>13</td>
    </tr>
    <tr>
      <th>3</th>
      <td>FL</td>
      <td>4</td>
      <td>x1</td>
      <td>9</td>
      <td>y1</td>
      <td>16</td>
      <td>z1</td>
      <td>14</td>
    </tr>
    <tr>
      <th>4</th>
      <td>CA</td>
      <td>1</td>
      <td>x2</td>
      <td>4</td>
      <td>y2</td>
      <td>5</td>
      <td>z2</td>
      <td>5</td>
    </tr>
    <tr>
      <th>5</th>
      <td>CA</td>
      <td>2</td>
      <td>x2</td>
      <td>3</td>
      <td>y2</td>
      <td>10</td>
      <td>z2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>6</th>
      <td>FL</td>
      <td>3</td>
      <td>x2</td>
      <td>2</td>
      <td>y2</td>
      <td>3</td>
      <td>z2</td>
      <td>7</td>
    </tr>
    <tr>
      <th>7</th>
      <td>FL</td>
      <td>4</td>
      <td>x2</td>
      <td>4</td>
      <td>y2</td>
      <td>14</td>
      <td>z2</td>
      <td>5</td>
    </tr>
    <tr>
      <th>8</th>
      <td>CA</td>
      <td>1</td>
      <td>x3</td>
      <td>3</td>
      <td>y3</td>
      <td>3</td>
      <td>z3</td>
      <td>1</td>
    </tr>
    <tr>
      <th>9</th>
      <td>CA</td>
      <td>2</td>
      <td>x3</td>
      <td>1</td>
      <td>y3</td>
      <td>5</td>
      <td>z3</td>
      <td>1</td>
    </tr>
    <tr>
      <th>10</th>
      <td>FL</td>
      <td>3</td>
      <td>x3</td>
      <td>1</td>
      <td>y3</td>
      <td>2</td>
      <td>z3</td>
      <td>2</td>
    </tr>
    <tr>
      <th>11</th>
      <td>FL</td>
      <td>4</td>
      <td>x3</td>
      <td>2</td>
      <td>y3</td>
      <td>12</td>
      <td>z3</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Performance"><strong>Performance</strong><a class="anchor-link" href="#Performance"> </a></h2><p><a href="https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.pivot.pivot_longer">pivot_longer</a> is not just simple, convenient, and straightforward, it is efficient as well:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">timeit</span> religion.pivot_longer(index = &#39;religion&#39;, names_to = &#39;income&#39;, values_to = &#39;count&#39;)
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>863 µs ± 14.1 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">timeit</span> religion.melt(id_vars = &#39;religion&#39;, var_name = &#39;income&#39;, value_name = &#39;count&#39;)
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>1.04 ms ± 64.7 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><a href="https://grantmcdermott.com/reshape-benchmarks/">Sample data</a>, using 1000 columns (you can personally increase the number of columns to 1e6 or 1e8, depending on the power of your CPU):</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">sparse_wide</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;Data_files/sparse-wide.csv&#39;</span><span class="p">)</span>
<span class="n">sparse_wide</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>grp</th>
      <th>x1</th>
      <th>x2</th>
      <th>x3</th>
      <th>x4</th>
      <th>x5</th>
      <th>x6</th>
      <th>x7</th>
      <th>x8</th>
      <th>...</th>
      <th>x991</th>
      <th>x992</th>
      <th>x993</th>
      <th>x994</th>
      <th>x995</th>
      <th>x996</th>
      <th>x997</th>
      <th>x998</th>
      <th>x999</th>
      <th>x1000</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1000</td>
      <td>A</td>
      <td>I</td>
      <td>A</td>
      <td>M</td>
      <td>O</td>
      <td>E</td>
      <td>F</td>
      <td>D</td>
      <td>...</td>
      <td>C</td>
      <td>L</td>
      <td>G</td>
      <td>I</td>
      <td>R</td>
      <td>X</td>
      <td>O</td>
      <td>W</td>
      <td>L</td>
      <td>L</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>528</td>
      <td>I</td>
      <td>X</td>
      <td>U</td>
      <td>Q</td>
      <td>B</td>
      <td>X</td>
      <td>I</td>
      <td>J</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>151</td>
      <td>J</td>
      <td>Q</td>
      <td>H</td>
      <td>F</td>
      <td>B</td>
      <td>X</td>
      <td>B</td>
      <td>F</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>343</td>
      <td>P</td>
      <td>A</td>
      <td>K</td>
      <td>K</td>
      <td>N</td>
      <td>R</td>
      <td>E</td>
      <td>E</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>460</td>
      <td>L</td>
      <td>D</td>
      <td>G</td>
      <td>X</td>
      <td>I</td>
      <td>O</td>
      <td>C</td>
      <td>W</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 1002 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">timeit</span> sparse_wide.melt(id_vars = [&#39;id&#39;, &#39;grp&#39;])
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>31.9 ms ± 1.22 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">timeit</span> sparse_wide.pivot_longer(index = [&#39;id&#39;, &#39;grp&#39;])
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>28 ms ± 357 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's test on the <code>movies</code> dataset:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">wl</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">wide_to_long</span><span class="p">(</span>
            <span class="n">movies</span><span class="p">,</span> 
            <span class="n">stubnames</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;director&#39;</span><span class="p">,</span> <span class="s1">&#39;director_fb_likes&#39;</span><span class="p">,</span> <span class="s1">&#39;actor&#39;</span><span class="p">,</span> <span class="s1">&#39;actor_fb_likes&#39;</span><span class="p">],</span> 
            <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;rating&#39;</span><span class="p">,</span> <span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="s1">&#39;duration&#39;</span><span class="p">],</span> 
            <span class="n">j</span> <span class="o">=</span> <span class="s1">&#39;num&#39;</span><span class="p">,</span> 
            <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;_&#39;</span><span class="p">)</span>
<span class="n">wl</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th>director</th>
      <th>director_fb_likes</th>
      <th>actor</th>
      <th>actor_fb_likes</th>
    </tr>
    <tr>
      <th>title</th>
      <th>rating</th>
      <th>year</th>
      <th>duration</th>
      <th>num</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="3" valign="top">Avatar</th>
      <th rowspan="3" valign="top">PG-13</th>
      <th rowspan="3" valign="top">2009.0</th>
      <th rowspan="3" valign="top">178.0</th>
      <th>1</th>
      <td>James Cameron</td>
      <td>0.0</td>
      <td>CCH Pounder</td>
      <td>1000.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>Joel David Moore</td>
      <td>936.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>Wes Studi</td>
      <td>855.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">Pirates of the Caribbean: At World's End</th>
      <th rowspan="2" valign="top">PG-13</th>
      <th rowspan="2" valign="top">2007.0</th>
      <th rowspan="2" valign="top">169.0</th>
      <th>1</th>
      <td>Gore Verbinski</td>
      <td>563.0</td>
      <td>Johnny Depp</td>
      <td>40000.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>Orlando Bloom</td>
      <td>5000.0</td>
    </tr>
    <tr>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">Shanghai Calling</th>
      <th rowspan="2" valign="top">PG-13</th>
      <th rowspan="2" valign="top">2012.0</th>
      <th rowspan="2" valign="top">100.0</th>
      <th>2</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>Daniel Henney</td>
      <td>719.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>Eliza Coupe</td>
      <td>490.0</td>
    </tr>
    <tr>
      <th rowspan="3" valign="top">My Date with Drew</th>
      <th rowspan="3" valign="top">PG</th>
      <th rowspan="3" valign="top">2004.0</th>
      <th rowspan="3" valign="top">90.0</th>
      <th>1</th>
      <td>Jon Gunn</td>
      <td>16.0</td>
      <td>John August</td>
      <td>86.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>Brian Herzlinger</td>
      <td>23.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>Jon Gunn</td>
      <td>16.0</td>
    </tr>
  </tbody>
</table>
<p>14748 rows × 4 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>A more efficient approach than <code>pd.wide_to_long</code>, using <code>pd.stack</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;rating&#39;</span><span class="p">,</span> <span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="s1">&#39;duration&#39;</span><span class="p">]</span>
<span class="n">vid</span> <span class="o">=</span> <span class="n">movies</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
<span class="n">vid</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">vid</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">rsplit</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">expand</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
<span class="n">vid</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="kc">None</span><span class="p">,</span> <span class="s1">&#39;num&#39;</span><span class="p">]</span>
<span class="n">vid</span> <span class="o">=</span> <span class="n">vid</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">level</span> <span class="o">=</span> <span class="s1">&#39;num&#39;</span><span class="p">,</span> <span class="n">dropna</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>
<span class="n">vid</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th>actor</th>
      <th>actor_fb_likes</th>
      <th>director</th>
      <th>director_fb_likes</th>
    </tr>
    <tr>
      <th>title</th>
      <th>rating</th>
      <th>year</th>
      <th>duration</th>
      <th>num</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="3" valign="top">Avatar</th>
      <th rowspan="3" valign="top">PG-13</th>
      <th rowspan="3" valign="top">2009.0</th>
      <th rowspan="3" valign="top">178.0</th>
      <th>1</th>
      <td>CCH Pounder</td>
      <td>1000.0</td>
      <td>James Cameron</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Joel David Moore</td>
      <td>936.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Wes Studi</td>
      <td>855.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">Pirates of the Caribbean: At World's End</th>
      <th rowspan="2" valign="top">PG-13</th>
      <th rowspan="2" valign="top">2007.0</th>
      <th rowspan="2" valign="top">169.0</th>
      <th>1</th>
      <td>Johnny Depp</td>
      <td>40000.0</td>
      <td>Gore Verbinski</td>
      <td>563.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Orlando Bloom</td>
      <td>5000.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">Shanghai Calling</th>
      <th rowspan="2" valign="top">PG-13</th>
      <th rowspan="2" valign="top">2012.0</th>
      <th rowspan="2" valign="top">100.0</th>
      <th>2</th>
      <td>Daniel Henney</td>
      <td>719.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Eliza Coupe</td>
      <td>490.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th rowspan="3" valign="top">My Date with Drew</th>
      <th rowspan="3" valign="top">PG</th>
      <th rowspan="3" valign="top">2004.0</th>
      <th rowspan="3" valign="top">90.0</th>
      <th>1</th>
      <td>John August</td>
      <td>86.0</td>
      <td>Jon Gunn</td>
      <td>16.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Brian Herzlinger</td>
      <td>23.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Jon Gunn</td>
      <td>16.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>14748 rows × 4 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="n">movies</span>
        <span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
            <span class="n">index</span> <span class="o">=</span> <span class="nb">slice</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;duration&#39;</span><span class="p">),</span>
            <span class="n">names_to</span> <span class="o">=</span> <span class="s2">&quot;.value&quot;</span><span class="p">,</span>
            <span class="n">names_pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&quot;(.+)_\d&quot;</span><span class="p">,</span>
            <span class="n">sort_by_appearance</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
        <span class="p">)</span>

<span class="n">out</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>title</th>
      <th>rating</th>
      <th>year</th>
      <th>duration</th>
      <th>director</th>
      <th>director_fb_likes</th>
      <th>actor</th>
      <th>actor_fb_likes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Avatar</td>
      <td>PG-13</td>
      <td>2009.0</td>
      <td>178.0</td>
      <td>James Cameron</td>
      <td>0.0</td>
      <td>CCH Pounder</td>
      <td>1000.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Avatar</td>
      <td>PG-13</td>
      <td>2009.0</td>
      <td>178.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Joel David Moore</td>
      <td>936.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Avatar</td>
      <td>PG-13</td>
      <td>2009.0</td>
      <td>178.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Wes Studi</td>
      <td>855.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Pirates of the Caribbean: At World's End</td>
      <td>PG-13</td>
      <td>2007.0</td>
      <td>169.0</td>
      <td>Gore Verbinski</td>
      <td>563.0</td>
      <td>Johnny Depp</td>
      <td>40000.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Pirates of the Caribbean: At World's End</td>
      <td>PG-13</td>
      <td>2007.0</td>
      <td>169.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Orlando Bloom</td>
      <td>5000.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>14743</th>
      <td>Shanghai Calling</td>
      <td>PG-13</td>
      <td>2012.0</td>
      <td>100.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Daniel Henney</td>
      <td>719.0</td>
    </tr>
    <tr>
      <th>14744</th>
      <td>Shanghai Calling</td>
      <td>PG-13</td>
      <td>2012.0</td>
      <td>100.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Eliza Coupe</td>
      <td>490.0</td>
    </tr>
    <tr>
      <th>14745</th>
      <td>My Date with Drew</td>
      <td>PG</td>
      <td>2004.0</td>
      <td>90.0</td>
      <td>Jon Gunn</td>
      <td>16.0</td>
      <td>John August</td>
      <td>86.0</td>
    </tr>
    <tr>
      <th>14746</th>
      <td>My Date with Drew</td>
      <td>PG</td>
      <td>2004.0</td>
      <td>90.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Brian Herzlinger</td>
      <td>23.0</td>
    </tr>
    <tr>
      <th>14747</th>
      <td>My Date with Drew</td>
      <td>PG</td>
      <td>2004.0</td>
      <td>90.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Jon Gunn</td>
      <td>16.0</td>
    </tr>
  </tbody>
</table>
<p>14748 rows × 8 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">wl</span> <span class="o">=</span> <span class="n">wl</span><span class="o">.</span><span class="n">droplevel</span><span class="p">(</span><span class="s1">&#39;num&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">wl</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>True</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">vid</span> <span class="o">=</span> <span class="p">(</span><span class="n">vid</span>
        <span class="o">.</span><span class="n">droplevel</span><span class="p">(</span><span class="s1">&#39;num&#39;</span><span class="p">)</span>
        <span class="o">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">[</span><span class="s1">&#39;director&#39;</span><span class="p">,</span> <span class="s1">&#39;director_fb_likes&#39;</span><span class="p">,</span> <span class="s1">&#39;actor&#39;</span><span class="p">,</span> <span class="s1">&#39;actor_fb_likes&#39;</span><span class="p">]]</span>
        <span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
        <span class="p">)</span>

<span class="n">wl</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">vid</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>True</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">vid</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>True</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%%time</span>it 
<span class="n">pd</span><span class="o">.</span><span class="n">wide_to_long</span><span class="p">(</span>
    <span class="n">movies</span><span class="p">,</span> 
    <span class="n">stubnames</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;director&#39;</span><span class="p">,</span> <span class="s1">&#39;director_fb_likes&#39;</span><span class="p">,</span> <span class="s1">&#39;actor&#39;</span><span class="p">,</span> <span class="s1">&#39;actor_fb_likes&#39;</span><span class="p">],</span> 
    <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;rating&#39;</span><span class="p">,</span> <span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="s1">&#39;duration&#39;</span><span class="p">],</span> 
    <span class="n">j</span> <span class="o">=</span> <span class="s1">&#39;num&#39;</span><span class="p">,</span> 
    <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;_&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>142 ms ± 6.62 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%%time</span>it
<span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;rating&#39;</span><span class="p">,</span> <span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="s1">&#39;duration&#39;</span><span class="p">]</span>
<span class="n">vid</span> <span class="o">=</span> <span class="n">movies</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
<span class="n">vid</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">vid</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">rsplit</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">expand</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
<span class="n">vid</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">level</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">dropna</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>15.2 ms ± 676 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%%time</span>it
<span class="p">(</span><span class="n">movies</span>
<span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="nb">slice</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;duration&#39;</span><span class="p">),</span>
    <span class="n">names_to</span> <span class="o">=</span> <span class="s2">&quot;.value&quot;</span><span class="p">,</span>
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&quot;(.+)_\d&quot;</span><span class="p">,</span>
    <span class="n">sort_by_appearance</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>8.28 ms ± 302 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%%time</span>it
<span class="n">movies</span><span class="o">.</span><span class="n">pivot_longer</span><span class="p">(</span>
    <span class="n">index</span> <span class="o">=</span> <span class="nb">slice</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;duration&#39;</span><span class="p">),</span>
    <span class="n">names_to</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;director&#39;</span><span class="p">,</span> <span class="s1">&#39;director_fb_likes&#39;</span><span class="p">,</span> <span class="s1">&#39;actor&#39;</span><span class="p">,</span> <span class="s1">&#39;actor_fb_likes&#39;</span><span class="p">],</span>
    <span class="n">names_pattern</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;director_\d$&#39;</span><span class="p">,</span> <span class="s1">&#39;director_fb_likes&#39;</span><span class="p">,</span> <span class="s1">&#39;actor_\d$&#39;</span><span class="p">,</span> <span class="s1">&#39;actor.+&#39;</span><span class="p">],</span>
    <span class="n">sort_by_appearance</span> <span class="o">=</span> <span class="kc">True</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>8.61 ms ± 624 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Your mileage may vary with these speed tests.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Summary"><strong>Summary</strong><a class="anchor-link" href="#Summary"> </a></h2><p>This blog post shows various ways to reshape data into long form, using <code>pivot_longer</code>, based on some common patterns. Once the pattern is identified, use the appropriate syntax for <code>pivot_longer</code>. It is meant to be simple, straightforward, and efficient.</p>

</div>
</div>
</div>
</div>]]></content><author><name>Samuel Oranyeli</name></author><category term="python" /><category term="Pandas" /><category term="reshape" /><category term="wide-to-long" /><category term="pivot_longer" /><category term="stack" /><summary type="html"><![CDATA[Reshaping Data Efficiently and with Ease]]></summary></entry><entry><title type="html">Data Wrangling with Python Datatable - Selecting Columns</title><link href="https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/02/09/Data-Wrangling-with-Python-Datatable-Selecting-Columns.html" rel="alternate" type="text/html" title="Data Wrangling with Python Datatable - Selecting Columns" /><published>2021-02-09T00:00:00-06:00</published><updated>2021-02-09T00:00:00-06:00</updated><id>https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/02/09/Data-Wrangling-with-Python-Datatable---Selecting-Columns</id><content type="html" xml:base="https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/02/09/Data-Wrangling-with-Python-Datatable-Selecting-Columns.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2021-02-09-Data Wrangling with Python Datatable - Selecting Columns.ipynb
-->

<div class="container" id="notebook-container">
        
    
    
<div class="cell border-box-sizing code_cell rendered">

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>This article highlights various ways to select columns in python datatable. The examples used here are based off the excellent <a href="https://suzan.rbind.io/2018/01/dplyr-tutorial-1/">article</a> by <a href="https://twitter.com/SuzanBaert">Susan Baert</a>.</p>
<p>The data file can be accessed <a href="https://github.com/samukweku/data-wrangling-blog/raw/master/_notebooks/Data_files/msleep.txt">here</a></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Selecting-Columns"><strong>Selecting Columns</strong><a class="anchor-link" href="#Selecting-Columns"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="The-Basics">The Basics<a class="anchor-link" href="#The-Basics"> </a></h3>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">datatable</span> <span class="kn">import</span> <span class="n">dt</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ltype</span><span class="p">,</span> <span class="n">stype</span>
<span class="kn">import</span> <span class="nn">re</span>

<span class="n">file_path</span> <span class="o">=</span> <span class="s2">&quot;https://github.com/samukweku/data-wrangling-blog/raw/master/_notebooks/Data_files/msleep.txt&quot;</span>
<span class="n">DT</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">fread</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
<span class="n">DT</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea ">
<style type="text/css">
.datatable table.frame { margin-bottom: 0; }
.datatable table.frame thead { border-bottom: none; }
.datatable table.frame tr.coltypes td {  color: #FFFFFF;  line-height: 6px;  padding: 0 0.5em;}
.datatable .bool    { background: #DDDD99; }
.datatable .object  { background: #565656; }
.datatable .int     { background: #5D9E5D; }
.datatable .float   { background: #4040CC; }
.datatable .str     { background: #CC4040; }
.datatable .row_index {  background: var(--jp-border-color3);  border-right: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  font-size: 9px;}
.datatable .frame tr.coltypes .row_index {  background: var(--jp-border-color0);}
.datatable th:nth-child(2) { padding-left: 12px; }
.datatable .hellipsis {  color: var(--jp-cell-editor-border-color);}
.datatable .vellipsis {  background: var(--jp-layout-color0);  color: var(--jp-cell-editor-border-color);}
.datatable .na {  color: var(--jp-cell-editor-border-color);  font-size: 80%;}
.datatable .footer { font-size: 9px; }
.datatable .frame_dimensions {  background: var(--jp-border-color3);  border-top: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  display: inline-block;  opacity: 0.6;  padding: 1px 10px 1px 5px;}
</style>

</div>

</div>

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>conservation</th><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th><th>awake</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>lc</td><td>12.1</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>11.9</td><td><span class="na">NA</span></td><td>50</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td><span class="na">NA</span></td><td>17</td><td>1.8</td><td><span class="na">NA</span></td><td>7</td><td>0.0155</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>nt</td><td>14.4</td><td>2.4</td><td><span class="na">NA</span></td><td>9.6</td><td><span class="na">NA</span></td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>lc</td><td>14.9</td><td>2.3</td><td>0.133333</td><td>9.1</td><td>0.00029</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>domesticated</td><td>4</td><td>0.7</td><td>0.666667</td><td>20</td><td>0.423</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 11 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can select columns by name or position in the <code>j</code> section:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="s1">&#39;genus&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>genus</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Acinonyx</td></tr>
    <tr><td class="row_index">1</td><td>Aotus</td></tr>
    <tr><td class="row_index">2</td><td>Aplodontia</td></tr>
    <tr><td class="row_index">3</td><td>Blarina</td></tr>
    <tr><td class="row_index">4</td><td>Bos</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 1 column</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>genus</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Acinonyx</td></tr>
    <tr><td class="row_index">1</td><td>Aotus</td></tr>
    <tr><td class="row_index">2</td><td>Aplodontia</td></tr>
    <tr><td class="row_index">3</td><td>Blarina</td></tr>
    <tr><td class="row_index">4</td><td>Bos</td></tr>
    <tr><td class="row_index">5</td><td>Bradypus</td></tr>
    <tr><td class="row_index">6</td><td>Callorhinus</td></tr>
    <tr><td class="row_index">7</td><td>Calomys</td></tr>
    <tr><td class="row_index">8</td><td>Canis</td></tr>
    <tr><td class="row_index">9</td><td>Capreolus</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">10 rows &times; 1 column</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">10</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>genus</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Acinonyx</td></tr>
    <tr><td class="row_index">1</td><td>Aotus</td></tr>
    <tr><td class="row_index">2</td><td>Aplodontia</td></tr>
    <tr><td class="row_index">3</td><td>Blarina</td></tr>
    <tr><td class="row_index">4</td><td>Bos</td></tr>
    <tr><td class="row_index">5</td><td>Bradypus</td></tr>
    <tr><td class="row_index">6</td><td>Callorhinus</td></tr>
    <tr><td class="row_index">7</td><td>Calomys</td></tr>
    <tr><td class="row_index">8</td><td>Canis</td></tr>
    <tr><td class="row_index">9</td><td>Capreolus</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">10 rows &times; 1 column</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>If you are selecting a single column, you can pass it into the brackets without specifying the <code>i</code> section:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[</span><span class="s1">&#39;genus&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>genus</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Acinonyx</td></tr>
    <tr><td class="row_index">1</td><td>Aotus</td></tr>
    <tr><td class="row_index">2</td><td>Aplodontia</td></tr>
    <tr><td class="row_index">3</td><td>Blarina</td></tr>
    <tr><td class="row_index">4</td><td>Bos</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 1 column</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For the rest of this article, I will be focusing on column selection by name.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can select columns by passing a list/tuple of the column names:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns_to_select</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;genus&quot;</span><span class="p">,</span> <span class="s2">&quot;sleep_total&quot;</span><span class="p">,</span> <span class="s2">&quot;awake&quot;</span><span class="p">]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns_to_select</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>sleep_total</th><th>awake</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>12.1</td><td>11.9</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>17</td><td>7</td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>14.4</td><td>9.6</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>14.9</td><td>9.1</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>4</td><td>20</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 4 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can pass a list/tuple of booleans:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns_to_select</span> <span class="o">=</span> <span class="p">[</span><span class="kc">True</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span><span class="kc">False</span><span class="p">,</span><span class="kc">True</span><span class="p">,</span><span class="kc">True</span><span class="p">,</span><span class="kc">False</span><span class="p">,</span><span class="kc">False</span><span class="p">]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns_to_select</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>sleep_total</th><th>sleep_cycle</th><th>awake</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>12.1</td><td><span class="na">NA</span></td><td>11.9</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>17</td><td><span class="na">NA</span></td><td>7</td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>14.4</td><td><span class="na">NA</span></td><td>9.6</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>14.9</td><td>0.133333</td><td>9.1</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>4</td><td>0.666667</td><td>20</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can select chunks of columns using python's <a href="https://docs.python.org/3/library/functions.html#slice">slice</a> syntax or via the <code>start:end</code> shortcut:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="nb">slice</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;order&quot;</span><span class="p">)]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 4 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="s2">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;order&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 4 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Multiple chunk selection is possible:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns_to_select</span> <span class="o">=</span> <span class="p">[</span><span class="nb">slice</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;order&quot;</span><span class="p">),</span> <span class="nb">slice</span><span class="p">(</span><span class="s2">&quot;sleep_total&quot;</span><span class="p">,</span> <span class="s2">&quot;sleep_cycle&quot;</span><span class="p">)]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns_to_select</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>12.1</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td>17</td><td>1.8</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>14.4</td><td>2.4</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>14.9</td><td>2.3</td><td>0.133333</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>4</td><td>0.7</td><td>0.666667</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 7 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For the shortcut notation, for multiple selections, it has to be prefixed with datatable's <a href="https://datatable.readthedocs.io/en/latest/manual/f-expressions.html">f</a> symbol:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns_to_select</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">[</span><span class="s2">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;order&quot;</span><span class="p">,</span> <span class="s2">&quot;sleep_total&quot;</span> <span class="p">:</span> <span class="s2">&quot;sleep_cycle&quot;</span><span class="p">]]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns_to_select</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>12.1</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td>17</td><td>1.8</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>14.4</td><td>2.4</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>14.9</td><td>2.3</td><td>0.133333</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>4</td><td>0.7</td><td>0.666667</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 7 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>To deselect/drop columns you can use the <a href="https://datatable.readthedocs.io/en/latest/manual/f-expressions.html#modifying-a-columnset">remove</a> function:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns_to_remove</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">[</span><span class="s2">&quot;sleep_total&quot;</span> <span class="p">:</span> <span class="s2">&quot;awake&quot;</span><span class="p">,</span> <span class="s2">&quot;conservation&quot;</span><span class="p">]]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">f</span><span class="p">[:]</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">columns_to_remove</span><span class="p">)]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td><span class="na">NA</span></td><td>50</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td>0.0155</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td><span class="na">NA</span></td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>0.00029</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>0.423</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 6 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can deselect a whole chunk, and then re-add a column again; this combines the <a href="https://datatable.readthedocs.io/en/latest/manual/f-expressions.html#modifying-a-columnset">remove</a> and <a href="https://datatable.readthedocs.io/en/latest/manual/f-expressions.html#modifying-a-columnset">extend</a> functions:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="n">f</span><span class="p">[:]</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="s2">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;awake&quot;</span><span class="p">])</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="s2">&quot;conservation&quot;</span><span class="p">])]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>brainwt</th><th>bodywt</th><th>conservation</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td><span class="na">NA</span></td><td>50</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>0.0155</td><td>0.48</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td><span class="na">NA</span></td><td>1.35</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>0.00029</td><td>0.019</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>0.423</td><td>600</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Selecting-Columns-based-on-Partial-Names">Selecting Columns based on Partial Names<a class="anchor-link" href="#Selecting-Columns-based-on-Partial-Names"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can use python's string functions to filter for columns with partial matching:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns_to_select</span> <span class="o">=</span> <span class="p">[</span><span class="n">name</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&quot;sleep&quot;</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">DT</span><span class="o">.</span><span class="n">names</span><span class="p">]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns_to_select</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>12.1</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">1</td><td>17</td><td>1.8</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>14.4</td><td>2.4</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">3</td><td>14.9</td><td>2.3</td><td>0.133333</td></tr>
    <tr><td class="row_index">4</td><td>4</td><td>0.7</td><td>0.666667</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns_to_select</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;eep&quot;</span> <span class="ow">in</span> <span class="n">name</span> <span class="ow">or</span> <span class="n">name</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">&quot;wt&quot;</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">DT</span><span class="o">.</span><span class="n">names</span><span class="p">]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns_to_select</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>12.1</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>50</td></tr>
    <tr><td class="row_index">1</td><td>17</td><td>1.8</td><td><span class="na">NA</span></td><td>0.0155</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>14.4</td><td>2.4</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>14.9</td><td>2.3</td><td>0.133333</td><td>0.00029</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>4</td><td>0.7</td><td>0.666667</td><td>0.423</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Selecting-Columns-based-on-Regex">Selecting Columns based on Regex<a class="anchor-link" href="#Selecting-Columns-based-on-Regex"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Python's <a href="https://docs.python.org/3/library/re.html">re</a> module can be used to select columns based on a regular expression:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># this returns a list of booleans</span>
<span class="n">columns_to_select</span> <span class="o">=</span> <span class="p">[</span><span class="kc">True</span> <span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;o.+er&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">else</span> <span class="kc">False</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">DT</span><span class="o">.</span><span class="n">names</span><span class="p">]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns_to_select</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>order</th><th>conservation</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Carnivora</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>Primates</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Rodentia</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>Soricomorpha</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>Artiodactyla</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 2 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Selecting-columns-by-their-data-type">Selecting columns by their data type<a class="anchor-link" href="#Selecting-columns-by-their-data-type"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can pass a data type in the <code>j</code> section:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="nb">str</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>conservation</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can pass a list of data types:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">]]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th><th>awake</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>12.1</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>11.9</td><td><span class="na">NA</span></td><td>50</td></tr>
    <tr><td class="row_index">1</td><td>17</td><td>1.8</td><td><span class="na">NA</span></td><td>7</td><td>0.0155</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>14.4</td><td>2.4</td><td><span class="na">NA</span></td><td>9.6</td><td><span class="na">NA</span></td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>14.9</td><td>2.3</td><td>0.133333</td><td>9.1</td><td>0.00029</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>4</td><td>0.7</td><td>0.666667</td><td>20</td><td>0.423</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 6 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can also pass datatable's <a href="https://datatable.readthedocs.io/en/latest/api/stype.html#">stype</a> or <a href="https://datatable.readthedocs.io/en/latest/api/ltype.html#">ltype</a> data types:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="n">ltype</span><span class="o">.</span><span class="n">str</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>conservation</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="n">stype</span><span class="o">.</span><span class="n">float64</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th><th>awake</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>12.1</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>11.9</td><td><span class="na">NA</span></td><td>50</td></tr>
    <tr><td class="row_index">1</td><td>17</td><td>1.8</td><td><span class="na">NA</span></td><td>7</td><td>0.0155</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>14.4</td><td>2.4</td><td><span class="na">NA</span></td><td>9.6</td><td><span class="na">NA</span></td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>14.9</td><td>2.3</td><td>0.133333</td><td>9.1</td><td>0.00029</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>4</td><td>0.7</td><td>0.666667</td><td>20</td><td>0.423</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 6 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can remove columns based on their data type:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns_to_remove</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">]]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">f</span><span class="p">[:]</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">columns_to_remove</span><span class="p">)]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>conservation</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>An alternative is to preselect the columns you intend to keep:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># creates a list of booleans</span>
<span class="n">columns_to_select</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">dtype</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="n">ltype</span><span class="o">.</span><span class="n">int</span><span class="p">,</span> <span class="n">ltype</span><span class="o">.</span><span class="n">real</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">dtype</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">DT</span><span class="o">.</span><span class="n">names</span><span class="p">,</span> <span class="n">DT</span><span class="o">.</span><span class="n">ltypes</span><span class="p">)</span> 
<span class="p">]</span>

<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns_to_select</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>conservation</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You could also iterate through the frame and check each column's type, before recombining with <a href="https://datatable.readthedocs.io/en/latest/api/dt/cbind.html">cbind</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">matching_frames</span> <span class="o">=</span> <span class="p">[</span><span class="n">frame</span> <span class="k">for</span> <span class="n">frame</span> <span class="ow">in</span> <span class="n">DT</span> <span class="k">if</span> <span class="n">frame</span><span class="o">.</span><span class="n">ltypes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="n">ltype</span><span class="o">.</span><span class="n">real</span><span class="p">,</span> <span class="n">ltype</span><span class="o">.</span><span class="n">int</span><span class="p">)]</span>
<span class="n">dt</span><span class="o">.</span><span class="n">cbind</span><span class="p">(</span><span class="n">matching_frames</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>conservation</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Each column in a frame is treated as a frame, allowing for the list comprehension above.</p>
<p>You could also pass the <code>matching frames</code> to the <code>j</code> section of <code>DT</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="n">matching_frames</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>name</th><th>genus</th><th>vore</th><th>order</th><th>conservation</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Selecting-columns-by-logical-expressions">Selecting columns by logical expressions<a class="anchor-link" href="#Selecting-columns-by-logical-expressions"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The ideas expressed in the previous section allows for more nifty column selection.</p>
<p>Say we wish to select columns that are numeric, and have a mean greater than 10:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># returns a list of booleans</span>
<span class="n">columns_to_select</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">ltype</span> <span class="ow">in</span> <span class="p">(</span><span class="n">ltype</span><span class="o">.</span><span class="n">real</span><span class="p">,</span> <span class="n">ltype</span><span class="o">.</span><span class="n">int</span><span class="p">)</span> <span class="ow">and</span> <span class="n">DT</span><span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">()[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">10</span>
    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">ltype</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">DT</span><span class="o">.</span><span class="n">names</span><span class="p">,</span> <span class="n">DT</span><span class="o">.</span><span class="n">ltypes</span><span class="p">)</span>
<span class="p">]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns_to_select</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>sleep_total</th><th>awake</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>12.1</td><td>11.9</td><td>50</td></tr>
    <tr><td class="row_index">1</td><td>17</td><td>7</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>14.4</td><td>9.6</td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>14.9</td><td>9.1</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>4</td><td>20</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The code above preselects the columns before passing it to datatable. Note the use of <code>[0,0]</code> to return a scalar value; this allows us to compare with the scalar value <code>10</code>.</p>
<p>Alternatively, in the list comprehension, instead of a list of booleans, you could return the column names:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns_to_select</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">name</span>
    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">ltype</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">DT</span><span class="o">.</span><span class="n">names</span><span class="p">,</span> <span class="n">DT</span><span class="o">.</span><span class="n">ltypes</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">ltype</span> <span class="ow">in</span> <span class="p">(</span><span class="n">ltype</span><span class="o">.</span><span class="n">real</span><span class="p">,</span> <span class="n">ltype</span><span class="o">.</span><span class="n">int</span><span class="p">)</span> <span class="ow">and</span> <span class="n">DT</span><span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">()[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">10</span>
<span class="p">]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns_to_select</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>sleep_total</th><th>awake</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>12.1</td><td>11.9</td><td>50</td></tr>
    <tr><td class="row_index">1</td><td>17</td><td>7</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>14.4</td><td>9.6</td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>14.9</td><td>9.1</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>4</td><td>20</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You could also iterate through the frame in a list comprehension and check each column, before recombining with <a href="https://datatable.readthedocs.io/en/latest/api/dt/cbind.html">cbind</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">matching_frames</span> <span class="o">=</span> <span class="p">[</span><span class="n">frame</span> <span class="k">for</span> <span class="n">frame</span> <span class="ow">in</span> <span class="n">DT</span> 
                    <span class="k">if</span> <span class="n">frame</span><span class="o">.</span><span class="n">ltypes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">ltype</span><span class="o">.</span><span class="n">int</span><span class="p">,</span> <span class="n">ltype</span><span class="o">.</span><span class="n">real</span><span class="p">)</span> 
                    <span class="ow">and</span> <span class="n">frame</span><span class="o">.</span><span class="n">mean</span><span class="p">()[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">]</span>
<span class="n">dt</span><span class="o">.</span><span class="n">cbind</span><span class="p">(</span><span class="n">matching_frames</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>sleep_total</th><th>awake</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>12.1</td><td>11.9</td><td>50</td></tr>
    <tr><td class="row_index">1</td><td>17</td><td>7</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>14.4</td><td>9.6</td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>14.9</td><td>9.1</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>4</td><td>20</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Instead of recombining with <a href="https://datatable.readthedocs.io/en/latest/api/dt/cbind.html">cbind</a>, you could pass the <code>matching_frames</code> to the <code>j</code> section:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="n">matching_frames</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>sleep_total</th><th>awake</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>12.1</td><td>11.9</td><td>50</td></tr>
    <tr><td class="row_index">1</td><td>17</td><td>7</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>14.4</td><td>9.6</td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>14.9</td><td>9.1</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>4</td><td>20</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's look at another example, where we select only columns where the number of distinct values is less than 10:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># returns a list of booleans</span>
<span class="n">columns_to_select</span> <span class="o">=</span> <span class="p">[</span><span class="n">frame</span><span class="o">.</span><span class="n">nunique</span><span class="p">()[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="k">for</span> <span class="n">frame</span> <span class="ow">in</span> <span class="n">DT</span><span class="p">]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns_to_select</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>vore</th><th>conservation</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>carni</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>omni</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>herbi</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>omni</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>herbi</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 2 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">matching_frames</span> <span class="o">=</span> <span class="p">[</span><span class="n">frame</span> <span class="k">for</span> <span class="n">frame</span> <span class="ow">in</span> <span class="n">DT</span> <span class="k">if</span> <span class="n">frame</span><span class="o">.</span><span class="n">nunique</span><span class="p">()[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">]</span>
<span class="n">dt</span><span class="o">.</span><span class="n">cbind</span><span class="p">(</span><span class="n">matching_frames</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>vore</th><th>conservation</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>carni</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>omni</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>herbi</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>omni</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>herbi</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 2 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Or pass <code>matching_frames</code> to the <code>j</code> section in <code>DT</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="n">matching_frames</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>vore</th><th>conservation</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>carni</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>omni</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>herbi</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>omni</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>herbi</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 2 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Reordering-Columns"><strong>Reordering Columns</strong><a class="anchor-link" href="#Reordering-Columns"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can select columns in the order that you want:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns_to_select</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;conservation&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">]</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">columns_to_select</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>conservation</th><th>sleep_total</th><th>name</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>lc</td><td>12.1</td><td>Cheetah</td></tr>
    <tr><td class="row_index">1</td><td><span class="na">NA</span></td><td>17</td><td>Owl monkey</td></tr>
    <tr><td class="row_index">2</td><td>nt</td><td>14.4</td><td>Mountain beaver</td></tr>
    <tr><td class="row_index">3</td><td>lc</td><td>14.9</td><td>Greater short-tailed shrew</td></tr>
    <tr><td class="row_index">4</td><td>domesticated</td><td>4</td><td>Cow</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>To move some columns to the front, you could write a function to cover that:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">move_to_the_front</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">front_columns</span><span class="p">):</span>
    <span class="n">column_names</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">frame</span><span class="o">.</span><span class="n">names</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">front_columns</span><span class="p">:</span>
        <span class="n">column_names</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="n">front_columns</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">column_names</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">front_columns</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT</span><span class="p">[:,</span> <span class="n">move_to_the_front</span><span class="p">(</span><span class="n">DT</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;conservation&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span><span class="p">])]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>conservation</th><th>sleep_total</th><th>name</th><th>genus</th><th>vore</th><th>order</th><th>sleep_rem</th><th>sleep_cycle</th><th>awake</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>lc</td><td>12.1</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>11.9</td><td><span class="na">NA</span></td><td>50</td></tr>
    <tr><td class="row_index">1</td><td><span class="na">NA</span></td><td>17</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td>1.8</td><td><span class="na">NA</span></td><td>7</td><td>0.0155</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>nt</td><td>14.4</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>2.4</td><td><span class="na">NA</span></td><td>9.6</td><td><span class="na">NA</span></td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>lc</td><td>14.9</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>2.3</td><td>0.133333</td><td>9.1</td><td>0.00029</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>domesticated</td><td>4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>0.7</td><td>0.666667</td><td>20</td><td>0.423</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 11 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Column-Names"><strong>Column Names</strong><a class="anchor-link" href="#Column-Names"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Renaming-Columns">Renaming Columns<a class="anchor-link" href="#Renaming-Columns"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Columns with new names can be created within the <code>j</code> section by passing a dictionary:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">new_names</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;animal&quot;</span><span class="p">:</span> <span class="n">f</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s2">&quot;extinction_threat&quot;</span><span class="p">:</span> <span class="n">f</span><span class="o">.</span><span class="n">conservation</span><span class="p">}</span>
<span class="n">DT</span><span class="p">[:,</span> <span class="n">f</span><span class="o">.</span><span class="n">sleep_total</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">new_names</span><span class="p">)]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>sleep_total</th><th>animal</th><th>extinction_threat</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>12.1</td><td>Cheetah</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>17</td><td>Owl monkey</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>14.4</td><td>Mountain beaver</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>14.9</td><td>Greater short-tailed shrew</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>4</td><td>Cow</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can also rename the columns via a dictionary that maps the old column name to the new column name, and assign it to <code>DT.names</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT_copy</span> <span class="o">=</span> <span class="n">DT</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">DT_copy</span><span class="o">.</span><span class="n">names</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;animal&quot;</span><span class="p">,</span> <span class="s2">&quot;conservation&quot;</span><span class="p">:</span> <span class="s2">&quot;extinction_threat&quot;</span><span class="p">}</span>
<span class="n">DT_copy</span><span class="p">[:,</span> <span class="p">[</span><span class="s1">&#39;animal&#39;</span><span class="p">,</span> <span class="s1">&#39;sleep_total&#39;</span><span class="p">,</span> <span class="s1">&#39;extinction_threat&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>animal</th><th>sleep_total</th><th>extinction_threat</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>12.1</td><td>lc</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>17</td><td><span class="na">NA</span></td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>14.4</td><td>nt</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>14.9</td><td>lc</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>4</td><td>domesticated</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT_copy</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>animal</th><th>genus</th><th>vore</th><th>order</th><th>extinction_threat</th><th>sleep_total</th><th>sleep_rem</th><th>sleep_cycle</th><th>awake</th><th>brainwt</th><th>bodywt</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>lc</td><td>12.1</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>11.9</td><td><span class="na">NA</span></td><td>50</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td><span class="na">NA</span></td><td>17</td><td>1.8</td><td><span class="na">NA</span></td><td>7</td><td>0.0155</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>nt</td><td>14.4</td><td>2.4</td><td><span class="na">NA</span></td><td>9.6</td><td><span class="na">NA</span></td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>lc</td><td>14.9</td><td>2.3</td><td>0.133333</td><td>9.1</td><td>0.00029</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>domesticated</td><td>4</td><td>0.7</td><td>0.666667</td><td>20</td><td>0.423</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 11 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Reformatting-all-Column-Names">Reformatting all Column Names<a class="anchor-link" href="#Reformatting-all-Column-Names"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can use python's string functions to reformat column names.</p>
<p>Let's convert all column names to uppercase:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">DT_copy</span><span class="o">.</span><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="n">name</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">DT</span><span class="o">.</span><span class="n">names</span><span class="p">]</span> <span class="c1"># or list(map(str.upper, DT.names))</span>
<span class="n">DT_copy</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>NAME</th><th>GENUS</th><th>VORE</th><th>ORDER</th><th>CONSERVATION</th><th>SLEEP_TOTAL</th><th>SLEEP_REM</th><th>SLEEP_CYCLE</th><th>AWAKE</th><th>BRAINWT</th><th>BODYWT</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Cheetah</td><td>Acinonyx</td><td>carni</td><td>Carnivora</td><td>lc</td><td>12.1</td><td><span class="na">NA</span></td><td><span class="na">NA</span></td><td>11.9</td><td><span class="na">NA</span></td><td>50</td></tr>
    <tr><td class="row_index">1</td><td>Owl monkey</td><td>Aotus</td><td>omni</td><td>Primates</td><td><span class="na">NA</span></td><td>17</td><td>1.8</td><td><span class="na">NA</span></td><td>7</td><td>0.0155</td><td>0.48</td></tr>
    <tr><td class="row_index">2</td><td>Mountain beaver</td><td>Aplodontia</td><td>herbi</td><td>Rodentia</td><td>nt</td><td>14.4</td><td>2.4</td><td><span class="na">NA</span></td><td>9.6</td><td><span class="na">NA</span></td><td>1.35</td></tr>
    <tr><td class="row_index">3</td><td>Greater short-tailed shrew</td><td>Blarina</td><td>omni</td><td>Soricomorpha</td><td>lc</td><td>14.9</td><td>2.3</td><td>0.133333</td><td>9.1</td><td>0.00029</td><td>0.019</td></tr>
    <tr><td class="row_index">4</td><td>Cow</td><td>Bos</td><td>herbi</td><td>Artiodactyla</td><td>domesticated</td><td>4</td><td>0.7</td><td>0.666667</td><td>20</td><td>0.423</td><td>600</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 11 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Resources:</p>
<ul>
<li><a href="https://datatable.readthedocs.io/en/latest/">datatable docs</a></li>
<li>I am using the latest dev version of datatable <code>1.0.0a0+build.1612992576</code></li>
</ul>

</div>
</div>
</div>
</div>]]></content><author><name>Samuel Oranyeli</name></author><category term="python" /><category term="pydatatable" /><summary type="html"><![CDATA[Various Ways to select Columns]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://samukweku.github.io/data-wrangling-blog/images/some_folder/your_image.png" /><media:content medium="image" url="https://samukweku.github.io/data-wrangling-blog/images/some_folder/your_image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Data Wrangling with Python Datatable - Conditional Statements</title><link href="https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/18/Data-Wrangling-with-Python-Datatable-Conditional-Statements.html" rel="alternate" type="text/html" title="Data Wrangling with Python Datatable - Conditional Statements" /><published>2021-01-18T00:00:00-06:00</published><updated>2021-01-18T00:00:00-06:00</updated><id>https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/18/Data-Wrangling-with-Python-Datatable---Conditional-Statements</id><content type="html" xml:base="https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/18/Data-Wrangling-with-Python-Datatable-Conditional-Statements.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2021-01-18-Data Wrangling with Python Datatable - Conditional Statements.ipynb
-->

<div class="container" id="notebook-container">
        
    
    
<div class="cell border-box-sizing code_cell rendered">

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Transformation-based-on-a-Single-Condition">Transformation based on a Single Condition<a class="anchor-link" href="#Transformation-based-on-a-Single-Condition"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><a href="https://stackoverflow.com/questions/65728964/how-to-apply-a-function-to-a-dataframe-row-based-on-a-condition-and-values-of-an/65729035?noredirect=1#comment116213987_65729035">Source data</a></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Task: if <code>c</code> is positive, then value should be <code>a - b</code>, else <code>b - a</code>.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">datatable</span> <span class="kn">import</span> <span class="n">dt</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">update</span><span class="p">,</span> <span class="n">ifelse</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">Frame</span><span class="p">({</span><span class="s2">&quot;a&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> 
               <span class="s2">&quot;b&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> 
               <span class="s2">&quot;c&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]})</span>
<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea ">
<style type="text/css">
.datatable table.frame { margin-bottom: 0; }
.datatable table.frame thead { border-bottom: none; }
.datatable table.frame tr.coltypes td {  color: #FFFFFF;  line-height: 6px;  padding: 0 0.5em;}
.datatable .bool    { background: #DDDD99; }
.datatable .object  { background: #565656; }
.datatable .int     { background: #5D9E5D; }
.datatable .float   { background: #4040CC; }
.datatable .str     { background: #CC4040; }
.datatable .row_index {  background: var(--jp-border-color3);  border-right: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  font-size: 9px;}
.datatable .frame tr.coltypes .row_index {  background: var(--jp-border-color0);}
.datatable th:nth-child(2) { padding-left: 12px; }
.datatable .hellipsis {  color: var(--jp-cell-editor-border-color);}
.datatable .vellipsis {  background: var(--jp-layout-color0);  color: var(--jp-cell-editor-border-color);}
.datatable .na {  color: var(--jp-cell-editor-border-color);  font-size: 80%;}
.datatable .footer { font-size: 9px; }
.datatable .frame_dimensions {  background: var(--jp-border-color3);  border-top: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  display: inline-block;  opacity: 0.6;  padding: 1px 10px 1px 5px;}
</style>

</div>

</div>

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>a</th><th>b</th><th>c</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>1</td><td>2</td><td>3</td></tr>
    <tr><td class="row_index">1</td><td>1</td><td>2</td><td>&minus;3</td></tr>
    <tr><td class="row_index">2</td><td>2</td><td>3</td><td>2</td></tr>
    <tr><td class="row_index">3</td><td>4</td><td>2</td><td>&minus;1</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">4 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The <a href="https://datatable.readthedocs.io/en/latest/api/dt/ifelse.html">ifelse</a> function handles conditional transformations. It is similar to python's <a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if...else</a> statements or SQL's <a href="https://www.postgresql.org/docs/current/functions-conditional.html">case_when</a> function.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>BREAKDOWN OF SOLUTION</strong></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Step 1 : Define the condition, with the <code>True</code> and <code>False</code> values.</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">condition</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="c1"># positive values</span>
<span class="n">true</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">a</span> <span class="o">-</span> <span class="n">f</span><span class="o">.</span><span class="n">b</span>
<span class="n">false</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">b</span> <span class="o">-</span> <span class="n">f</span><span class="o">.</span><span class="n">a</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Step 2 : Create the <a href="https://datatable.readthedocs.io/en/latest/api/dt/ifelse.html">ifelse</a> expression.</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">if_statement</span> <span class="o">=</span> <span class="n">ifelse</span><span class="p">(</span><span class="n">condition</span><span class="p">,</span> <span class="n">true</span><span class="p">,</span> <span class="n">false</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Step 3: Apply the <code>if_statement</code> to the datatable frame to get the results</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="p">[:,</span> <span class="n">update</span><span class="p">(</span><span class="n">b</span> <span class="o">=</span> <span class="n">if_statement</span><span class="p">)]</span>
<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>a</th><th>b</th><th>c</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>1</td><td>&minus;1</td><td>3</td></tr>
    <tr><td class="row_index">1</td><td>1</td><td>1</td><td>&minus;3</td></tr>
    <tr><td class="row_index">2</td><td>2</td><td>&minus;1</td><td>2</td></tr>
    <tr><td class="row_index">3</td><td>4</td><td>&minus;2</td><td>&minus;1</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">4 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Transformation-based-on-Multiple-Conditions">Transformation based on Multiple Conditions<a class="anchor-link" href="#Transformation-based-on-Multiple-Conditions"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><a href="https://stackoverflow.com/a/19913845/7175713">Source data</a></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">Frame</span><span class="p">({</span><span class="s2">&quot;Type&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="p">],</span> 
               <span class="s2">&quot;Set&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;Z&quot;</span><span class="p">,</span> <span class="s2">&quot;Z&quot;</span><span class="p">,</span> <span class="s2">&quot;X&quot;</span><span class="p">,</span> <span class="s2">&quot;Y&quot;</span><span class="p">]})</span>

<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>Type</th><th>Set</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>A</td><td>Z</td></tr>
    <tr><td class="row_index">1</td><td>B</td><td>Z</td></tr>
    <tr><td class="row_index">2</td><td>B</td><td>X</td></tr>
    <tr><td class="row_index">3</td><td>C</td><td>Y</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">4 rows &times; 2 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Task: </li>
</ul>
<ol>
<li>if <code>Set</code> is equal to 'Z'  and <code>Type</code> is equal to 'A' then assign 'yellow' to <code>color</code>.</li>
<li>If <code>Set</code> is equal to 'Z' and <code>Type</code> is equal to 'B' then assign 'blue' to <code>color</code>.</li>
<li>If <code>Type</code> is equal to 'B' then assign 'purple' to <code>color</code>.</li>
<li>Otherwise, assign 'black' to <code>color</code>.</li>
</ol>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>BREAKDOWN OF SOLUTION</strong></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Step 1 : Define the conditions, with the <code>True</code> and <code>False</code> values.</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">condition1</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">Set</span> <span class="o">==</span> <span class="s2">&quot;Z&quot;</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="s2">&quot;A&quot;</span><span class="p">)</span>
<span class="n">true1</span> <span class="o">=</span> <span class="s2">&quot;yellow&quot;</span>
<span class="n">condition2</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">Set</span> <span class="o">==</span> <span class="s2">&quot;Z&quot;</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="s2">&quot;B&quot;</span><span class="p">)</span>
<span class="n">true2</span> <span class="o">=</span> <span class="s2">&quot;blue&quot;</span>
<span class="n">condition3</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="s2">&quot;B&quot;</span>
<span class="n">true3</span> <span class="o">=</span> <span class="s2">&quot;purple&quot;</span>
<span class="n">false</span> <span class="o">=</span> <span class="s2">&quot;black&quot;</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Step 2 : Create the <a href="https://datatable.readthedocs.io/en/latest/api/dt/ifelse.html">ifelse</a> expression.</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">if_statements</span> <span class="o">=</span> <span class="n">ifelse</span><span class="p">(</span><span class="n">condition1</span><span class="p">,</span> <span class="n">true1</span><span class="p">,</span> 
                       <span class="n">condition2</span><span class="p">,</span> <span class="n">true2</span><span class="p">,</span> 
                       <span class="n">condition3</span><span class="p">,</span> <span class="n">true3</span><span class="p">,</span> 
                       <span class="n">false</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Step 3: Apply the <code>if_statements</code> to the datatable frame to get the results</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="p">[:,</span> <span class="n">update</span><span class="p">(</span><span class="n">color</span> <span class="o">=</span> <span class="n">if_statements</span><span class="p">)]</span>
<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>Type</th><th>Set</th><th>color</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>A</td><td>Z</td><td>yellow</td></tr>
    <tr><td class="row_index">1</td><td>B</td><td>Z</td><td>blue</td></tr>
    <tr><td class="row_index">2</td><td>B</td><td>X</td><td>purple</td></tr>
    <tr><td class="row_index">3</td><td>C</td><td>Y</td><td>black</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">4 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Resources:</p>
<ul>
<li><a href="https://datatable.readthedocs.io/en/latest/api/dt/ifelse.html">ifelse</a></li>
</ul>

</div>
</div>
</div>
</div>]]></content><author><name>Samuel Oranyeli</name></author><category term="python" /><category term="pydatatable" /><summary type="html"><![CDATA[Transformations based on conditions]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://samukweku.github.io/data-wrangling-blog/images/some_folder/your_image.png" /><media:content medium="image" url="https://samukweku.github.io/data-wrangling-blog/images/some_folder/your_image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Data Wrangling with Python Datatable - Row-wise Transformations</title><link href="https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/08/Data-Wrangling-with-Python-Datatable-Row-wise-Transformations.html" rel="alternate" type="text/html" title="Data Wrangling with Python Datatable - Row-wise Transformations" /><published>2021-01-08T00:00:00-06:00</published><updated>2021-01-08T00:00:00-06:00</updated><id>https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/08/Data-Wrangling-with-Python-Datatable---Row-wise-Transformations</id><content type="html" xml:base="https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/08/Data-Wrangling-with-Python-Datatable-Row-wise-Transformations.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2021-01-08-Data Wrangling with Python Datatable - Row-wise Transformations.ipynb
-->

<div class="container" id="notebook-container">
        
    
    
<div class="cell border-box-sizing code_cell rendered">

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="Link-to-Source-data"><a href="https://stackoverflow.com/questions/63025628/how-to-get-the-difference-of-the-max-and-min-of-the-row-and-input-as-series-for/63025709#63025709">Link to Source data</a><a class="anchor-link" href="#Link-to-Source-data"> </a></h4>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Task: Get the difference between the maximum and minimum values per row for <code>Value</code> columns.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">datatable</span> <span class="kn">import</span> <span class="n">dt</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">update</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">Frame</span><span class="p">({</span><span class="s1">&#39;Ind&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
               <span class="s1">&#39;Department&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;Electronics&#39;</span><span class="p">,</span> <span class="s1">&#39;Clothing&#39;</span><span class="p">,</span> <span class="s1">&#39;Grocery&#39;</span><span class="p">],</span>
               <span class="s1">&#39;Value1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
               <span class="s1">&#39;Value2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
               <span class="s1">&#39;Value3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
               <span class="s1">&#39;Value4&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]})</span>


<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea ">
<style type="text/css">
.datatable table.frame { margin-bottom: 0; }
.datatable table.frame thead { border-bottom: none; }
.datatable table.frame tr.coltypes td {  color: #FFFFFF;  line-height: 6px;  padding: 0 0.5em;}
.datatable .bool    { background: #DDDD99; }
.datatable .object  { background: #565656; }
.datatable .int     { background: #5D9E5D; }
.datatable .float   { background: #4040CC; }
.datatable .str     { background: #CC4040; }
.datatable .row_index {  background: var(--jp-border-color3);  border-right: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  font-size: 9px;}
.datatable .frame tr.coltypes .row_index {  background: var(--jp-border-color0);}
.datatable th:nth-child(2) { padding-left: 12px; }
.datatable .hellipsis {  color: var(--jp-cell-editor-border-color);}
.datatable .vellipsis {  background: var(--jp-layout-color0);  color: var(--jp-cell-editor-border-color);}
.datatable .na {  color: var(--jp-cell-editor-border-color);  font-size: 80%;}
.datatable .footer { font-size: 9px; }
.datatable .frame_dimensions {  background: var(--jp-border-color3);  border-top: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  display: inline-block;  opacity: 0.6;  padding: 1px 10px 1px 5px;}
</style>

</div>

</div>

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>Ind</th><th>Department</th><th>Value1</th><th>Value2</th><th>Value3</th><th>Value4</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>1</td><td>Electronics</td><td>5</td><td>4</td><td>3</td><td>2</td></tr>
    <tr><td class="row_index">1</td><td>2</td><td>Clothing</td><td>4</td><td>3</td><td>2</td><td>1</td></tr>
    <tr><td class="row_index">2</td><td>3</td><td>Grocery</td><td>3</td><td>3</td><td>5</td><td>1</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">3 rows &times; 6 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>COMPLETE SOLUTION</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">value_columns</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">names</span> <span class="k">if</span> <span class="s2">&quot;Value&quot;</span> <span class="ow">in</span> <span class="n">name</span><span class="p">]</span>
<span class="n">max_min_difference</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">rowmax</span><span class="p">(</span><span class="n">value_columns</span><span class="p">)</span> <span class="o">-</span> <span class="n">dt</span><span class="o">.</span><span class="n">rowmin</span><span class="p">(</span><span class="n">value_columns</span><span class="p">)</span>
<span class="n">df</span><span class="p">[:,</span> <span class="n">update</span><span class="p">(</span><span class="n">difference</span> <span class="o">=</span> <span class="n">max_min_difference</span><span class="p">)]</span>
<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>Ind</th><th>Department</th><th>Value1</th><th>Value2</th><th>Value3</th><th>Value4</th><th>difference</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>1</td><td>Electronics</td><td>5</td><td>4</td><td>3</td><td>2</td><td>3</td></tr>
    <tr><td class="row_index">1</td><td>2</td><td>Clothing</td><td>4</td><td>3</td><td>2</td><td>1</td><td>3</td></tr>
    <tr><td class="row_index">2</td><td>3</td><td>Grocery</td><td>3</td><td>3</td><td>5</td><td>1</td><td>4</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">3 rows &times; 7 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>BREAKDOWN OF SOLUTION</strong></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Step 1 : Filter for columns that start with <code>Value</code> and prefix with the <code>f</code> symbol</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">value_columns</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">names</span> <span class="k">if</span> <span class="s2">&quot;Value&quot;</span> <span class="ow">in</span> <span class="n">name</span><span class="p">]</span>
<span class="n">value_columns</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[FExpr&lt;f[&#39;Value1&#39;]&gt;,
 FExpr&lt;f[&#39;Value2&#39;]&gt;,
 FExpr&lt;f[&#39;Value3&#39;]&gt;,
 FExpr&lt;f[&#39;Value4&#39;]&gt;]</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Step 2 : Create an <code>f-expression</code> of the difference between the row maximum and row minimum of <code>value_columns</code>. Note that there is no execution at this point; the execution of a <code>f-expression</code> only occurs within the brackets of a datatable frame.</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">max_min_difference</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">rowmax</span><span class="p">(</span><span class="n">value_columns</span><span class="p">)</span> <span class="o">-</span> <span class="n">dt</span><span class="o">.</span><span class="n">rowmin</span><span class="p">(</span><span class="n">value_columns</span><span class="p">)</span>
<span class="n">max_min_difference</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>FExpr&lt;(?) - (?)&gt;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Step 3: Apply <code>max_min_difference</code> to the datatable frame to get the results</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="p">[:,</span> <span class="n">update</span><span class="p">(</span><span class="n">difference</span> <span class="o">=</span> <span class="n">max_min_difference</span><span class="p">)]</span>
<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>Ind</th><th>Department</th><th>Value1</th><th>Value2</th><th>Value3</th><th>Value4</th><th>difference</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>1</td><td>Electronics</td><td>5</td><td>4</td><td>3</td><td>2</td><td>3</td></tr>
    <tr><td class="row_index">1</td><td>2</td><td>Clothing</td><td>4</td><td>3</td><td>2</td><td>1</td><td>3</td></tr>
    <tr><td class="row_index">2</td><td>3</td><td>Grocery</td><td>3</td><td>3</td><td>5</td><td>1</td><td>4</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">3 rows &times; 7 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Resources:</p>
<ul>
<li><p><a href="https://datatable.readthedocs.io/en/latest/api/dt/update.html#">update</a></p>
</li>
<li><p><a href="https://datatable.readthedocs.io/en/latest/api/dt/rowmax.html">rowmax</a></p>
</li>
<li><p><a href="https://datatable.readthedocs.io/en/latest/api/dt/rowmin.html">rowmin</a></p>
</li>
<li><p><a href="https://datatable.readthedocs.io/en/latest/manual/row_functions.html">Documentation on row functions</a></p>
</li>
</ul>

</div>
</div>
</div>
</div>]]></content><author><name>Samuel Oranyeli</name></author><category term="python" /><category term="pydatatable" /><summary type="html"><![CDATA[Transformations per row]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://samukweku.github.io/data-wrangling-blog/images/some_folder/your_image.png" /><media:content medium="image" url="https://samukweku.github.io/data-wrangling-blog/images/some_folder/your_image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Data Wrangling with Python Datatable - Transformations Within a GroupBy</title><link href="https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/07/Data-Wrangling-with-Python-Datatable-Transformations-Within-a-GroupBy.html" rel="alternate" type="text/html" title="Data Wrangling with Python Datatable - Transformations Within a GroupBy" /><published>2021-01-07T00:00:00-06:00</published><updated>2021-01-07T00:00:00-06:00</updated><id>https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/07/Data-Wrangling-with-Python-Datatable---Transformations-Within-a-GroupBy</id><content type="html" xml:base="https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/07/Data-Wrangling-with-Python-Datatable-Transformations-Within-a-GroupBy.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2021-01-07-Data Wrangling with Python Datatable - Transformations Within a GroupBy.ipynb
-->

<div class="container" id="notebook-container">
        
    
    
<div class="cell border-box-sizing code_cell rendered">

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="Link-to-Source-data"><a href="https://stackoverflow.com/questions/65602458/create-a-new-column-in-pandas-dataframe-based-on-the-filetered-values-in-the-row">Link to Source data</a><a class="anchor-link" href="#Link-to-Source-data"> </a></h4>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Task: Group data by <code>Date</code> and <code>Zip</code> and get the ratio of Price to maximum Price per group.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">datatable</span> <span class="kn">import</span> <span class="n">dt</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">update</span><span class="p">,</span> <span class="n">by</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">Frame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&quot;Date&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;2019-01-01&quot;</span><span class="p">,</span> <span class="s2">&quot;2019-01-01&quot;</span><span class="p">,</span> <span class="s2">&quot;2019-01-01&quot;</span><span class="p">,</span> <span class="s2">&quot;2019-01-01&quot;</span><span class="p">,</span> <span class="s2">&quot;2019-01-01&quot;</span><span class="p">],</span>
        <span class="s2">&quot;Zip&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">90102</span><span class="p">,</span> <span class="mi">90102</span><span class="p">,</span> <span class="mi">90102</span><span class="p">,</span> <span class="mi">90102</span><span class="p">,</span> <span class="mi">90103</span><span class="p">],</span>
        <span class="s2">&quot;Price&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mf">58.02</span><span class="p">,</span> <span class="mf">81.55</span><span class="p">,</span> <span class="mf">11.97</span><span class="p">,</span> <span class="mf">93.23</span><span class="p">,</span> <span class="mf">13.68</span><span class="p">],</span>
    <span class="p">}</span>
<span class="p">)</span>


<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea ">
<style type="text/css">
.datatable table.frame { margin-bottom: 0; }
.datatable table.frame thead { border-bottom: none; }
.datatable table.frame tr.coltypes td {  color: #FFFFFF;  line-height: 6px;  padding: 0 0.5em;}
.datatable .bool    { background: #DDDD99; }
.datatable .object  { background: #565656; }
.datatable .int     { background: #5D9E5D; }
.datatable .float   { background: #4040CC; }
.datatable .str     { background: #CC4040; }
.datatable .row_index {  background: var(--jp-border-color3);  border-right: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  font-size: 9px;}
.datatable .frame tr.coltypes .row_index {  background: var(--jp-border-color0);}
.datatable th:nth-child(2) { padding-left: 12px; }
.datatable .hellipsis {  color: var(--jp-cell-editor-border-color);}
.datatable .vellipsis {  background: var(--jp-layout-color0);  color: var(--jp-cell-editor-border-color);}
.datatable .na {  color: var(--jp-cell-editor-border-color);  font-size: 80%;}
.datatable .footer { font-size: 9px; }
.datatable .frame_dimensions {  background: var(--jp-border-color3);  border-top: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  display: inline-block;  opacity: 0.6;  padding: 1px 10px 1px 5px;}
</style>

</div>

</div>

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>Date</th><th>Zip</th><th>Price</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>2019-01-01</td><td>90102</td><td>58.02</td></tr>
    <tr><td class="row_index">1</td><td>2019-01-01</td><td>90102</td><td>81.55</td></tr>
    <tr><td class="row_index">2</td><td>2019-01-01</td><td>90102</td><td>11.97</td></tr>
    <tr><td class="row_index">3</td><td>2019-01-01</td><td>90102</td><td>93.23</td></tr>
    <tr><td class="row_index">4</td><td>2019-01-01</td><td>90103</td><td>13.68</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>SOLUTION</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="p">[:,</span> <span class="n">update</span><span class="p">(</span><span class="n">Ratio</span><span class="o">=</span><span class="n">f</span><span class="o">.</span><span class="n">Price</span> <span class="o">/</span> <span class="n">dt</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">Price</span><span class="p">)),</span> <span class="n">by</span><span class="p">(</span><span class="s2">&quot;Date&quot;</span><span class="p">,</span> <span class="s2">&quot;Zip&quot;</span><span class="p">)]</span>
<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>Date</th><th>Zip</th><th>Price</th><th>Ratio</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>2019-01-01</td><td>90102</td><td>58.02</td><td>0.622332</td></tr>
    <tr><td class="row_index">1</td><td>2019-01-01</td><td>90102</td><td>81.55</td><td>0.874718</td></tr>
    <tr><td class="row_index">2</td><td>2019-01-01</td><td>90102</td><td>11.97</td><td>0.128392</td></tr>
    <tr><td class="row_index">3</td><td>2019-01-01</td><td>90102</td><td>93.23</td><td>1</td></tr>
    <tr><td class="row_index">4</td><td>2019-01-01</td><td>90103</td><td>13.68</td><td>1</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 4 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Resources:</p>
<ul>
<li><p><a href="https://datatable.readthedocs.io/en/latest/api/dt/update.html#">update</a></p>
</li>
<li><p><a href="https://datatable.readthedocs.io/en/latest/manual/groupby_examples.html">Grouping with by documentation</a></p>
</li>
</ul>

</div>
</div>
</div>
</div>]]></content><author><name>Samuel Oranyeli</name></author><category term="python" /><category term="pydatatable" /><summary type="html"><![CDATA[Transformations per Group]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://samukweku.github.io/data-wrangling-blog/images/some_folder/your_image.png" /><media:content medium="image" url="https://samukweku.github.io/data-wrangling-blog/images/some_folder/your_image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Data Wrangling with Python Datatable - Select Columns by Data Type</title><link href="https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/06/Data-Wrangling-with-Python-Datatable-Select-Columns-by-Data-Type.html" rel="alternate" type="text/html" title="Data Wrangling with Python Datatable - Select Columns by Data Type" /><published>2021-01-06T00:00:00-06:00</published><updated>2021-01-06T00:00:00-06:00</updated><id>https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/06/Data-Wrangling-with-Python-Datatable---Select-Columns-by-Data-Type</id><content type="html" xml:base="https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/06/Data-Wrangling-with-Python-Datatable-Select-Columns-by-Data-Type.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2021-01-06-Data Wrangling with Python Datatable - Select Columns by Data Type.ipynb
-->

<div class="container" id="notebook-container">
        
    
    
<div class="cell border-box-sizing code_cell rendered">

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="Link-to-Source-data"><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.select_dtypes.html">Link to Source data</a><a class="anchor-link" href="#Link-to-Source-data"> </a></h4>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">datatable</span> <span class="kn">import</span> <span class="n">dt</span><span class="p">,</span> <span class="n">f</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">Frame</span><span class="p">({</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
 <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">],</span>
 <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">]}</span>
<span class="p">)</span>

<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea ">
<style type="text/css">
.datatable table.frame { margin-bottom: 0; }
.datatable table.frame thead { border-bottom: none; }
.datatable table.frame tr.coltypes td {  color: #FFFFFF;  line-height: 6px;  padding: 0 0.5em;}
.datatable .bool    { background: #DDDD99; }
.datatable .object  { background: #565656; }
.datatable .int     { background: #5D9E5D; }
.datatable .float   { background: #4040CC; }
.datatable .str     { background: #CC4040; }
.datatable .row_index {  background: var(--jp-border-color3);  border-right: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  font-size: 9px;}
.datatable .frame tr.coltypes .row_index {  background: var(--jp-border-color0);}
.datatable th:nth-child(2) { padding-left: 12px; }
.datatable .hellipsis {  color: var(--jp-cell-editor-border-color);}
.datatable .vellipsis {  background: var(--jp-layout-color0);  color: var(--jp-cell-editor-border-color);}
.datatable .na {  color: var(--jp-cell-editor-border-color);  font-size: 80%;}
.datatable .footer { font-size: 9px; }
.datatable .frame_dimensions {  background: var(--jp-border-color3);  border-top: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  display: inline-block;  opacity: 0.6;  padding: 1px 10px 1px 5px;}
</style>

</div>

</div>

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>a</th><th>b</th><th>c</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="bool" title="bool8">&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>1</td><td>1</td><td>1</td></tr>
    <tr><td class="row_index">1</td><td>2</td><td>0</td><td>2</td></tr>
    <tr><td class="row_index">2</td><td>1</td><td>1</td><td>1</td></tr>
    <tr><td class="row_index">3</td><td>2</td><td>0</td><td>2</td></tr>
    <tr><td class="row_index">4</td><td>1</td><td>1</td><td>1</td></tr>
    <tr><td class="row_index">5</td><td>2</td><td>0</td><td>2</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">6 rows &times; 3 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Select the boolean column</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="p">[:,</span> <span class="n">f</span><span class="p">[</span><span class="nb">bool</span><span class="p">]]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>b</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="bool" title="bool8">&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>1</td></tr>
    <tr><td class="row_index">1</td><td>0</td></tr>
    <tr><td class="row_index">2</td><td>1</td></tr>
    <tr><td class="row_index">3</td><td>0</td></tr>
    <tr><td class="row_index">4</td><td>1</td></tr>
    <tr><td class="row_index">5</td><td>0</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">6 rows &times; 1 column</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Select the float column</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="p">[:,</span> <span class="n">f</span><span class="p">[</span><span class="nb">float</span><span class="p">]]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>c</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>1</td></tr>
    <tr><td class="row_index">1</td><td>2</td></tr>
    <tr><td class="row_index">2</td><td>1</td></tr>
    <tr><td class="row_index">3</td><td>2</td></tr>
    <tr><td class="row_index">4</td><td>1</td></tr>
    <tr><td class="row_index">5</td><td>2</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">6 rows &times; 1 column</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li>Exclude integer column</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="p">[:,</span> <span class="p">[</span><span class="n">dtype</span><span class="o">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s2">&quot;int&quot;</span> <span class="k">for</span> <span class="n">dtype</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">ltypes</span><span class="p">]]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>b</th><th>c</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="bool" title="bool8">&#x25AA;</td><td class="float" title="float64">&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>1</td><td>1</td></tr>
    <tr><td class="row_index">1</td><td>0</td><td>2</td></tr>
    <tr><td class="row_index">2</td><td>1</td><td>1</td></tr>
    <tr><td class="row_index">3</td><td>0</td><td>2</td></tr>
    <tr><td class="row_index">4</td><td>1</td><td>1</td></tr>
    <tr><td class="row_index">5</td><td>0</td><td>2</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">6 rows &times; 2 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Resources:</p>
<ul>
<li><p><a href="https://datatable.readthedocs.io/en/latest/api/ltype.html#">ltype</a></p>
</li>
<li><p><a href="https://datatable.readthedocs.io/en/latest/api/ltype/stypes.html#">stypes</a></p>
</li>
</ul>

</div>
</div>
</div>
</div>]]></content><author><name>Samuel Oranyeli</name></author><category term="python" /><category term="pydatatable" /><summary type="html"><![CDATA[Column Selection]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://samukweku.github.io/data-wrangling-blog/images/some_folder/your_image.png" /><media:content medium="image" url="https://samukweku.github.io/data-wrangling-blog/images/some_folder/your_image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Data Wrangling with Python Datatable - Replicate Pandas’ Map Function</title><link href="https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/04/Data-Wrangling-with-Python-Datatable-Replicate-Pandas'-map.html" rel="alternate" type="text/html" title="Data Wrangling with Python Datatable - Replicate Pandas’ Map Function" /><published>2021-01-04T00:00:00-06:00</published><updated>2021-01-04T00:00:00-06:00</updated><id>https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/04/Data-Wrangling-with-Python-Datatable---Replicate-Pandas'-map</id><content type="html" xml:base="https://samukweku.github.io/data-wrangling-blog/python/pydatatable/2021/01/04/Data-Wrangling-with-Python-Datatable-Replicate-Pandas'-map.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2021-01-04-Data Wrangling with Python Datatable - Replicate Pandas' map.ipynb
-->

<div class="container" id="notebook-container">
        
    
    
<div class="cell border-box-sizing code_cell rendered">

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="Link-to-Source-data"><a href="https://chrisalbon.com/python/data_wrangling/pandas_map_values_to_values/">Link to Source data</a><a class="anchor-link" href="#Link-to-Source-data"> </a></h4>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Task: Create a new column by mapping the values in the <code>city</code> column to the <code>city_state</code> dictionary</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">datatable</span> <span class="kn">import</span> <span class="n">dt</span><span class="p">,</span> <span class="n">f</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">Frame</span><span class="p">({</span>
    <span class="s2">&quot;first_name&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;Jason&quot;</span><span class="p">,</span> <span class="s2">&quot;Molly&quot;</span><span class="p">,</span> <span class="s2">&quot;Tina&quot;</span><span class="p">,</span> <span class="s2">&quot;Jake&quot;</span><span class="p">,</span> <span class="s2">&quot;Amy&quot;</span><span class="p">],</span>
    <span class="s2">&quot;last_name&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;Miller&quot;</span><span class="p">,</span> <span class="s2">&quot;Jacobson&quot;</span><span class="p">,</span> <span class="s2">&quot;Ali&quot;</span><span class="p">,</span> <span class="s2">&quot;Milner&quot;</span><span class="p">,</span> <span class="s2">&quot;Cooze&quot;</span><span class="p">],</span>
    <span class="s2">&quot;age&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">42</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">73</span><span class="p">],</span>
    <span class="s2">&quot;city&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;San Francisco&quot;</span><span class="p">,</span> <span class="s2">&quot;Baltimore&quot;</span><span class="p">,</span> <span class="s2">&quot;Miami&quot;</span><span class="p">,</span> <span class="s2">&quot;Douglas&quot;</span><span class="p">,</span> <span class="s2">&quot;Boston&quot;</span><span class="p">],</span>
<span class="p">})</span>

<span class="n">city_to_state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">&quot;San Francisco&quot;</span><span class="p">:</span> <span class="s2">&quot;California&quot;</span><span class="p">,</span>
    <span class="s2">&quot;Baltimore&quot;</span><span class="p">:</span> <span class="s2">&quot;Maryland&quot;</span><span class="p">,</span>
    <span class="s2">&quot;Miami&quot;</span><span class="p">:</span> <span class="s2">&quot;Florida&quot;</span><span class="p">,</span>
    <span class="s2">&quot;Douglas&quot;</span><span class="p">:</span> <span class="s2">&quot;Arizona&quot;</span><span class="p">,</span>
    <span class="s2">&quot;Boston&quot;</span><span class="p">:</span> <span class="s2">&quot;Massachusetts&quot;</span><span class="p">,</span>
<span class="p">}</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea ">
<style type="text/css">
.datatable table.frame { margin-bottom: 0; }
.datatable table.frame thead { border-bottom: none; }
.datatable table.frame tr.coltypes td {  color: #FFFFFF;  line-height: 6px;  padding: 0 0.5em;}
.datatable .bool    { background: #DDDD99; }
.datatable .object  { background: #565656; }
.datatable .int     { background: #5D9E5D; }
.datatable .float   { background: #4040CC; }
.datatable .str     { background: #CC4040; }
.datatable .row_index {  background: var(--jp-border-color3);  border-right: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  font-size: 9px;}
.datatable .frame tr.coltypes .row_index {  background: var(--jp-border-color0);}
.datatable th:nth-child(2) { padding-left: 12px; }
.datatable .hellipsis {  color: var(--jp-cell-editor-border-color);}
.datatable .vellipsis {  background: var(--jp-layout-color0);  color: var(--jp-cell-editor-border-color);}
.datatable .na {  color: var(--jp-cell-editor-border-color);  font-size: 80%;}
.datatable .footer { font-size: 9px; }
.datatable .frame_dimensions {  background: var(--jp-border-color3);  border-top: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  display: inline-block;  opacity: 0.6;  padding: 1px 10px 1px 5px;}
</style>

</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>first_name</th><th>last_name</th><th>age</th><th>city</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Jason</td><td>Miller</td><td>42</td><td>San Francisco</td></tr>
    <tr><td class="row_index">1</td><td>Molly</td><td>Jacobson</td><td>52</td><td>Baltimore</td></tr>
    <tr><td class="row_index">2</td><td>Tina</td><td>Ali</td><td>36</td><td>Miami</td></tr>
    <tr><td class="row_index">3</td><td>Jake</td><td>Milner</td><td>24</td><td>Douglas</td></tr>
    <tr><td class="row_index">4</td><td>Amy</td><td>Cooze</td><td>73</td><td>Boston</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 4 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">city_to_state</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>{&#39;San Francisco&#39;: &#39;California&#39;,
 &#39;Baltimore&#39;: &#39;Maryland&#39;,
 &#39;Miami&#39;: &#39;Florida&#39;,
 &#39;Douglas&#39;: &#39;Arizona&#39;,
 &#39;Boston&#39;: &#39;Massachusetts&#39;}</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Complete-Solution"><strong>Complete Solution</strong><a class="anchor-link" href="#Complete-Solution"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">m</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s2">&quot;city&quot;</span><span class="p">]</span>
<span class="n">m</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">city_to_state</span><span class="p">)</span>

<span class="n">df</span><span class="p">[</span><span class="s2">&quot;state&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">m</span>
<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>first_name</th><th>last_name</th><th>age</th><th>city</th><th>state</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Jason</td><td>Miller</td><td>42</td><td>San Francisco</td><td>California</td></tr>
    <tr><td class="row_index">1</td><td>Molly</td><td>Jacobson</td><td>52</td><td>Baltimore</td><td>Maryland</td></tr>
    <tr><td class="row_index">2</td><td>Tina</td><td>Ali</td><td>36</td><td>Miami</td><td>Florida</td></tr>
    <tr><td class="row_index">3</td><td>Jake</td><td>Milner</td><td>24</td><td>Douglas</td><td>Arizona</td></tr>
    <tr><td class="row_index">4</td><td>Amy</td><td>Cooze</td><td>73</td><td>Boston</td><td>Massachusetts</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Breakdown-of-Solution"><strong>Breakdown of Solution</strong><a class="anchor-link" href="#Breakdown-of-Solution"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Step 1: Create a temporary dataframe to hold the values in <code>city</code>.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">m</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;city&#39;</span><span class="p">]</span>
<span class="n">m</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>city</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>San Francisco</td></tr>
    <tr><td class="row_index">1</td><td>Baltimore</td></tr>
    <tr><td class="row_index">2</td><td>Miami</td></tr>
    <tr><td class="row_index">3</td><td>Douglas</td></tr>
    <tr><td class="row_index">4</td><td>Boston</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 1 column</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Step 2: Replace the values in <code>m</code> with <code>city_to_state</code>, by using the <a href="https://datatable.readthedocs.io/en/latest/api/frame/replace.html">replace</a> function. Note that the <a href="https://datatable.readthedocs.io/en/latest/api/frame/replace.html">replace</a> function does not require assignment, as the computation is done inplace:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">m</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">city_to_state</span><span class="p">)</span>
<span class="n">m</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>city</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>California</td></tr>
    <tr><td class="row_index">1</td><td>Maryland</td></tr>
    <tr><td class="row_index">2</td><td>Florida</td></tr>
    <tr><td class="row_index">3</td><td>Arizona</td></tr>
    <tr><td class="row_index">4</td><td>Massachusetts</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 1 column</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Step 3: Assign <code>m</code> to new column <code>state</code> in <code>df</code>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span><span class="p">[</span><span class="s2">&quot;state&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">m</span>
<span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">
<div class="datatable">
  <table class="frame">
  <thead>
    <tr class="colnames"><td class="row_index"></td><th>first_name</th><th>last_name</th><th>age</th><th>city</th><th>state</th></tr>
    <tr class="coltypes"><td class="row_index"></td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="int" title="int32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td><td class="str" title="str32">&#x25AA;&#x25AA;&#x25AA;&#x25AA;</td></tr>
  </thead>
  <tbody>
    <tr><td class="row_index">0</td><td>Jason</td><td>Miller</td><td>42</td><td>San Francisco</td><td>California</td></tr>
    <tr><td class="row_index">1</td><td>Molly</td><td>Jacobson</td><td>52</td><td>Baltimore</td><td>Maryland</td></tr>
    <tr><td class="row_index">2</td><td>Tina</td><td>Ali</td><td>36</td><td>Miami</td><td>Florida</td></tr>
    <tr><td class="row_index">3</td><td>Jake</td><td>Milner</td><td>24</td><td>Douglas</td><td>Arizona</td></tr>
    <tr><td class="row_index">4</td><td>Amy</td><td>Cooze</td><td>73</td><td>Boston</td><td>Massachusetts</td></tr>
  </tbody>
  </table>
  <div class="footer">
    <div class="frame_dimensions">5 rows &times; 5 columns</div>
  </div>
</div>

</div>

</div>

</div>
</div>

</div>
    

</div>]]></content><author><name>Samuel Oranyeli</name></author><category term="python" /><category term="pydatatable" /><summary type="html"><![CDATA[Replace values in a column with a dictionary]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://samukweku.github.io/data-wrangling-blog/images/some_folder/your_image.png" /><media:content medium="image" url="https://samukweku.github.io/data-wrangling-blog/images/some_folder/your_image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>